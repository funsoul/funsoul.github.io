[{"title":"C Sharp连接Access数据库出现的问题","url":"/2014/03/29/C%20Sharp%20%E8%BF%9E%E6%8E%A5Access%E6%95%B0%E6%8D%AE%E5%BA%93%E5%87%BA%E7%8E%B0%E7%9A%84%E9%97%AE%E9%A2%98/","content":"<p>这两天在做数据库，发现一个很多网友都头疼的问题，就是C#连接Access数据库的时候显示“不可识别的数据库类型”。</p>\n<p>很多人在做Access数据库的时候总是默认保存它的后缀名“.accedb”，然后用Provider=Microsoft.Jet.OLEDB.4.0;Data Source=…去连接Access数据库。</p>\n<p>首先第一个问题就是C#是不识别后缀“.accedb”的，因此只能将该格式转换为C#识别的“.mdb”。</p>\n<p>然后很多人会发现还是提示“不可识别的数据库类型”！其实原因就在于“Provider=Microsoft.Jet.OLEDB.4.0;Data Source=…”。因为那个 Microsoft.Jet.OLEDB.4.0， 是针对低版本的 Access 使用的。</p>\n<p>只需要把</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">Microsoft.Jet.OLEDB.4.0</span><br></pre></td></tr></table></figure>\n<p>改为</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">Microsoft.ACE.OLEDB.12.0</span><br></pre></td></tr></table></figure>\n<p>数据源就可以正常的输出啦！</p>\n","categories":["技术"],"tags":["C Sharp","问题排查"]},{"title":"Oracle中的exists和in","url":"/2016/09/19/Oracle%E4%B8%AD%E7%9A%84exists%E5%92%8Cin/","content":"<h2 id=\"写在前\"><a href=\"#写在前\" class=\"headerlink\" title=\"写在前\"></a>写在前</h2><p>今天有一个业务，前台是一个供用户选择条件进行查询的功能。选择完毕后点击查询，前台使用get方式发送打包好的参数列表到后台（Controller），持久层拿到参数列表后拼装到SQL中，使用jdbc连接oracle拿数据。</p>\n<h2 id=\"问题\"><a href=\"#问题\" class=\"headerlink\" title=\"问题\"></a>问题</h2><p>当条件过大（据说有7000多个数据），出现第一个问题，413 FULL HEAD ERROR。很明显是数据量过大，而使用的又是get方式传输，get请求的数据会附在URL之后（就是把数据放置在HTTP协议头中），以?分割URL和传输数据，参数之间以&amp;相连。如：login.action?name=cym&amp;password=idontknow。如果数据是英文字母/数字，原样发送，如果是空格，转换为+，如果是中文/其他字符，则直接把字符串用BASE64加密。GET方式提交的数据依据浏览器而定，IE环境下的URL长度限制为2083，理论上POST没有限制，可传较大量的数据。</p>\n<p>第二个问题出现在SQL，拼接字符串中使用的where…in..，JDBC会抛出“java.sql.SQLException: ORA-01795: 列表中的最大表达式数为 1000”这个异常。没想到oracle还有这种限制，据说11g后不存在这个限制。</p>\n<h2 id=\"解决方案\"><a href=\"#解决方案\" class=\"headerlink\" title=\"解决方案\"></a>解决方案</h2><h3 id=\"一、使用临时表\"><a href=\"#一、使用临时表\" class=\"headerlink\" title=\"一、使用临时表\"></a>一、使用临时表</h3><figure class=\"highlight sql\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">SELECT</span> * <span class=\"keyword\">FROM</span> t <span class=\"keyword\">WHERE</span> <span class=\"keyword\">id</span> <span class=\"keyword\">IN</span> (<span class=\"keyword\">SELECT</span> <span class=\"keyword\">id</span> <span class=\"keyword\">FROM</span> temp)</span><br></pre></td></tr></table></figure>\n<p>建立一个表来存储传入参数，取数据的时候先从临时表中遍历取参数，然后再将取出的参数拿去作为in条件</p>\n<h3 id=\"二、使用exists\"><a href=\"#二、使用exists\" class=\"headerlink\" title=\"二、使用exists\"></a>二、使用exists</h3><figure class=\"highlight sql\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">SELECT</span> * <span class=\"keyword\">FROM</span> a <span class=\"keyword\">WHERE</span> <span class=\"keyword\">EXISTS</span>( <span class=\"keyword\">SELECT</span> <span class=\"number\">1</span> <span class=\"keyword\">FROM</span> b <span class=\"keyword\">WHERE</span> a.employee_id=b.employee_id)</span><br></pre></td></tr></table></figure>\n<h2 id=\"对比\"><a href=\"#对比\" class=\"headerlink\" title=\"对比\"></a>对比</h2><ul>\n<li>IN比 EXISTS 的可读性更好</li>\n<li>EXISTS 比IN 的表达性更好（更适合复杂的语句）</li>\n</ul>\n<p>二者之间性能没有差异（但对于某些数据库来说性能差异会非常大）</p>\n","categories":["技术"],"tags":["Oracle"]},{"title":"PHP实现契约式设计","url":"/2020/05/22/PHP%E5%AE%9E%E7%8E%B0%E5%A5%91%E7%BA%A6%E5%BC%8F%E8%AE%BE%E8%AE%A1/","content":"<h2 id=\"什么是契约\"><a href=\"#什么是契约\" class=\"headerlink\" title=\"什么是契约\"></a>什么是契约</h2><blockquote>\n<p>契约，最初是指双方或多方共同协议订立的有关买卖、抵押、租赁等关系的文书，可以理解为“守信用”。形式有精神契约和文字合同契约，对象多样，可以是：生意伙伴、挚友、爱人、国家、世界、全人类，以及对自己的契约等，可以用“文字合同”来约定，可以用“语言”来约定，还可以是“无言”的契约。</p>\n</blockquote>\n<p>—— 来自百度百科</p>\n<p>由上可知，关键词有：信用、双方（或多方）、约定。</p>\n<h2 id=\"什么是契约式设计\"><a href=\"#什么是契约式设计\" class=\"headerlink\" title=\"什么是契约式设计\"></a>什么是契约式设计</h2><blockquote>\n<p>契约式设计（英语：Design by Contract，缩写为 DbC），一种设计计算机软件的方法。这种方法要求软件设计者为软件组件定义正式的，精确的并且可验证的接口，这样，为传统的抽象数据类型又增加了先验条件、后验条件和不变式。这种方法的名字里用到的“契约”或者说“契约”是一种比喻，因为它和商业契约的情况有点类似。</p>\n</blockquote>\n<p>—— 来自WIKI</p>\n<p>由上可知，关键词有：软件方法、可验证、先验条件、后验条件、不变式。</p>\n<p><code>契约式设计</code>最早由伯特兰·迈耶于1986年提出，并在Eiffel语言实现了该设计。</p>\n<p>这是Eiffel语言对契约式设计的官方介绍：<a href=\"https://www.eiffel.com/values/design-by-contract/introduction/\" target=\"_blank\" rel=\"noopener\">Building bug-free O-O software: An Introduction to Design by Contract™</a>，不想看英文版，可以看看我翻译的中文版（如有错误，请不吝赐教）：<a href=\"https://funsoul.gitbook.io/notebook/she-ji-mo-shi/yi-gou-jian-wu-bug-mian-xiang-dui-xiang-ruan-jian-qi-yue-shi-she-ji-jian-jie\" target=\"_blank\" rel=\"noopener\">构建无bug面向对象软件：契约式设计简介</a></p>\n<p>契约一词来源自商业，在客户和供应商之间产生。双方必须针对某一协议（契约）履行义务，如有一方不履行相应的义务（责任），则视为毁约。可见契约在商业社会代表着<code>可靠</code>、<code>信任</code>。</p>\n<p>在面向对象编程范式中，契约式设计由几部分组成</p>\n<ul>\n<li>前置条件（对输入参数的值进行检验，如果不符合契约，则不会进入函数体，而是抛异常）</li>\n<li>后置条件（进入函数体后，针对例程参数做进一步检验，或处理资源释放等情况）</li>\n<li>类的不变式（针对类的整体属性做断言）</li>\n</ul>\n<h2 id=\"为什么要使用契约式设计\"><a href=\"#为什么要使用契约式设计\" class=\"headerlink\" title=\"为什么要使用契约式设计\"></a>为什么要使用契约式设计</h2><p>理解契约式设计前，先看另一种安全编程方法——防御性编程。其做法是，客户在调用供应方代码前，先做好前置检验。契约式设计和防御性编程中，如果客户违反了前置条件，供应方都会抛出异常，然后给到客户。但是契约式设计的做法更简单，不仅如此，还有以下明显的好处：</p>\n<ol>\n<li>面向对象：在编写继承、多态等重用性代码时，不满足契约会提前终止，解决隐性覆盖的问题</li>\n<li>文档化：例程的契约是很好的说明文档</li>\n<li>调试体：契约模块是一种单元测试</li>\n<li>质量保证：容易在调试阶段找出不满足契约的情况</li>\n<li>测试文化：面向契约设计可以引导供应方思考例程的边界条件</li>\n</ol>\n<h2 id=\"PHP如何实现契约式设计\"><a href=\"#PHP如何实现契约式设计\" class=\"headerlink\" title=\"PHP如何实现契约式设计\"></a>PHP如何实现契约式设计</h2><p>按照契约式设计思想，可以实现一个简易版的PHP库：<a href=\"https://github.com/funsoul/contract-php\" target=\"_blank\" rel=\"noopener\">contract-php</a>，这个库可以很方便的通过<code>注解</code>的方式定义函数的<code>前置条件</code>、<code>不变式</code>和<code>后置条件</code>。</p>\n<h3 id=\"安装\"><a href=\"#安装\" class=\"headerlink\" title=\"安装\"></a>安装</h3><figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">git <span class=\"built_in\">clone</span> https://github.com/funsoul/contract-php.git</span><br><span class=\"line\"><span class=\"built_in\">cd</span> contract-php</span><br><span class=\"line\">composer install</span><br></pre></td></tr></table></figure>\n<h3 id=\"使用\"><a href=\"#使用\" class=\"headerlink\" title=\"使用\"></a>使用</h3><h4 id=\"通过注解来制定契约\"><a href=\"#通过注解来制定契约\" class=\"headerlink\" title=\"通过注解来制定契约\"></a>通过注解来制定契约</h4><figure class=\"highlight php\"><table><tr><td class=\"code\"><pre><span class=\"line\">@DbcRequire(condition=<span class=\"string\">\"a &gt;= 1, a &lt; 10, b &gt;= 1\"</span>)</span><br><span class=\"line\">@DbcInvariant(condition=<span class=\"string\">\"discount = 0.6\"</span>)</span><br><span class=\"line\">@DbcEnsure(callback=<span class=\"string\">\"ContractExamples\\MyEnsureCallback\"</span>)</span><br></pre></td></tr></table></figure>\n<h4 id=\"目前支持的条件\"><a href=\"#目前支持的条件\" class=\"headerlink\" title=\"目前支持的条件\"></a>目前支持的条件</h4><ul>\n<li>gt &gt;</li>\n<li>ge &gt;=</li>\n<li>lt &lt;</li>\n<li>le &lt;=</li>\n<li>e =</li>\n<li>ne !=</li>\n</ul>\n<h4 id=\"自定义回调-如果条件不满足你的需求\"><a href=\"#自定义回调-如果条件不满足你的需求\" class=\"headerlink\" title=\"自定义回调 (如果条件不满足你的需求)\"></a>自定义回调 (如果条件不满足你的需求)</h4><p>MyRequireCallback.php</p>\n<figure class=\"highlight php\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">use</span> <span class=\"title\">Contract</span>\\<span class=\"title\">ContractCallbackInterface</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">MyRequireCallback</span> <span class=\"keyword\">implements</span> <span class=\"title\">ContractCallbackInterface</span></span></span><br><span class=\"line\"><span class=\"class\"></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">match</span><span class=\"params\">(array $arguments)</span>: <span class=\"title\">bool</span></span></span><br><span class=\"line\"><span class=\"function\">    </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">list</span>($a, $b) = $arguments;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">return</span> $a &gt;= <span class=\"number\">1</span> || $b &gt;= <span class=\"number\">1</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h4 id=\"供应商\"><a href=\"#供应商\" class=\"headerlink\" title=\"供应商\"></a>供应商</h4><p>Test.php</p>\n<figure class=\"highlight php\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Test</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"comment\">/** <span class=\"doctag\">@var</span> float */</span></span><br><span class=\"line\">    <span class=\"keyword\">private</span> $discount = <span class=\"number\">0.5</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@DbcRequire</span>(condition=\"a &gt;= 1, a &lt; 10, b &gt;= 1\")</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@param</span> int $a</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@param</span> int $b</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@return</span> int</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">addTwoNums</span><span class=\"params\">(int $a, int $b)</span>: <span class=\"title\">int</span></span></span><br><span class=\"line\"><span class=\"function\">    </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> $a + $b;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@DbcRequire</span>(callback=\"ContractExamples\\MyRequireCallback\")</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@DbcEnsure</span>(callback=\"ContractExamples\\MyEnsureCallback\")</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@param</span> int $a</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@param</span> int $b</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@return</span> int</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">addTwoNumsCallback</span><span class=\"params\">(int $a, int $b)</span>: <span class=\"title\">int</span></span></span><br><span class=\"line\"><span class=\"function\">    </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> $a + $b;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@DbcRequire</span>(callback=\"ContractExamples\\MyRequireCallback\")</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@DbcEnsure</span>(callback=\"ContractExamples\\MyEnsureCallback\")</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@DbcInvariant</span>(condition=\"discount = 0.6\")</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@param</span> int $a</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@param</span> int $b</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@return</span> float</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">multiplyDiscount</span><span class=\"params\">(int $a, int $b)</span>: <span class=\"title\">float</span></span></span><br><span class=\"line\"><span class=\"function\">    </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> ($a + $b) * <span class=\"keyword\">$this</span>-&gt;discount;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h4 id=\"客户\"><a href=\"#客户\" class=\"headerlink\" title=\"客户\"></a>客户</h4><figure class=\"highlight php\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/** <span class=\"doctag\">@var</span> ContractExamples\\Test $proxy */</span></span><br><span class=\"line\">$proxy = <span class=\"keyword\">new</span> Contract\\Proxy(<span class=\"keyword\">new</span> ContractExamples\\Test());</span><br><span class=\"line\"></span><br><span class=\"line\">$res1 = $proxy-&gt;addTwoNums(<span class=\"number\">1</span>, <span class=\"number\">1</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">$res2 = $proxy-&gt;addTwoNumsCallback(<span class=\"number\">1</span>, <span class=\"number\">1</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">$res3 = $proxy-&gt;multiplyDiscount(<span class=\"number\">2</span>, <span class=\"number\">2</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">var_dump($res1, $res2, $res3);</span><br></pre></td></tr></table></figure>","categories":["项目"],"tags":["PHP","契约式设计"]},{"title":"PHP查询impala超时处理","url":"/2018/10/23/PHP%E6%9F%A5%E8%AF%A2impala%E8%B6%85%E6%97%B6%E5%A4%84%E7%90%86/","content":"<h2 id=\"问题\"><a href=\"#问题\" class=\"headerlink\" title=\"问题\"></a>问题</h2><p>php-fpm的 <strong>request_terminate_timeout</strong> 参数，当设置为0时，worker进程在处理请求时就没有超时处理，0表示无限制，也就是说，用户在查询SQL时，如果该条SQL耗时非常久，worker也不会主动关闭该请求。这里就会出现一种常见的情况：用户看到一直不响应，那就刷新重来，重复查询操作。由于前一个worker还在等待impala服务返回数据，没执行完毕，不能恢复空闲状态，所以master只会把该请求分配给其他worker执行。长此以来，impala服务面对这么多耗时SQL，CPU和内存疯长，处理速度下降。fpm的“僵死”worker越来越多，web服务被拖慢。</p>\n<p>优化过程如下：</p>\n<ol>\n<li>request_terminate_timeout设置一个大于0的常数值</li>\n<li>odbc配置设置</li>\n<li>thrift查询impala</li>\n<li>使用impala API</li>\n</ol>\n<h2 id=\"request-terminate-timeout设置一个大于0的常数值\"><a href=\"#request-terminate-timeout设置一个大于0的常数值\" class=\"headerlink\" title=\"request_terminate_timeout设置一个大于0的常数值\"></a>request_terminate_timeout设置一个大于0的常数值</h2><p>既然worker不会主动结束与impala的连接，那就设置一个大于0的常数值，比如60s，那么当请求到了60s还没结束那就主动关闭掉。（<strong>这里的请求指的web请求</strong>）看起来是没问题的，既保证了impala服务稳定，又释放了worker的压力。但是，有两个小问题也很容易想到：</p>\n<ol>\n<li>worker主动关闭返回504 gateway timeout，这个异常是无法在php捕获的，所以没办法争对做处理。</li>\n<li>修改php-fpm的配置，可能会影响其他web程序的正常执行。</li>\n</ol>\n<h2 id=\"odbc配置设置\"><a href=\"#odbc配置设置\" class=\"headerlink\" title=\"odbc配置设置\"></a>odbc配置设置</h2><p>我们使用的连接方案是<strong>odbc</strong>，从php到impala，整个调用栈大约如此：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">php-&gt;phpodbc-&gt;unixodbc-&gt;impalaodbc</span><br></pre></td></tr></table></figure>\n<p>由于是cgi程序，所以对进程操作会产生各种奇怪的情况，这里就不做分析了，可能性不大。</p>\n<h3 id=\"1、-odbc-setoption\"><a href=\"#1、-odbc-setoption\" class=\"headerlink\" title=\"1、 odbc_setoption()\"></a>1、 odbc_setoption()</h3><figure class=\"highlight php\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 2. Option 0 of SQLSetStmtOption() is SQL_QUERY_TIMEOUT.</span></span><br><span class=\"line\"><span class=\"comment\">//    This example sets the query to timeout after 30 seconds.</span></span><br><span class=\"line\">$result = odbc_prepare($conn, $sql);</span><br><span class=\"line\">odbc_setoption($result, <span class=\"number\">2</span>, <span class=\"number\">0</span>, <span class=\"number\">30</span>);</span><br><span class=\"line\">odbc_execute($result);</span><br></pre></td></tr></table></figure>\n<p>看了下官网手册，发现了这个函数<a href=\"http://php.net/manual/zh/function.odbc-setoption.php\" target=\"_blank\" rel=\"noopener\">odbc_setoption</a>，但是并没有用，因为impalaodbc并没有实现这个接口。</p>\n<h3 id=\"2、odbc-ini中SocketTimeout参数\"><a href=\"#2、odbc-ini中SocketTimeout参数\" class=\"headerlink\" title=\"2、odbc.ini中SocketTimeout参数\"></a>2、odbc.ini中SocketTimeout参数</h3><blockquote>\n<p>The number of seconds that the TCP socket waits for a response from the server before timing out the request and returning an error message</p>\n</blockquote>\n<p>看了下<a href=\"https://www.cloudera.com/documentation/other/connectors/impala-odbc/latest/Cloudera-ODBC-Driver-for-Impala-Install-Guide.pdf\" target=\"_blank\" rel=\"noopener\">文档</a>，这里是指TCP socket的闲置连接超时，而不是查询超时。也没用，这个参数和我们的需求没什么关系。</p>\n<h2 id=\"thrift查询impala\"><a href=\"#thrift查询impala\" class=\"headerlink\" title=\"thrift查询impala\"></a>thrift查询impala</h2><p>前面都是用odbc来连接impala，换个思路，使用thrift来试试看。上github找了两个库，<a href=\"https://github.com/tranch/php-thrift-impala\" target=\"_blank\" rel=\"noopener\">tranch/php-thrift-impala</a>,<a href=\"https://github.com/Automattic/php-thrift-sql\" target=\"_blank\" rel=\"noopener\">Automattic/php-thrift-sql</a>。开源万岁:)</p>\n<p>由于我们的项目使用laravel来写，Automattic/php-thrift-sql就不太适合了（composer下载要账密是什么鬼= =），难道要我把仓库拉下来改一下？都8102年了，不支持composer，没有namespace的代码要你何用！于是，我用了这个tranch/php-thrift-impala。但是，这个仓库有bug！它自己封装的超时设置无效的！怪不得没有几个星星啊~没办法，然后，我结合Automattic/php-thrift-sql这个仓库的例子写了一个，完美执行。以后有空我封装一下开源吧~ :)</p>\n<figure class=\"highlight php\"><table><tr><td class=\"code\"><pre><span class=\"line\">$impalaHost = <span class=\"string\">'127.0.0.1'</span>;</span><br><span class=\"line\">$impalaThriftPort = <span class=\"number\">21000</span>;</span><br><span class=\"line\">$timeout = <span class=\"number\">60000</span>;</span><br><span class=\"line\">$sql = <span class=\"string\">'select * from tb;'</span>;</span><br><span class=\"line\">$user = <span class=\"string\">'admin'</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">$socket = <span class=\"keyword\">new</span> \\Thrift\\Transport\\TSocket($impalaHost, $impalaThriftPort);</span><br><span class=\"line\">$socket-&gt;setRecvTimeout($timeout);</span><br><span class=\"line\"></span><br><span class=\"line\">$transport = <span class=\"keyword\">new</span> \\Thrift\\Transport\\TBufferedTransport($socket, <span class=\"number\">1024</span>, <span class=\"number\">1024</span>);</span><br><span class=\"line\">$protocol = <span class=\"keyword\">new</span> \\Thrift\\Protocol\\TBinaryProtocol($transport);</span><br><span class=\"line\"></span><br><span class=\"line\">$client = <span class=\"keyword\">new</span> \\ThriftSQL\\ImpalaServiceClient($protocol);</span><br><span class=\"line\">$transport-&gt;open();</span><br><span class=\"line\"></span><br><span class=\"line\">$query = <span class=\"keyword\">new</span> \\ThriftSQL\\Query(<span class=\"keyword\">array</span>(<span class=\"string\">'query'</span> =&gt; $sql, <span class=\"string\">'hadoop_user'</span> =&gt; $user));</span><br><span class=\"line\">$handle = $client-&gt;query($query);</span><br><span class=\"line\"></span><br><span class=\"line\">$metadata = $client-&gt;get_results_metadata($handle);</span><br><span class=\"line\">$fields = $metadata-&gt;schema-&gt;fieldSchemas;</span><br><span class=\"line\"></span><br><span class=\"line\">$data = <span class=\"keyword\">array</span>();</span><br><span class=\"line\">$dataPiece = $client-&gt;fetch($handle, <span class=\"keyword\">false</span>, <span class=\"number\">1024</span>);</span><br><span class=\"line\">$data = array_merge($data, <span class=\"keyword\">static</span>::parseField($dataPiece, $fields));</span><br><span class=\"line\"><span class=\"keyword\">while</span> ($dataPiece-&gt;has_more)&#123;</span><br><span class=\"line\">    $dataPiece = $client-&gt;fetch($handle, <span class=\"keyword\">false</span>, <span class=\"number\">1024</span>);</span><br><span class=\"line\">    $data = array_merge($data, <span class=\"keyword\">static</span>::parseField($dataPiece, $fields));</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">$transport-&gt;close();</span><br></pre></td></tr></table></figure>\n<h3 id=\"注意点\"><a href=\"#注意点\" class=\"headerlink\" title=\"注意点\"></a>注意点</h3><p>thrift查询impala在php层就可以处理超时。但是，毕竟是php代码，查询会慢一些，我简单对比了一下，同一个查询，thrift和odbc相比有一倍多的差异。所以在这个系统中，并不是只用thrift或者odbc，而是看场景，混合着用。</p>\n<p>但是！想法还是太naive，本以为主动断开连接，impala就会取消耗时查询。impala还是没有终止查询任务，内存继续疯长。</p>\n<h2 id=\"使用impala-API\"><a href=\"#使用impala-API\" class=\"headerlink\" title=\"使用impala API\"></a>使用impala API</h2><p>官网看到有<a href=\"https://archive.cloudera.com/cm6/6.3.0/generic/jar/cm_api/apidocs/resource_ImpalaQueriesResource.html\" target=\"_blank\" rel=\"noopener\">终止查询任务的API</a></p>\n<ul>\n<li>获取查询任务列表API：GET /clusters/{clusterName}/services/{serviceName}/impalaQueries</li>\n<li>取消查询API：POST /clusters/{clusterName}/services/{serviceName}/impalaQueries/{queryId}/cancel </li>\n</ul>\n<p>步骤很简单，</p>\n<ol>\n<li>通过获取查询列表API，得到所有查询的详情</li>\n<li>通过查询者和查询SQL与列表对比，得到queryId</li>\n<li>有了queryId和取消查询API，就真正解决了超时查询的终止问题</li>\n</ol>\n<p>thanks :)</p>\n","categories":["技术"],"tags":["问题排查","PHP","ODBC","impala","thrift"]},{"title":"PHP返回对象的公有属性和值","url":"/2018/05/03/PHP%E8%BF%94%E5%9B%9E%E5%AF%B9%E8%B1%A1%E7%9A%84%E5%85%AC%E6%9C%89%E5%B1%9E%E6%80%A7%E5%92%8C%E5%80%BC/","content":"<p>获取对象的公有属性和值，很自然的会想到 <strong>get_object_vars</strong> 这个函数，可以这样写，</p>\n<figure class=\"highlight php\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">User</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> $age = <span class=\"number\">18</span>;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> $name = <span class=\"string\">'xxx'</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">$user = <span class=\"keyword\">new</span> User();</span><br><span class=\"line\">$item = get_object_vars($user);</span><br><span class=\"line\">print_r($item);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// Array</span></span><br><span class=\"line\"><span class=\"comment\">// (</span></span><br><span class=\"line\"><span class=\"comment\">//     [name] =&gt; xxx</span></span><br><span class=\"line\"><span class=\"comment\">// )</span></span><br></pre></td></tr></table></figure>\n<p>上面的代码是写在对象的外部的，可不可以提供一个 <strong>trait</strong> 使得每个对象都复用一个接口，供外部使用呢？这样一来，看上去更像是对象自己的方法，我们可以通过这个方法来取得对象的公有属性与其值。</p>\n<p>上面我们用 <strong>get_object_vars</strong> 函数在外部实现了这个想法，放到内部试试看，当然我们要结合<strong>trait</strong>来实现：</p>\n<figure class=\"highlight php\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">trait</span> PrintPublic &#123;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">publics</span><span class=\"params\">()</span></span></span><br><span class=\"line\"><span class=\"function\">    </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> get_object_vars(<span class=\"keyword\">$this</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">User</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> $age = <span class=\"number\">18</span>;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> $name = <span class=\"string\">'xxx'</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">use</span> <span class=\"title\">PrintPublic</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">$user = <span class=\"keyword\">new</span> User();</span><br><span class=\"line\">$item = $user-&gt;publics();</span><br><span class=\"line\">print_r($item);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// Array</span></span><br><span class=\"line\"><span class=\"comment\">// (</span></span><br><span class=\"line\"><span class=\"comment\">//     [age] =&gt; 18</span></span><br><span class=\"line\"><span class=\"comment\">//     [name] =&gt; xxx</span></span><br><span class=\"line\"><span class=\"comment\">// )</span></span><br></pre></td></tr></table></figure>\n<p>我们发现，把所有的属性都取出来了，无论是公有的还是私有的，这不对。为什么会这样呢？不难想象，因为这个方法是放在类内部的，作用域在内部。而之前这个方法是放在类的外部，作用域是全局的。思路有了，我们只需要想办法让作用域在类的外部就可以了，我们想到了 <strong>call_user_func</strong> 这个方法。</p>\n<figure class=\"highlight php\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">trait</span> PrintPublic &#123;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">publics</span><span class=\"params\">()</span></span></span><br><span class=\"line\"><span class=\"function\">    </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> call_user_func(<span class=\"string\">'get_object_vars'</span>, <span class=\"keyword\">$this</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">User</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> $age = <span class=\"number\">18</span>;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> $name = <span class=\"string\">'xxx'</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">use</span> <span class=\"title\">PrintPublic</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">$user = <span class=\"keyword\">new</span> User();</span><br><span class=\"line\">$item = $user-&gt;publics();</span><br><span class=\"line\">print_r($item);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// version &lt; php 7</span></span><br><span class=\"line\"><span class=\"comment\">// Array</span></span><br><span class=\"line\"><span class=\"comment\">// (</span></span><br><span class=\"line\"><span class=\"comment\">//     [name] =&gt; xxx</span></span><br><span class=\"line\"><span class=\"comment\">// )</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// version &gt; php 7</span></span><br><span class=\"line\"><span class=\"comment\">// Array</span></span><br><span class=\"line\"><span class=\"comment\">// (</span></span><br><span class=\"line\"><span class=\"comment\">//     [name] =&gt; xxx</span></span><br><span class=\"line\"><span class=\"comment\">//     [age] =&gt; 18</span></span><br><span class=\"line\"><span class=\"comment\">// )</span></span><br></pre></td></tr></table></figure>\n<p>我们又发现了一个问题，这个方法在php7不能奏效，具体原因未知，有空探讨一下，既然这样也不是最好的办法，那就再换一个函数 <strong>create_function</strong>，试试看</p>\n<figure class=\"highlight php\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">trait</span> PrintPublic &#123;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">publics</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        $publicVars = create_function(<span class=\"string\">'$obj'</span>, <span class=\"string\">'return get_object_vars($obj);'</span>);</span><br><span class=\"line\">        <span class=\"keyword\">return</span> $publicVars(<span class=\"keyword\">$this</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">User</span></span></span><br><span class=\"line\"><span class=\"class\"></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> $name = <span class=\"string\">\"xxx\"</span>;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> $_age = <span class=\"number\">30</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">use</span> <span class=\"title\">PrintPublic</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">$User = <span class=\"keyword\">new</span> User();</span><br><span class=\"line\">$data = $User-&gt;publics();</span><br><span class=\"line\">print_r($data);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// Array</span></span><br><span class=\"line\"><span class=\"comment\">// (</span></span><br><span class=\"line\"><span class=\"comment\">//     [name] =&gt; xxx</span></span><br><span class=\"line\"><span class=\"comment\">// )</span></span><br></pre></td></tr></table></figure>\n<p>没问题了，问题解决 :)</p>\n","categories":["技术"],"tags":["PHP"]},{"title":"Redis：pubsub场景下的保活机制","url":"/2020/04/13/Redis%EF%BC%9Apubsub%E5%9C%BA%E6%99%AF%E4%B8%8B%E7%9A%84%E4%BF%9D%E6%B4%BB%E6%9C%BA%E5%88%B6/","content":"<p>上一篇[<a href=\"/2019/08/13/【Redis】brpop保活机制/\" title=\"Redis：排查 read error on connection 小记\">Redis：排查 read error on connection 小记</a>]，排查了redis pop list场景下断网引发<code>read error on connection</code>错误的情况，文末留下一个疑问，就是在pubsub场景下，该如何应对断网？（客户端和服务端不可达，触发保活机制）</p>\n<p><strong>在这篇文章，我们假设网络在某时会中断十几分钟</strong></p>\n<h2 id=\"问题复现\"><a href=\"#问题复现\" class=\"headerlink\" title=\"问题复现\"></a>问题复现</h2><h3 id=\"我的环境\"><a href=\"#我的环境\" class=\"headerlink\" title=\"我的环境\"></a>我的环境</h3><ul>\n<li>php=7.1.22</li>\n<li>phpredis=5.0.2</li>\n<li>redis-server=4.0.14</li>\n</ul>\n<p>可以通过服务端 <code>client kill ip:port</code>，客户端报异常<code>read error on connection</code>。</p>\n<p>这里抛出疑问：服务端主动kill的？何时会kill？</p>\n<h3 id=\"因为系统的tcp保活机制被kill？\"><a href=\"#因为系统的tcp保活机制被kill？\" class=\"headerlink\" title=\"因为系统的tcp保活机制被kill？\"></a>因为系统的tcp保活机制被kill？</h3><p>先看系统的tcp_keepalive配置</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">net.ipv4.tcp_keepalive_time = 30</span><br><span class=\"line\">net.ipv4.tcp_keepalive_probes = 9</span><br><span class=\"line\">net.ipv4.tcp_keepalive_intvl = 75</span><br></pre></td></tr></table></figure>\n<p>即30+9*75=705s=11min45s，如果网络在<code>12分钟内</code>保持断开状态，服务端就会kill掉客户端。<strong>可以解释的通，但是实测过程中发现，并没有使用系统的设置定时发ack</strong></p>\n<h3 id=\"因为redis服务端的保活机制被kill\"><a href=\"#因为redis服务端的保活机制被kill\" class=\"headerlink\" title=\"因为redis服务端的保活机制被kill?\"></a>因为redis服务端的保活机制被kill?</h3><p>查看服务端redis.conf配置，tcp_keepalive被设置为<code>600</code></p>\n<p>注释：</p>\n<blockquote>\n<p>TCP keepalive.<br>If non-zero, use SO_KEEPALIVE to send TCP ACKs to clients in absence<br>of communication. This is useful for two reasons:<br>1) Detect dead peers.<br>2) Take the connection alive from the point of view of network<br>  equipment in the middle.<br>On Linux, the specified value (in seconds) is the period used to send ACKs.<br>Note that to close the connection the double of the time is needed.<br>On other kernels the period depends on the kernel configuration.<br>A reasonable value for this option is 300 seconds, which is the new<br>Redis default starting with Redis 3.2.1.</p>\n</blockquote>\n<p>含义（<a href=\"https://redis.io/topics/clients\" target=\"_blank\" rel=\"noopener\">官网</a>）</p>\n<blockquote>\n<p>Recent versions of Redis (3.2 or greater) have TCP keepalive (SO_KEEPALIVE socket option) enabled by default and set to about 300 seconds. This option is useful in order to detect dead peers (clients that cannot be reached even if they look connected). Moreover, if there is network equipment between clients and servers that need to see some traffic in order to take the connection open, the option will prevent unexpected connection closed events.</p>\n</blockquote>\n<p>由上面的含义，可以提出三种可能的解释：</p>\n<ol>\n<li>这个参数覆盖系统的tcp_keepalive_time，并结合系统的tcp_keepalive_probes和tcp_keepalive_intvl，即600+9*75=1275s=21min15s（时间长了点）</li>\n<li>每隔600s，进行一次系统的保活机制（600s+11min45s=21min45s，时间长了点）</li>\n<li><strong>服务端在600s后会给客户端发ack。也就是10min。（可以解释，实测中发现是这种）</strong></li>\n</ol>\n<h2 id=\"客户端选项的OPT-KEEP-ALIVE到底是怎么使用的？\"><a href=\"#客户端选项的OPT-KEEP-ALIVE到底是怎么使用的？\" class=\"headerlink\" title=\"客户端选项的OPT_KEEP_ALIVE到底是怎么使用的？\"></a>客户端选项的<code>OPT_KEEP_ALIVE</code>到底是怎么使用的？</h2><p>上篇文章我们已经发现了，它是一个开关，但是有两个疑问：</p>\n<ol>\n<li>它用来启动服务端对客户端的保活？</li>\n<li>它用来启动客户端对服务端的保活？(实测发现，是这个。<strong>使用系统的tcp_keepalive配置，与redis.conf无关</strong>)</li>\n</ol>\n<p>实测发现，如果在12分钟内网络保持断开状态（系统的tcp_keepalive配置为11min45s），客户端subscribe则会抛出<code>read error on connection</code>异常。这很好，我们可以捕获这个异常，重启客户端。</p>\n<p>但是，由于不清楚网络何时会恢复，如果断开时间较短，可以借助<code>supervisor</code>等管理工具，在程序异常退出后不断拉启即可。如果断开时间较长，或许需要像上一篇文章[<a href=\"/2019/08/13/【Redis】brpop保活机制/\" title=\"Redis：排查 read error on connection 小记\">Redis：排查 read error on connection 小记</a>]那样，做一个<code>忙连接</code>程序，不断去尝试重连服务端。</p>\n<h3 id=\"pubsub场景下的忙连接程序\"><a href=\"#pubsub场景下的忙连接程序\" class=\"headerlink\" title=\"pubsub场景下的忙连接程序\"></a>pubsub场景下的忙连接程序</h3><figure class=\"highlight php\"><table><tr><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">main</span><span class=\"params\">()</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    $redis = <span class=\"keyword\">new</span> Redis();</span><br><span class=\"line\">    $redis-&gt;connect($host, $port);</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">while</span> (<span class=\"keyword\">true</span>) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">            $redis-&gt;subscribe($chans, [<span class=\"keyword\">$this</span>, <span class=\"string\">'process'</span>]);</span><br><span class=\"line\">        &#125; <span class=\"keyword\">catch</span> (<span class=\"keyword\">Exception</span> $exception) &#123;</span><br><span class=\"line\">            <span class=\"comment\">// 忙连接等待网络恢复</span></span><br><span class=\"line\">            $redis = <span class=\"keyword\">$this</span>-&gt;reconnect();</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">reconnect</span><span class=\"params\">()</span> </span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    $redis = <span class=\"keyword\">null</span>;</span><br><span class=\"line\">    $isLostConnect = <span class=\"keyword\">true</span>;</span><br><span class=\"line\">    <span class=\"keyword\">while</span> ($isLostConnect) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">            $redis = <span class=\"keyword\">new</span> Redis();</span><br><span class=\"line\">            $redis-&gt;connect($host, $port);</span><br><span class=\"line\"></span><br><span class=\"line\">            <span class=\"comment\">// 重连成功</span></span><br><span class=\"line\">            <span class=\"keyword\">if</span> ($redis-&gt;ping()) &#123;</span><br><span class=\"line\">                $isLostConnect = <span class=\"keyword\">false</span>;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125; <span class=\"keyword\">catch</span> (\\<span class=\"keyword\">Exception</span> $e) &#123;</span><br><span class=\"line\">            <span class=\"comment\">// 阻塞等待几秒钟，再次尝试重连</span></span><br><span class=\"line\">            sleep(<span class=\"number\">10</span>);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">return</span> $redis;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">main();</span><br></pre></td></tr></table></figure>\n<h2 id=\"phpredis保活机制原理\"><a href=\"#phpredis保活机制原理\" class=\"headerlink\" title=\"phpredis保活机制原理\"></a>phpredis保活机制原理</h2><p>phpredis源码：</p>\n<figure class=\"highlight c\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/* Don't set TCP_KEEPALIVE if we're using a unix socket. */</span></span><br><span class=\"line\"><span class=\"keyword\">if</span> (ZSTR_VAL(redis_sock-&gt;host)[<span class=\"number\">0</span>] == <span class=\"string\">'/'</span> &amp;&amp; redis_sock-&gt;port &lt; <span class=\"number\">1</span>) &#123;</span><br><span class=\"line\">    RETURN_FALSE;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">tcp_keepalive = zval_get_long(val) &gt; <span class=\"number\">0</span> ? <span class=\"number\">1</span> : <span class=\"number\">0</span>;</span><br><span class=\"line\"><span class=\"keyword\">if</span> (redis_sock-&gt;tcp_keepalive == tcp_keepalive) &#123;</span><br><span class=\"line\">    RETURN_TRUE;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">if</span> (redis_sock-&gt;stream) &#123;</span><br><span class=\"line\">    <span class=\"comment\">/* set TCP_KEEPALIVE */</span></span><br><span class=\"line\">    sock = (<span class=\"keyword\">php_netstream_data_t</span>*)redis_sock-&gt;stream-&gt;abstract;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (setsockopt(sock-&gt;socket, SOL_SOCKET, SO_KEEPALIVE, (<span class=\"keyword\">char</span>*)&amp;tcp_keepalive,</span><br><span class=\"line\">                <span class=\"keyword\">sizeof</span>(tcp_keepalive)) == <span class=\"number\">-1</span>) &#123;</span><br><span class=\"line\">        RETURN_FALSE;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    redis_sock-&gt;tcp_keepalive = tcp_keepalive;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>可以发现，phpredis并没有提供<code>SOL_TCP</code>字段选项的配置，即</p>\n<ol>\n<li>TCP_KEEPIDLE（等同于tcp_keepalive_time）</li>\n<li>TCP_KEEPINTVL（等同于tcp_keepalive_intvl）</li>\n<li>TCP_KEEPCNT（等同于tcp_keepalive_probes）</li>\n</ol>\n<p>所以，<strong>phpredis默认使用系统内核提供的tcp_keepalive配置</strong>，这意味着，如果需要修改保活时间，需要更改系统配置…</p>\n<h2 id=\"小结\"><a href=\"#小结\" class=\"headerlink\" title=\"小结\"></a>小结</h2><ol>\n<li>服务端保活，通过设置redis.conf里面的tcp-keepalive配置，即可定时检测连接是否有效（新版本默认为300s），如果不可达，则移除客户端连接（kill client），移除连接的时候，客户端则保持”Established”(<code>半连接状态</code>)。对pubsub程序来说，客户端无法接收到服务端的消息。</li>\n<li>客户端保活，通过setOption配置<code>OPT_KEEP_ALIVE</code>开启，使用系统tcp_keepalive配置，定时发送ack包验证连接有效，如果不可达，则同样抛出<code>read error on connection</code>异常，程序需要捕获异常并重连服务端，连接成功后，打开subscribe。</li>\n<li>phpredis的客户端保活不支持自定义<code>SOL_TCP</code>，使用系统内核的网络配置。</li>\n</ol>\n<h2 id=\"参考\"><a href=\"#参考\" class=\"headerlink\" title=\"参考\"></a>参考</h2><p><a href=\"https://zzyongx.github.io/blogs/tcp-keepalive-howto.html\" target=\"_blank\" rel=\"noopener\">TCP Keepalive HOWTO</a></p>\n","categories":["技术"],"tags":["PHP","Redis","TCP/IP"]},{"title":"Swoole加速结巴分词","url":"/2019/08/14/Swoole%E5%8A%A0%E9%80%9F%E7%BB%93%E5%B7%B4%E5%88%86%E8%AF%8D/","content":"<h2 id=\"中文分词\"><a href=\"#中文分词\" class=\"headerlink\" title=\"中文分词\"></a>中文分词</h2><p>对于英文句子来说，可以通过<code>空格</code>来切分单词，如</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">// 今天天气不错</span><br><span class=\"line\">the weather is nice today</span><br></pre></td></tr></table></figure>\n<p>可以很简单的把该句子中的单词区分出来</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">the/weather/is/nice/today</span><br></pre></td></tr></table></figure>\n<p>在中文里面，就没有那么方便的区分方法了。当然，如果你习惯这样说话：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">今天 天气 不错</span><br></pre></td></tr></table></figure>\n<p>大家也不会打你，只会觉得你像个<code>“结巴”</code>（点题了！）</p>\n<h3 id=\"为什么需要分词？\"><a href=\"#为什么需要分词？\" class=\"headerlink\" title=\"为什么需要分词？\"></a>为什么需要分词？</h3><p>在中文里面的<code>字</code>和<code>英文单词</code>是两个不同的东西。在读书的时候，最痛苦的一件事就是学习文言文，我想了一下，有大于等于三个原因：</p>\n<ol>\n<li>不知道在哪里断句</li>\n<li>字或词的含义很多</li>\n<li>这个字是通假字（它不是这个它，它是那个它），或者说纯粹就是写错了，但是细想一下也能读的通。</li>\n</ol>\n<p>我们常说中文博大精深，历史原因就不细究了，简单来说就是，我们的祖先在中文上的造诣非常高，好几层楼那么高，研究非常透彻，一句话能说出几个意思。我们自小在中文环境下成长，经过千锤百炼，读写是没问题的，但是计算机要怎么理解一句话呢？先从分词开始。</p>\n<p>计算机学习分词的过程，和人类是很像的（或许这是局限性），目前有几种：</p>\n<ol>\n<li>基于字符串匹配。按一定的策略在一个已分好词的大词典中搜寻，若找到则视为一个词。</li>\n<li>统计。大量已经分词的文本，利用统计机器学习模型学习词语切分的规律（训练），从而实现对未知文本的切分。</li>\n<li>组合。结合1、2点，如<code>结巴分词</code>。</li>\n</ol>\n<p>我们学习中文的时候，也有这样的过程，</p>\n<ol>\n<li>积累词语（建立词典）</li>\n<li>训练不同词语在不同句子中的含义的概率（权重），选择具有最大概率（权重）的含义的词语（动态规划，寻找切分组合）</li>\n</ol>\n<h2 id=\"结巴分词是什么？\"><a href=\"#结巴分词是什么？\" class=\"headerlink\" title=\"结巴分词是什么？\"></a>结巴分词是什么？</h2><p><code>结巴分词</code>是国内程序员用<code>python</code>开发的一个<code>中文</code>分词模块, 源码被托管在<a href=\"https://github.com/fxsjy/jieba\" target=\"_blank\" rel=\"noopener\">Github</a></p>\n<p>为了方便说明，下面截取了部分文档和例子。</p>\n<h3 id=\"特点\"><a href=\"#特点\" class=\"headerlink\" title=\"特点\"></a>特点</h3><ul>\n<li>精确模式，试图将句子最精确地切开，适合文本分析</li>\n<li>全模式，把句子中所有可以成词的词语都扫描出来, 速度非常快，但是不能解决歧义</li>\n<li>搜索引擎模式，在精确模式的基础上，对长词再次切分，提高召回率，适合用于搜索引擎分词</li>\n<li>支持繁体分词</li>\n<li>支持自定义词典</li>\n<li>MIT 授权协议</li>\n</ul>\n<h3 id=\"例子\"><a href=\"#例子\" class=\"headerlink\" title=\"例子\"></a>例子</h3><figure class=\"highlight python\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># encoding=utf-8</span></span><br><span class=\"line\"><span class=\"keyword\">import</span> jieba</span><br><span class=\"line\"></span><br><span class=\"line\">seg_list = jieba.cut(<span class=\"string\">\"我来到北京清华大学\"</span>, cut_all=<span class=\"literal\">True</span>)</span><br><span class=\"line\">print(<span class=\"string\">\"Full Mode: \"</span> + <span class=\"string\">\"/ \"</span>.join(seg_list))  <span class=\"comment\"># 全模式</span></span><br><span class=\"line\"></span><br><span class=\"line\">seg_list = jieba.cut(<span class=\"string\">\"我来到北京清华大学\"</span>, cut_all=<span class=\"literal\">False</span>)</span><br><span class=\"line\">print(<span class=\"string\">\"Default Mode: \"</span> + <span class=\"string\">\"/ \"</span>.join(seg_list))  <span class=\"comment\"># 精确模式</span></span><br><span class=\"line\"></span><br><span class=\"line\">seg_list = jieba.cut(<span class=\"string\">\"他来到了网易杭研大厦\"</span>)  <span class=\"comment\"># 默认是精确模式</span></span><br><span class=\"line\">print(<span class=\"string\">\", \"</span>.join(seg_list))</span><br><span class=\"line\"></span><br><span class=\"line\">seg_list = jieba.cut_for_search(<span class=\"string\">\"小明硕士毕业于中国科学院计算所，后在日本京都大学深造\"</span>)  <span class=\"comment\"># 搜索引擎模式</span></span><br><span class=\"line\">print(<span class=\"string\">\", \"</span>.join(seg_list))</span><br></pre></td></tr></table></figure>\n<p>输出：</p>\n<figure class=\"highlight vim\"><table><tr><td class=\"code\"><pre><span class=\"line\">【全模式】: 我/ 来到/ 北京/ 清华/ 清华大学/ 华大/ 大学</span><br><span class=\"line\"></span><br><span class=\"line\">【精确模式】: 我/ 来到/ 北京/ 清华大学</span><br><span class=\"line\"></span><br><span class=\"line\">【新词识别】：他, 来到, 了, 网易, 杭研, 大厦    (此处，“杭研”并没有在词典中，但是也被Viterbi算法识别出来了)</span><br><span class=\"line\"></span><br><span class=\"line\">【搜索引擎模式】： 小明, 硕士, 毕业, 于, 中国, 科学, 学院, 科学院, 中国科学院, 计算, 计算所, 后, 在, 日本, 京都, 大学, 日本京都大学, 深造</span><br></pre></td></tr></table></figure>\n<h3 id=\"算法实现\"><a href=\"#算法实现\" class=\"headerlink\" title=\"算法实现\"></a>算法实现</h3><ol>\n<li>基于前缀词典实现高效的词图扫描，生成句子中汉字所有可能成词情况所构成的有向无环图 (DAG)</li>\n<li>采用了动态规划查找最大概率路径, 找出基于词频的最大切分组合</li>\n<li>对于未登录词，采用了基于汉字成词能力的 <code>HMM</code> 模型，使用了 <code>Viterbi</code> 算法</li>\n</ol>\n<p>针对结巴分词的原理，网上的文章写的非常详细了，这里就不再赘述了。有兴趣的读者可以看看</p>\n<ol>\n<li><a href=\"https://blog.csdn.net/John_xyz/article/details/54645527\" target=\"_blank\" rel=\"noopener\">中文分词的基本原理以及jieba分词的用法</a></li>\n<li><a href=\"https://blog.csdn.net/u014365862/article/details/54891582\" target=\"_blank\" rel=\"noopener\">一个隐马尔科夫模型的应用实例：中文分词</a></li>\n</ol>\n<h2 id=\"PHP结巴分词库（扩展）\"><a href=\"#PHP结巴分词库（扩展）\" class=\"headerlink\" title=\"PHP结巴分词库（扩展）\"></a>PHP结巴分词库（扩展）</h2><p>有国人实现了PHP版本：</p>\n<ol>\n<li>PHP扩展：<a href=\"https://github.com/jonnywang/phpjieba\" target=\"_blank\" rel=\"noopener\">jonnywang/phpjieba</a></li>\n<li>PHP类库：<a href=\"https://github.com/fukuball/jieba-php\" target=\"_blank\" rel=\"noopener\">fukuball/jieba-php</a></li>\n</ol>\n<p>尤其是这个扩展<code>jonnywang/phpjieba</code>实现，<strong>支持PHP7</strong>，果断安装了。</p>\n<h2 id=\"使用方法\"><a href=\"#使用方法\" class=\"headerlink\" title=\"使用方法\"></a>使用方法</h2><h3 id=\"PHP-FPM模式\"><a href=\"#PHP-FPM模式\" class=\"headerlink\" title=\"PHP-FPM模式\"></a>PHP-FPM模式</h3><p>PHP的LNMP架构在Web开发领域常年占据一定的市场，那么是否可以使用结巴分词呢？当然可以，不过，我们知道在FPM模式下，PHP的生命周期非常短，前面我们了解到，结巴分词使用<code>前缀字典树</code>建立词库，该操作需要一定的时间和耗费内存（默认词典dict.txt占用将近1G）。那么，在常规FPM模式下，假设开启8个worker，那就需要大约8G内存分配。而且，在应对大量请求时，频繁的申请/销毁操作并不合理。所以，在FPM模式下，使用结巴分词不合适。</p>\n<h3 id=\"CLI模式\"><a href=\"#CLI模式\" class=\"headerlink\" title=\"CLI模式\"></a>CLI模式</h3><p>我们想到，和应用强耦合在一起不是个好办法，把结巴分词独立出来作为一个公共服务，通过不同的接口（HTTP，unixsocket）给其他应用提供服务是个不错的方案。</p>\n<p>在考察该方案前，我们需要解决几个问题：</p>\n<ol>\n<li>进程拉起才初始化词典</li>\n<li>为其他应用提供分词服务，需要应对高并发</li>\n<li>更新用户自定义词库</li>\n</ol>\n<p>我们第一时间想到了<a href=\"https://www.swoole.com/\" target=\"_blank\" rel=\"noopener\">Swoole</a>，有下面的优势：</p>\n<ol>\n<li>假设提供HTTP服务，可以在Worker进程启动时（onWorkerStart）初始化词典，当服务启动后，字典树就完全载入到内存中了，由于常驻内存，后面我们只需要处理请求（onRequest）即可。</li>\n<li>使用HTTP服务，可以为其他应用提供服务，而不需要每一个需要分词服务的应用都写一个类似的分词库。</li>\n<li>用户自定义词库需要在初始化词典阶段载入，因此，如果需要添加/删除自定义词库，需要做下面几步：<ul>\n<li>Process模式<ol>\n<li>服务启动时，记录Master进程ID到本地文件</li>\n<li>提供给外部应用增加/删除词的接口，写入用户自定义词库（user_dict.txt）文件</li>\n<li>Worker进程给Master进程发<code>SIGUSR1</code>信号，进行<strong>柔性重启</strong>（重启Worker进程）</li>\n</ol>\n</li>\n<li>Base模式<ul>\n<li>只有一个Worker进程，默认不开启Manager进程，所以需要自己终止掉，由外部来重启，如Supervisor</li>\n<li>大于等于两个Worker进程<ol>\n<li>服务启动时，记录Manager进程ID到本地文件</li>\n<li>同Process模式第2点</li>\n<li>同Process模式第3点</li>\n</ol>\n</li>\n</ul>\n</li>\n</ul>\n</li>\n</ol>\n<p>Base模式比Process模式少了两次ipc的过程，性能会更好些。</p>\n<h2 id=\"性能测试\"><a href=\"#性能测试\" class=\"headerlink\" title=\"性能测试\"></a>性能测试</h2><ul>\n<li>4c</li>\n<li>2g</li>\n</ul>\n<h3 id=\"Base-模式、1-Worker\"><a href=\"#Base-模式、1-Worker\" class=\"headerlink\" title=\"Base 模式、1 Worker\"></a>Base 模式、1 Worker</h3><ul>\n<li>请求：10000</li>\n<li>并发：1000</li>\n<li>api：a=2&amp;s=我爱中华民族、广东、美食</li>\n</ul>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">Benchmarking 127.0.0.1 (be patient)</span><br><span class=\"line\">Completed 1000 requests</span><br><span class=\"line\">Completed 2000 requests</span><br><span class=\"line\">Completed 3000 requests</span><br><span class=\"line\">Completed 4000 requests</span><br><span class=\"line\">Completed 5000 requests</span><br><span class=\"line\">Completed 6000 requests</span><br><span class=\"line\">Completed 7000 requests</span><br><span class=\"line\">Completed 8000 requests</span><br><span class=\"line\">Completed 9000 requests</span><br><span class=\"line\">Completed 10000 requests</span><br><span class=\"line\">Finished 10000 requests</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">Server Software:        swoole-http-server</span><br><span class=\"line\">Server Hostname:        127.0.0.1</span><br><span class=\"line\">Server Port:            9501</span><br><span class=\"line\"></span><br><span class=\"line\">Document Path:          /</span><br><span class=\"line\">Document Length:        204 bytes</span><br><span class=\"line\"></span><br><span class=\"line\">Concurrency Level:      1000</span><br><span class=\"line\">Time taken <span class=\"keyword\">for</span> tests:   8.499 seconds</span><br><span class=\"line\">Complete requests:      10000</span><br><span class=\"line\">Failed requests:        0</span><br><span class=\"line\">Keep-Alive requests:    10000</span><br><span class=\"line\">Total transferred:      3580000 bytes</span><br><span class=\"line\">Total body sent:        2180000</span><br><span class=\"line\">HTML transferred:       2040000 bytes</span><br><span class=\"line\">Requests per second:    1176.63 [<span class=\"comment\">#/sec] (mean)</span></span><br><span class=\"line\">Time per request:       849.883 [ms] (mean)</span><br><span class=\"line\">Time per request:       0.850 [ms] (mean, across all concurrent requests)</span><br><span class=\"line\">Transfer rate:          411.36 [Kbytes/sec] received</span><br><span class=\"line\">                        250.49 kb/s sent</span><br><span class=\"line\">                        661.86 kb/s total</span><br><span class=\"line\"></span><br><span class=\"line\">Connection Times (ms)</span><br><span class=\"line\">              min  mean[+/-sd] median   max</span><br><span class=\"line\">Connect:        0    5  14.1      0      69</span><br><span class=\"line\">Processing:    29  800 181.2    840    1260</span><br><span class=\"line\">Waiting:        4  800 181.2    840    1260</span><br><span class=\"line\">Total:         30  805 174.0    840    1275</span><br><span class=\"line\"></span><br><span class=\"line\">Percentage of the requests served within a certain time (ms)</span><br><span class=\"line\">  50%    840</span><br><span class=\"line\">  66%    855</span><br><span class=\"line\">  75%    866</span><br><span class=\"line\">  80%    870</span><br><span class=\"line\">  90%    894</span><br><span class=\"line\">  95%    912</span><br><span class=\"line\">  98%   1139</span><br><span class=\"line\">  99%   1214</span><br><span class=\"line\"> 100%   1275 (longest request)</span><br></pre></td></tr></table></figure>\n<h3 id=\"Base-模式、2-Worker\"><a href=\"#Base-模式、2-Worker\" class=\"headerlink\" title=\"Base 模式、2 Worker\"></a>Base 模式、2 Worker</h3><figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">Benchmarking 127.0.0.1 (be patient)</span><br><span class=\"line\">Completed 1000 requests</span><br><span class=\"line\">Completed 2000 requests</span><br><span class=\"line\">Completed 3000 requests</span><br><span class=\"line\">Completed 4000 requests</span><br><span class=\"line\">Completed 5000 requests</span><br><span class=\"line\">Completed 6000 requests</span><br><span class=\"line\">Completed 7000 requests</span><br><span class=\"line\">Completed 8000 requests</span><br><span class=\"line\">Completed 9000 requests</span><br><span class=\"line\">Completed 10000 requests</span><br><span class=\"line\">Finished 10000 requests</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">Server Software:        swoole-http-server</span><br><span class=\"line\">Server Hostname:        127.0.0.1</span><br><span class=\"line\">Server Port:            9501</span><br><span class=\"line\"></span><br><span class=\"line\">Document Path:          /</span><br><span class=\"line\">Document Length:        204 bytes</span><br><span class=\"line\"></span><br><span class=\"line\">Concurrency Level:      1000</span><br><span class=\"line\">Time taken <span class=\"keyword\">for</span> tests:   4.746 seconds</span><br><span class=\"line\">Complete requests:      10000</span><br><span class=\"line\">Failed requests:        0</span><br><span class=\"line\">Keep-Alive requests:    10000</span><br><span class=\"line\">Total transferred:      3580000 bytes</span><br><span class=\"line\">Total body sent:        2180000</span><br><span class=\"line\">HTML transferred:       2040000 bytes</span><br><span class=\"line\">Requests per second:    2106.85 [<span class=\"comment\">#/sec] (mean)</span></span><br><span class=\"line\">Time per request:       474.643 [ms] (mean)</span><br><span class=\"line\">Time per request:       0.475 [ms] (mean, across all concurrent requests)</span><br><span class=\"line\">Transfer rate:          736.57 [Kbytes/sec] received</span><br><span class=\"line\">                        448.53 kb/s sent</span><br><span class=\"line\">                        1185.10 kb/s total</span><br><span class=\"line\"></span><br><span class=\"line\">Connection Times (ms)</span><br><span class=\"line\">              min  mean[+/-sd] median   max</span><br><span class=\"line\">Connect:        0    9  28.0      0     148</span><br><span class=\"line\">Processing:     0  415 407.8    421    1270</span><br><span class=\"line\">Waiting:        0  415 407.8    421    1270</span><br><span class=\"line\">Total:          0  423 409.2    443    1282</span><br><span class=\"line\"></span><br><span class=\"line\">Percentage of the requests served within a certain time (ms)</span><br><span class=\"line\">  50%    443</span><br><span class=\"line\">  66%    822</span><br><span class=\"line\">  75%    827</span><br><span class=\"line\">  80%    830</span><br><span class=\"line\">  90%    838</span><br><span class=\"line\">  95%    850</span><br><span class=\"line\">  98%   1157</span><br><span class=\"line\">  99%   1225</span><br><span class=\"line\"> 100%   1282 (longest request)</span><br></pre></td></tr></table></figure>","categories":["技术"],"tags":["PHP","Swoole","结巴分词"]},{"title":"Swoole协程如何处理CPU密集型应用","url":"/2019/09/26/Swoole%E5%8D%8F%E7%A8%8B%E5%A6%82%E4%BD%95%E5%A4%84%E7%90%86CPU%E5%AF%86%E9%9B%86%E5%9E%8B%E5%BA%94%E7%94%A8/","content":"<h2 id=\"前言\"><a href=\"#前言\" class=\"headerlink\" title=\"前言\"></a>前言</h2><p>存档，待完善..</p>\n<h2 id=\"正文\"><a href=\"#正文\" class=\"headerlink\" title=\"正文\"></a>正文</h2><p>想要做抢占式调度，对于PHP来说，有两个途径</p>\n<ol>\n<li>当前执行协程在一定条件下主动让出</li>\n<li>额外开线程，监控当前执行协程时间，超过设定值则让出当前执行协程</li>\n</ol>\n<h3 id=\"当前执行协程在一定条件下主动让出\"><a href=\"#当前执行协程在一定条件下主动让出\" class=\"headerlink\" title=\"当前执行协程在一定条件下主动让出\"></a>当前执行协程在一定条件下主动让出</h3><p>Swoole版本：4.3.x</p>\n<p>PHP是单线程运行的，可以参考这篇文章<a href=\"https://wiki.swoole.com/wiki/page/p-tick_scheduler.html\" target=\"_blank\" rel=\"noopener\">协程 CPU 密集场景调度实现</a>，在脚本开始处注入逻辑<code>declare(tick=N)</code>，配合Swoole协程。逻辑是每次触发<code>tick handler</code>的时候，判断当前协程相对最近一次调度时间是否大于<code>协程最大执行时间(max_exec_msec)</code>，这样就可以将当前超出执行时间后的协程主动让出。</p>\n<h3 id=\"额外开线程，负责检查当前执行协程的执行时间\"><a href=\"#额外开线程，负责检查当前执行协程的执行时间\" class=\"headerlink\" title=\"额外开线程，负责检查当前执行协程的执行时间\"></a>额外开线程，负责检查当前执行协程的执行时间</h3><p>Swoole版本：4.4.x</p>\n<p>参考这篇文章<a href=\"https://segmentfault.com/a/1190000019253487\" target=\"_blank\" rel=\"noopener\">Swoole 4.4 协程抢占式调度器详解</a>，利用<code>PHP-7.1.0</code>引入的<code>VM interrupt</code>机制，默认每隔<code>5ms</code>检查一下当前协程是否达到最大执行时间，默认为10ms，如果超过，则让出当前协程，达到被其他协程抢占的目的。</p>\n","categories":["技术"],"tags":["PHP","Swoole"]},{"title":"ngx_http_empty_gif_module在日志统计中的应用","url":"/2018/04/16/ngx_http_empty_gif_module%E5%9C%A8%E6%97%A5%E5%BF%97%E7%BB%9F%E8%AE%A1%E4%B8%AD%E7%9A%84%E5%BA%94%E7%94%A8/","content":"<h2 id=\"日志统计分析架构\"><a href=\"#日志统计分析架构\" class=\"headerlink\" title=\"日志统计分析架构\"></a>日志统计分析架构</h2><p>在日志统计分析中，通常包括以下的模块</p>\n<ul>\n<li>前端日志上报（js上报url、user_agent等等）</li>\n<li>打点服务器（nginx）</li>\n<li>统计日志（access_log）</li>\n<li>分析日志（后端程序）</li>\n<li>保存分析结果（db）</li>\n</ul>\n<p>我们通常把日志上报和日志分析解耦，利用nginx的大并发承载力，接收前端上报的日志。在这里，我们不做协议转发到后端程序（PHP或者其他cgi程序）处理日志统计，而是利用nginx的access_log，约定好日志保存格式（format），由nginx帮助我们做日志统计。</p>\n<p>日志上报的并发量有可能非常巨大，举个例子，如果由PHP来处理，那么每一次日志上报都需要经过nginx的转发、PHP生命周期的五个阶段（MINIT、RINIT、代码处理、RSHUTDOWN、MSHUTDOWN），即使做了opcache，将预编译的脚本存储在共享内存中，也是需要不菲的消耗。1毫秒的处理时间不算什么，但是 1 X 100000n 那就需要引起关注了。</p>\n<p>我们还需要一个分析日志的守护进程，这时候可以利用php的cli或者别的语言实现，将分析结果（pv、uv等等）保存到数据库，然后提供一个web界面来展示结果。</p>\n<h2 id=\"ngx-http-empty-gif-module\"><a href=\"#ngx-http-empty-gif-module\" class=\"headerlink\" title=\"ngx_http_empty_gif_module\"></a>ngx_http_empty_gif_module</h2><p>http程序是请求-响应模式，日志上报完成后，后端需要返回一个值，告诉前端结果。一般来说，我们会使用json，上报一个日志，返回一个json串，比如</p>\n<figure class=\"highlight\"><table><tr><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">\tcode: 0,</span><br><span class=\"line\">\tmsg: 'sucess'</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>正如前文所说，这是有可能是一个大并发的程序，如果每次都返回一个json串，是不是有点太大了，为什么这里会说“大”，接着看，我尝试返回一个整型数字1,</p>\n<figure class=\"highlight php\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">echo</span> <span class=\"number\">1</span>;</span><br></pre></td></tr></table></figure>\n<p>在浏览器中查看返回数据的大小为 268B ，一个数字的占用就有268B，如果包含状态码，状态值，岂不是更大。</p>\n<p>所以我们看看nginx有没有更好的解决方式，那就是ngx_http_empty_gif_module。</p>\n<p>这是一个由nginx生成的 1x1 像素的图片，通过查看源码可以知道，这是nginx自己拼接而成的完全内存级别的图片</p>\n<p>/path-to-nginx/src/http/modules/ngx_http_empty_gif_module.c</p>\n<figure class=\"highlight c\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">static</span> u_char  ngx_empty_gif[] = &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"string\">'G'</span>, <span class=\"string\">'I'</span>, <span class=\"string\">'F'</span>, <span class=\"string\">'8'</span>, <span class=\"string\">'9'</span>, <span class=\"string\">'a'</span>,  <span class=\"comment\">/* header                                 */</span></span><br><span class=\"line\"></span><br><span class=\"line\">                                   <span class=\"comment\">/* logical screen descriptor              */</span></span><br><span class=\"line\">    <span class=\"number\">0x01</span>, <span class=\"number\">0x00</span>,                    <span class=\"comment\">/* logical screen width                   */</span></span><br><span class=\"line\">    <span class=\"number\">0x01</span>, <span class=\"number\">0x00</span>,                    <span class=\"comment\">/* logical screen height                  */</span></span><br><span class=\"line\">    <span class=\"number\">0x80</span>,                          <span class=\"comment\">/* global 1-bit color table               */</span></span><br><span class=\"line\">    <span class=\"number\">0x01</span>,                          <span class=\"comment\">/* background color #1                    */</span></span><br><span class=\"line\">    <span class=\"number\">0x00</span>,                          <span class=\"comment\">/* no aspect ratio                        */</span></span><br><span class=\"line\"></span><br><span class=\"line\">                                   <span class=\"comment\">/* global color table                     */</span></span><br><span class=\"line\">    <span class=\"number\">0x00</span>, <span class=\"number\">0x00</span>, <span class=\"number\">0x00</span>,              <span class=\"comment\">/* #0: black                              */</span></span><br><span class=\"line\">    <span class=\"number\">0xff</span>, <span class=\"number\">0xff</span>, <span class=\"number\">0xff</span>,              <span class=\"comment\">/* #1: white                              */</span></span><br><span class=\"line\"></span><br><span class=\"line\">                                   <span class=\"comment\">/* graphic control extension              */</span></span><br><span class=\"line\">    <span class=\"number\">0x21</span>,                          <span class=\"comment\">/* extension introducer                   */</span></span><br><span class=\"line\">    <span class=\"number\">0xf9</span>,                          <span class=\"comment\">/* graphic control label                  */</span></span><br><span class=\"line\">    <span class=\"number\">0x04</span>,                          <span class=\"comment\">/* block size                             */</span></span><br><span class=\"line\">    <span class=\"number\">0x01</span>,                          <span class=\"comment\">/* transparent color is given,            */</span></span><br><span class=\"line\">                                   <span class=\"comment\">/*     no disposal specified,             */</span></span><br><span class=\"line\">                                   <span class=\"comment\">/*     user input is not expected         */</span></span><br><span class=\"line\">    <span class=\"number\">0x00</span>, <span class=\"number\">0x00</span>,                    <span class=\"comment\">/* delay time                             */</span></span><br><span class=\"line\">    <span class=\"number\">0x01</span>,                          <span class=\"comment\">/* transparent color #1                   */</span></span><br><span class=\"line\">    <span class=\"number\">0x00</span>,                          <span class=\"comment\">/* block terminator                       */</span></span><br><span class=\"line\"></span><br><span class=\"line\">                                   <span class=\"comment\">/* image descriptor                       */</span></span><br><span class=\"line\">    <span class=\"number\">0x2c</span>,                          <span class=\"comment\">/* image separator                        */</span></span><br><span class=\"line\">    <span class=\"number\">0x00</span>, <span class=\"number\">0x00</span>,                    <span class=\"comment\">/* image left position                    */</span></span><br><span class=\"line\">    <span class=\"number\">0x00</span>, <span class=\"number\">0x00</span>,                    <span class=\"comment\">/* image top position                     */</span></span><br><span class=\"line\">    <span class=\"number\">0x01</span>, <span class=\"number\">0x00</span>,                    <span class=\"comment\">/* image width                            */</span></span><br><span class=\"line\">    <span class=\"number\">0x01</span>, <span class=\"number\">0x00</span>,                    <span class=\"comment\">/* image height                           */</span></span><br><span class=\"line\">    <span class=\"number\">0x00</span>,                          <span class=\"comment\">/* no local color table, no interlaced    */</span></span><br><span class=\"line\"></span><br><span class=\"line\">                                   <span class=\"comment\">/* table based image data                 */</span></span><br><span class=\"line\">    <span class=\"number\">0x02</span>,                          <span class=\"comment\">/* LZW minimum code size,                 */</span></span><br><span class=\"line\">                                   <span class=\"comment\">/*     must be at least 2-bit             */</span></span><br><span class=\"line\">    <span class=\"number\">0x02</span>,                          <span class=\"comment\">/* block size                             */</span></span><br><span class=\"line\">    <span class=\"number\">0x4c</span>, <span class=\"number\">0x01</span>,                    <span class=\"comment\">/* compressed bytes 01_001_100, 0000000_1 */</span></span><br><span class=\"line\">                                   <span class=\"comment\">/* 100: clear code                        */</span></span><br><span class=\"line\">                                   <span class=\"comment\">/* 001: 1                                 */</span></span><br><span class=\"line\">                                   <span class=\"comment\">/* 101: end of information code           */</span></span><br><span class=\"line\">    <span class=\"number\">0x00</span>,                          <span class=\"comment\">/* block terminator                       */</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"number\">0x3B</span>                           <span class=\"comment\">/* trailer                                */</span></span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n<p>继续刚刚的问题，前端上报日志后，后端怎么返回这个图片呢？返回这个图片有什么好处？</p>\n<p>只需要在nginx中配置</p>\n<figure class=\"highlight vim\"><table><tr><td class=\"code\"><pre><span class=\"line\">server</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">        listen 80;</span><br><span class=\"line\">        server_name log.com;</span><br><span class=\"line\"></span><br><span class=\"line\">        location = /<span class=\"keyword\">dig</span> &#123;</span><br><span class=\"line\">           empty_gif;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>这样一来，前端只需要把url、ua等信息提交到 log.com/dig 即可，后端就会返回一个1pixel的图片。</p>\n<p>通过查看浏览器信息可以发现，返回大小为 229B，是不是比返回json更快，占用更小呢 :)</p>\n","categories":["技术"],"tags":["Nginx"]},{"title":"odbc connect return false","url":"/2019/09/26/odbc%20connect%20return%20false/","content":"<h2 id=\"前言\"><a href=\"#前言\" class=\"headerlink\" title=\"前言\"></a>前言</h2><p>odbc在connect的时候会返回<code>资源句柄</code>，但是如果返回<code>false</code>就蒙蔽了。如果有记录php错误日志，会得到下面的内容</p>\n<figure class=\"highlight vim\"><table><tr><td class=\"code\"><pre><span class=\"line\">odbc_connect(): SQL error: [unixODBC][Cloudera][ODBC] (<span class=\"number\">11560</span>) Unable <span class=\"keyword\">to</span> locate SQLGetPrivateProfileString <span class=\"function\"><span class=\"keyword\">function</span>., <span class=\"title\">SQL</span> <span class=\"title\">state</span> <span class=\"title\">S1000</span> <span class=\"title\">in</span> <span class=\"title\">SQLConnect</span></span></span><br></pre></td></tr></table></figure>\n<p>google一下发现和动态库有点关系，只好看下系统调用情况</p>\n<h2 id=\"strace-php-进程\"><a href=\"#strace-php-进程\" class=\"headerlink\" title=\"strace php 进程\"></a>strace php 进程</h2><p>找到下面的信息，看来是这个库<code>libiodbcinst.so</code>缺失了</p>\n<figure class=\"highlight vim\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">open</span>(<span class=\"string\">\"/home/.odbcinst.ini\"</span>, O_RDONLY)   = -<span class=\"number\">1</span> ENOENT (No such <span class=\"keyword\">file</span> <span class=\"built_in\">or</span> directory)</span><br><span class=\"line\"><span class=\"keyword\">open</span>(<span class=\"string\">\"/etc/ld.so.cache\"</span>, O_RDONLY)      = <span class=\"number\">7</span></span><br><span class=\"line\">fstat(<span class=\"number\">7</span>, &#123;st_mode=S_IFREG|<span class=\"number\">0644</span>, st_size=<span class=\"number\">31742</span>, ...&#125;) = <span class=\"number\">0</span></span><br><span class=\"line\">mmap(NULL, <span class=\"number\">31742</span>, PROT_READ, MAP_PRIVATE, <span class=\"number\">7</span>, <span class=\"number\">0</span>) = <span class=\"number\">0</span>x7f779b219000</span><br><span class=\"line\"><span class=\"keyword\">close</span>(<span class=\"number\">7</span>)                                = <span class=\"number\">0</span></span><br><span class=\"line\"><span class=\"keyword\">open</span>(<span class=\"string\">\"/lib64/tls/libiodbcinst.so\"</span>, O_RDONLY) = -<span class=\"number\">1</span> ENOENT (No such <span class=\"keyword\">file</span> <span class=\"built_in\">or</span> directory)</span><br><span class=\"line\"><span class=\"keyword\">open</span>(<span class=\"string\">\"/lib64/libiodbcinst.so\"</span>, O_RDONLY) = -<span class=\"number\">1</span> ENOENT (No such <span class=\"keyword\">file</span> <span class=\"built_in\">or</span> directory)</span><br><span class=\"line\"><span class=\"keyword\">open</span>(<span class=\"string\">\"/usr/lib64/tls/libiodbcinst.so\"</span>, O_RDONLY) = -<span class=\"number\">1</span> ENOENT (No such <span class=\"keyword\">file</span> <span class=\"built_in\">or</span> directory)</span><br><span class=\"line\"><span class=\"keyword\">open</span>(<span class=\"string\">\"/usr/lib64/libiodbcinst.so\"</span>, O_RDONLY) = -<span class=\"number\">1</span> ENOENT (No such <span class=\"keyword\">file</span> <span class=\"built_in\">or</span> directory)</span><br><span class=\"line\">munmap(<span class=\"number\">0</span>x7f779b219000, <span class=\"number\">31742</span>)           = <span class=\"number\">0</span></span><br><span class=\"line\"><span class=\"keyword\">open</span>(<span class=\"string\">\"/data/logs/php/php_error.log\"</span>, O_WRONLY|O_CREAT|O_APPEND, <span class=\"number\">0644</span>) = <span class=\"number\">7</span></span><br><span class=\"line\"><span class=\"keyword\">write</span>(<span class=\"number\">7</span>, <span class=\"string\">\"[26-Sep-2019 10:52:47 Asia/Shang\"</span>..., <span class=\"number\">304</span>) = <span class=\"number\">304</span></span><br><span class=\"line\"><span class=\"keyword\">close</span>(<span class=\"number\">7</span>)                                = <span class=\"number\">0</span></span><br></pre></td></tr></table></figure>\n<h2 id=\"安装库文件\"><a href=\"#安装库文件\" class=\"headerlink\" title=\"安装库文件\"></a>安装库文件</h2><figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">rpm -ivh https://rpmfind.net/linux/epel/6/x86_64/Packages/l/libiodbc-3.52.7-1.el6.x86_64.rpm</span><br><span class=\"line\"></span><br><span class=\"line\">ln -sv /usr/lib64/libiodbcinst.so.2 /usr/lib64/libiodbcinst.so</span><br></pre></td></tr></table></figure>","categories":["技术"],"tags":["PHP","ODBC"]},{"title":"php5解决laravel队列中的超时重试问题(hack)","url":"/2019/01/19/php5%E8%A7%A3%E5%86%B3laravel%E9%98%9F%E5%88%97%E4%B8%AD%E7%9A%84%E8%B6%85%E6%97%B6%E9%87%8D%E8%AF%95%E9%97%AE%E9%A2%98(hack)/","content":"<h2 id=\"写在前\"><a href=\"#写在前\" class=\"headerlink\" title=\"写在前\"></a>写在前</h2><p>上一篇文章<a href=\"/2018/12/29/【Laravel】laravel队列中的timeout参数需要使用php7.1/\" title=\"laravel队列中的timeout参数需要使用php7.1\">laravel队列中的timeout参数需要使用php7.1</a>，最后结论时，我说这个问题只能升级php7.1才能解决，在今天的思考和实验中发现，还可以“曲线救国”！！啪啪打脸。</p>\n<p>上一篇文章，在读了laravel源码知道，在异步队列中，laravel使用了一个php7.1才有的函数<a href=\"http://php.net/manual/en/function.pcntl-async-signals.php\" target=\"_blank\" rel=\"noopener\">pcntl_async_signals</a>，这让我瞬间失去了所有想法，虽然升级PHP7是大趋势，但是有些依赖库可能在支持上还不完善。当然，大部分时候建议是升级的，PHP5很快就不进行安全维护了啊。</p>\n<h2 id=\"再探索\"><a href=\"#再探索\" class=\"headerlink\" title=\"再探索\"></a>再探索</h2><p>这个离线队列到底是怎么运行的？有兴趣的朋友可以看下陈昊写的<a href=\"https://blogoss.yinghualuo.cn/blog/2017/08/Laravel框架关键技术解析-陈昊.pdf\" target=\"_blank\" rel=\"noopener\">《laravel框架关键技术解析》</a>中13章【消息队列】，能够大致明白laravel程序消息队列的“前半部分”，为什么我说前半部分？接着看</p>\n<p>这部书讲了<strong>同步类型</strong>和<strong>数据库类型</strong>消息队列，接下来我要讲的是数据库类型里面的<strong>redis驱动类型</strong>以及<strong>worker处理程序</strong>这里面到底发生了什么事。</p>\n<p>laravel优秀的设计与机制给我们提供了很多最佳实践，这也意味着<strong>隐藏了不少黑盒子</strong>，有时候让人不痛快、不明所以。只能一边看源码、一边做实验、一边感叹XX。</p>\n<p>如果你已经了解了laravel队列的机制或者看完了<a href=\"https://blogoss.yinghualuo.cn/blog/2017/08/Laravel框架关键技术解析-陈昊.pdf\" target=\"_blank\" rel=\"noopener\">《laravel框架关键技术解析》</a>这本书，我想你已经明白消息的生成和发送。着重看下消息的处理</p>\n<p>如果你使用supervisor来管理队列程序，一般会开启多个worker</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">numprocs=8</span><br></pre></td></tr></table></figure>\n<p>假设有8个worker(1000，1001，…，1007)，后面再说下只有一个worker会发生什么</p>\n<p>当一个消息来了，会先在redis生成一个list，假设你的队列名称为queueA，就会生成一个名为<strong>queue:queueA</strong>的list，此时，worker1000就会从list中pop一个消息出来处理，把这个消息放入一个名为<strong>queues:queueA:reserved</strong>的zset中，即“保留消息有序集”。</p>\n<p>这时会有一堆信号注册，其中就包括timeout超时信号检测，如上篇文章所说，由于背景是php5，所以并不会注册异步信号，timeout参数就没用了，看下面的源码得知</p>\n<figure class=\"highlight php\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * Enable async signals for the process.</span></span><br><span class=\"line\"><span class=\"comment\">     *</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@return</span> void</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"keyword\">protected</span> <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">listenForSignals</span><span class=\"params\">()</span></span></span><br><span class=\"line\"><span class=\"function\">    </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (<span class=\"keyword\">$this</span>-&gt;supportsAsyncSignals()) &#123;</span><br><span class=\"line\">            pcntl_async_signals(<span class=\"keyword\">true</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">            pcntl_signal(SIGTERM, <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">                <span class=\"keyword\">$this</span>-&gt;shouldQuit = <span class=\"keyword\">true</span>;</span><br><span class=\"line\">            &#125;);</span><br><span class=\"line\"></span><br><span class=\"line\">            pcntl_signal(SIGUSR2, <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">                <span class=\"keyword\">$this</span>-&gt;paused = <span class=\"keyword\">true</span>;</span><br><span class=\"line\">            &#125;);</span><br><span class=\"line\"></span><br><span class=\"line\">            pcntl_signal(SIGCONT, <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">                <span class=\"keyword\">$this</span>-&gt;paused = <span class=\"keyword\">false</span>;</span><br><span class=\"line\">            &#125;);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * Register the worker timeout handler (PHP 7.1+).</span></span><br><span class=\"line\"><span class=\"comment\">     *</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@param</span>  \\Illuminate\\Contracts\\Queue\\Job|null  $job</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@param</span>  WorkerOptions  $options</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@return</span> void</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"keyword\">protected</span> <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">registerTimeoutHandler</span><span class=\"params\">($job, WorkerOptions $options)</span></span></span><br><span class=\"line\"><span class=\"function\">    </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (<span class=\"keyword\">$this</span>-&gt;supportsAsyncSignals()) &#123;</span><br><span class=\"line\">            <span class=\"comment\">// We will register a signal handler for the alarm signal so that we can kill this</span></span><br><span class=\"line\">            <span class=\"comment\">// process if it is running too long because it has frozen. This uses the async</span></span><br><span class=\"line\">            <span class=\"comment\">// signals supported in recent versions of PHP to accomplish it conveniently.</span></span><br><span class=\"line\">            pcntl_signal(SIGALRM, <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">                <span class=\"keyword\">$this</span>-&gt;kill(<span class=\"number\">1</span>);</span><br><span class=\"line\">            &#125;);</span><br><span class=\"line\"></span><br><span class=\"line\">            pcntl_alarm(</span><br><span class=\"line\">                max(<span class=\"keyword\">$this</span>-&gt;timeoutForJob($job, $options), <span class=\"number\">0</span>)</span><br><span class=\"line\">            );</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * Determine if \"async\" signals are supported.</span></span><br><span class=\"line\"><span class=\"comment\">     *</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@return</span> bool</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"keyword\">protected</span> <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">supportsAsyncSignals</span><span class=\"params\">()</span></span></span><br><span class=\"line\"><span class=\"function\">    </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> version_compare(PHP_VERSION, <span class=\"string\">'7.1.0'</span>) &gt;= <span class=\"number\">0</span> &amp;&amp;</span><br><span class=\"line\">               extension_loaded(<span class=\"string\">'pcntl'</span>);</span><br><span class=\"line\">    &#125;</span><br></pre></td></tr></table></figure>\n<p>上篇文章就讲到了这里，我们接着看，既然timeout信号无效，任务过时了自然就不会终止，可是时间还在继续，走到了另一个参数retry_after到期要做的事情。</p>\n<blockquote>\n<p>为了避免任务被执行多次，retry_after参数要比timeout参数的值大一些</p>\n</blockquote>\n<p>这里假设<strong>timeout为10s，retry_after为15s，tries为3次</strong></p>\n<blockquote>\n<p>tries是max_tries，即任务执行次数</p>\n</blockquote>\n<p>worker1000检测到tries为3，也就是说，这任务能执行3次，就把任务信息中<strong>attempts改为1，原先是0</strong>，重新释放回队列中，看下面的代码。还没完，这任务还在执行呢….</p>\n<figure class=\"highlight php\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * Get the Lua script for releasing reserved jobs.</span></span><br><span class=\"line\"><span class=\"comment\">     *</span></span><br><span class=\"line\"><span class=\"comment\">     * KEYS[1] - The \"delayed\" queue we release jobs onto, for example: queues:foo:delayed</span></span><br><span class=\"line\"><span class=\"comment\">     * KEYS[2] - The queue the jobs are currently on, for example: queues:foo:reserved</span></span><br><span class=\"line\"><span class=\"comment\">     * ARGV[1] - The raw payload of the job to add to the \"delayed\" queue</span></span><br><span class=\"line\"><span class=\"comment\">     * ARGV[2] - The UNIX timestamp at which the job should become available</span></span><br><span class=\"line\"><span class=\"comment\">     *</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@return</span> string</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">release</span><span class=\"params\">()</span></span></span><br><span class=\"line\"><span class=\"function\">    </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"string\">&lt;&lt;&lt;'LUA'</span></span><br><span class=\"line\"><span class=\"string\">-- Remove the job from the current queue...</span></span><br><span class=\"line\"><span class=\"string\">redis.call('zrem', KEYS[2], ARGV[1])</span></span><br><span class=\"line\"><span class=\"string\"></span></span><br><span class=\"line\"><span class=\"string\">-- Add the job onto the \"delayed\" queue...</span></span><br><span class=\"line\"><span class=\"string\">redis.call('zadd', KEYS[1], ARGV[2], ARGV[1])</span></span><br><span class=\"line\"><span class=\"string\"></span></span><br><span class=\"line\"><span class=\"string\">return true</span></span><br><span class=\"line\"><span class=\"string\">LUA;</span></span><br><span class=\"line\">    &#125;</span><br></pre></td></tr></table></figure>\n<p>worker1001等呀等，终于等到了一个消息，就拿了执行了，和worker1000一样，到了retry_after的时候，把attempts改为2，又释放回去。</p>\n<p>worker1002同上，把attempts改为3，又释放回去。</p>\n<p>worker1003拿到后，一看，tries为3啊，已经不能再执行了，就抛异常<strong>Illuminate\\Queue\\MaxAttemptsExceededException</strong>，并说</p>\n<blockquote>\n<p>A queued job has been attempted too many times. The job may have previously timed out.</p>\n</blockquote>\n<p>然后，worker1003回调任务里面的failed方法，并终止任务逻辑</p>\n<figure class=\"highlight php\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * 任务失败回调方法</span></span><br><span class=\"line\"><span class=\"comment\">    * <span class=\"doctag\">@param</span>  Exception  $exception</span></span><br><span class=\"line\"><span class=\"comment\">    * <span class=\"doctag\">@return</span> void</span></span><br><span class=\"line\"><span class=\"comment\">    */</span></span><br><span class=\"line\">   <span class=\"keyword\">public</span> <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">failed</span><span class=\"params\">(Exception $exception)</span></span></span><br><span class=\"line\"><span class=\"function\">   </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">   &#125;</span><br></pre></td></tr></table></figure>\n<p>注意，此时worker1000、worker1001、worker1002还在执行….这是很可怕的，很容易引起<strong>资源泄露、依赖服务负载过大</strong>等问题。</p>\n<h2 id=\"“曲线救国”\"><a href=\"#“曲线救国”\" class=\"headerlink\" title=\"“曲线救国”\"></a>“曲线救国”</h2><p>上面介绍了laravel队列中worker运行原理，但是问题并没有得到解决。这么说来，升级PHP7应该是最好的办法，确实是的，但是根据laravel worker的运行机制，还能这么做，接着看</p>\n<p>利用laravel的<strong>重试</strong>机制和<strong>异常</strong>机制，我们可以这样设置</p>\n<ul>\n<li>tries=1</li>\n<li>timeout=10 (不变)</li>\n<li>retry_after=15 (不变)</li>\n</ul>\n<p>这样一来，worker1000在执行任务时，我们记录该进程的ID，保存起来，能够让别的进程获取到。在worker1001重试的时候，会报异常，因为tries已经是最大值了。此时，在异常回调函数中，我们把worker1000的进程ID取出来，kill掉，supervisor会重新拉起一个新的worker，问题就解决了！</p>\n<p>这个解决方案是不是特别有趣？:)</p>\n<h2 id=\"特殊情况：只有一个worker\"><a href=\"#特殊情况：只有一个worker\" class=\"headerlink\" title=\"特殊情况：只有一个worker\"></a>特殊情况：只有一个worker</h2><p>上面的解决方案是可行的，但是，这是建立在supervisor能维护worker池的前提下，如果打从一开始，就只有一个worker，这怎么办呢？</p>\n<p>这个问题让人吐血，因为真实的情况是，只有一个worker的情况下，会忽略掉retry_after，并不会释放任务，更别提报异常了，一股脑的往下执行….</p>\n","categories":["技术"],"tags":["PHP","Laravel"]},{"title":"procedure在Mysql和Sql Server中使用的一些区别","url":"/2015/12/17/procedure%E5%9C%A8Mysql%E5%92%8CSql%20Server%E4%B8%AD%E4%BD%BF%E7%94%A8%E7%9A%84%E4%B8%80%E4%BA%9B%E5%8C%BA%E5%88%AB/","content":"<h2 id=\"环境\"><a href=\"#环境\" class=\"headerlink\" title=\"环境\"></a>环境</h2><ul>\n<li>MySQL 5.6.20</li>\n</ul>\n<h2 id=\"写在前\"><a href=\"#写在前\" class=\"headerlink\" title=\"写在前\"></a>写在前</h2><p>近日，一个好友@随风飘散，问我一个关于procedure在MySQL中使用出现的一些问题。在解决后做一个简单的总结：</p>\n<h2 id=\"正文\"><a href=\"#正文\" class=\"headerlink\" title=\"正文\"></a>正文</h2><p>下面这段代码来自SQL Server，意思是创建一个procedure， 查询表test_user所有的记录。</p>\n<figure class=\"highlight sql\"><table><tr><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">CREATE</span> <span class=\"keyword\">PROCEDURE</span> getUsers</span><br><span class=\"line\"><span class=\"keyword\">AS</span></span><br><span class=\"line\"><span class=\"keyword\">BEGIN</span></span><br><span class=\"line\"><span class=\"keyword\">SELECT</span> * <span class=\"keyword\">FROM</span> test_user</span><br><span class=\"line\"><span class=\"keyword\">END</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">EXECUTE</span>    getUsers</span><br></pre></td></tr></table></figure>\n<p>将这段代码原封不动的复制到MySQL中执行</p>\n<p><img src=\"/images/procedure区别/20151217113258531.jpg\" alt></p>\n<p>可以看出，很明显是语法不正确出现的问题。经查阅相关文档，得出以下代码段</p>\n<figure class=\"highlight sql\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">DROP</span> <span class=\"keyword\">PROCEDURE</span> <span class=\"keyword\">IF</span> <span class=\"keyword\">EXISTS</span> getUsers;</span><br><span class=\"line\">DELIMITER //</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">CREATE</span> <span class=\"keyword\">PROCEDURE</span> getUsers()</span><br><span class=\"line\"><span class=\"keyword\">BEGIN</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">SELECT</span> * <span class=\"keyword\">FROM</span> test_user;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">END</span></span><br><span class=\"line\">//</span><br><span class=\"line\">DELIMITER ;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">CALL</span>  getUsers();</span><br></pre></td></tr></table></figure>\n<p>执行结果如下：</p>\n<p><img src=\"/images/procedure区别/20151217120502176.jpg\" alt></p>\n<p>可以看出，procedure 在 <strong>sql server</strong> 和 <strong>mysql</strong> 中使用的差别还是很大的， 有几个重要的区别：</p>\n<ol>\n<li>使用分隔符包含存储过程</li>\n<li>不再需要AS</li>\n<li>使用CALL代替EXECUTE</li>\n</ol>\n<p>解决了这个问题，甚是感觉到自己实践不足，遇到的问题太少，希望自己能遇到更多的问题，提高自己的同时，帮助更多的人解决问题。</p>\n","categories":["技术"],"tags":["数据库"]},{"title":"socket.io-swoole-server：基于swoole实现socket.io协议","url":"/2019/11/03/socket.io-swoole-server/","content":"<h2 id=\"框架获取\"><a href=\"#框架获取\" class=\"headerlink\" title=\"框架获取\"></a>框架获取</h2><p><a href=\"https://github.com/funsoul/socket.io-swoole-server\" target=\"_blank\" rel=\"noopener\">socket.io-swoole-server</a></p>\n<h2 id=\"使用\"><a href=\"#使用\" class=\"headerlink\" title=\"使用\"></a>使用</h2><p><img src=\"https://travis-ci.org/funsoul/socket.io-swoole-server.svg?branch=master\" alt=\"Build Status\"><br><img src=\"https://img.shields.io/badge/PHP-%3E%3D7.1.0-green\" alt><br><img src=\"https://img.shields.io/badge/Swoole-%3E%3D4.0.3-green\" alt><br><img src=\"https://img.shields.io/github/license/funsoul/socket.io-swoole-server\" alt></p>\n<h2 id=\"Server\"><a href=\"#Server\" class=\"headerlink\" title=\"Server\"></a>Server</h2><h3 id=\"Server-Config\"><a href=\"#Server-Config\" class=\"headerlink\" title=\"Server Config\"></a>Server Config</h3><figure class=\"highlight php\"><table><tr><td class=\"code\"><pre><span class=\"line\">$config = <span class=\"keyword\">new</span> SocketIO\\Engine\\Server\\ConfigPayload();</span><br><span class=\"line\">$config</span><br><span class=\"line\">    <span class=\"comment\">// server worker_num</span></span><br><span class=\"line\">    -&gt;setWorkerNum(<span class=\"number\">2</span>)</span><br><span class=\"line\">    <span class=\"comment\">// server daemonize</span></span><br><span class=\"line\">    -&gt;setDaemonize(<span class=\"number\">0</span>);</span><br></pre></td></tr></table></figure>\n<h3 id=\"Examples\"><a href=\"#Examples\" class=\"headerlink\" title=\"Examples\"></a>Examples</h3><figure class=\"highlight php\"><table><tr><td class=\"code\"><pre><span class=\"line\">$io = <span class=\"keyword\">new</span> SocketIO\\Server(<span class=\"number\">9501</span>, $config, <span class=\"function\"><span class=\"keyword\">function</span><span class=\"params\">(SocketIO\\Server $io)</span> </span>&#123;</span><br><span class=\"line\">    $io-&gt;on(<span class=\"string\">'connection'</span>, <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"params\">(SocketIO\\Server $socket)</span> </span>&#123;</span><br><span class=\"line\">        $socket-&gt;on(<span class=\"string\">'new message'</span>, <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"params\">(SocketIO\\Server $socket)</span> </span>&#123;</span><br><span class=\"line\">            $socket-&gt;broadcast(<span class=\"string\">'new message'</span>, $socket-&gt;getMessage());</span><br><span class=\"line\">        &#125;);</span><br><span class=\"line\"></span><br><span class=\"line\">        $socket-&gt;on(<span class=\"string\">'new user'</span>, <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"params\">(SocketIO\\Server $socket)</span> </span>&#123;</span><br><span class=\"line\">            $socket-&gt;broadcast(<span class=\"string\">'login'</span>, $socket-&gt;getMessage());</span><br><span class=\"line\">        &#125;);</span><br><span class=\"line\"></span><br><span class=\"line\">        $socket-&gt;on(<span class=\"string\">'disconnect'</span>, <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"params\">(SocketIO\\Server $socket)</span> </span>&#123;</span><br><span class=\"line\">            $socket-&gt;broadcast(<span class=\"string\">'user left'</span>, $socket-&gt;getMessage());</span><br><span class=\"line\">        &#125;);</span><br><span class=\"line\">    &#125;);</span><br><span class=\"line\">&#125;);</span><br><span class=\"line\"></span><br><span class=\"line\">$io-&gt;start();</span><br></pre></td></tr></table></figure>","categories":["项目"],"tags":["PHP","Swoole","Socket.io"]},{"title":"laravel队列中的timeout参数需要使用php7.1","url":"/2018/12/29/%E3%80%90Laravel%E3%80%91laravel%E9%98%9F%E5%88%97%E4%B8%AD%E7%9A%84timeout%E5%8F%82%E6%95%B0%E9%9C%80%E8%A6%81%E4%BD%BF%E7%94%A8php7.1/","content":"<h2 id=\"timeout解释\"><a href=\"#timeout解释\" class=\"headerlink\" title=\"timeout解释\"></a>timeout解释</h2><p><a href=\"https://laravel-china.org/docs/laravel/5.4/queues/1256#job-expirations-and-timeouts\" target=\"_blank\" rel=\"noopener\">job-expirations-and-timeouts</a></p>\n<h3 id=\"任务过期-amp-超时\"><a href=\"#任务过期-amp-超时\" class=\"headerlink\" title=\"任务过期 &amp; 超时\"></a>任务过期 &amp; 超时</h3><h4 id=\"任务过期\"><a href=\"#任务过期\" class=\"headerlink\" title=\"任务过期\"></a>任务过期</h4><blockquote>\n<p>config/queue.php 配置文件里，每一个队列连接都定义了一个 retry_after 选项。这个选项指定了任务最多处理多少秒后就被当做失败重试了。比如说，如果这个选项设置为 90，那么当这个任务持续执行了 90 秒而没有被删除，那么它将被释放回队列。通常情况下，你应该把 retry_after 设置为最长耗时的任务所对应的时间。<br>{note} 唯一没有 retry_after 选项的连接是 Amazon SQS。当用 Amazon SQS 时，你必须通过 Amazon 命令行来配置这个重试阈值。</p>\n</blockquote>\n<h2 id=\"版本\"><a href=\"#版本\" class=\"headerlink\" title=\"版本\"></a>版本</h2><ul>\n<li>php 5.6.30</li>\n<li>laravel 5.4.*</li>\n</ul>\n<h2 id=\"laravel5-4源码\"><a href=\"#laravel5-4源码\" class=\"headerlink\" title=\"laravel5.4源码\"></a>laravel5.4源码</h2><p><a href=\"https://github.com/laravel/framework/blob/5.4/src/Illuminate/Queue/Worker.php\" target=\"_blank\" rel=\"noopener\">Worker</a></p>\n<figure class=\"highlight php\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"></span></span><br><span class=\"line\"><span class=\"comment\">* Register the worker timeout handler (PHP 7.1+).</span></span><br><span class=\"line\"><span class=\"comment\">*</span></span><br><span class=\"line\"><span class=\"comment\">* <span class=\"doctag\">@param</span> \\Illuminate\\Contracts\\Queue\\Job|null $job</span></span><br><span class=\"line\"><span class=\"comment\">* <span class=\"doctag\">@param</span> WorkerOptions $options</span></span><br><span class=\"line\"><span class=\"comment\">* <span class=\"doctag\">@return</span> void</span></span><br><span class=\"line\"><span class=\"comment\">*/</span></span><br><span class=\"line\"><span class=\"keyword\">protected</span> <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">registerTimeoutHandler</span><span class=\"params\">($job, WorkerOptions $options)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">\t<span class=\"keyword\">if</span> (<span class=\"keyword\">$this</span>-&gt;supportsAsyncSignals()) &#123;</span><br><span class=\"line\">\t\t<span class=\"comment\">// We will register a signal handler for the alarm signal so that we can kill this</span></span><br><span class=\"line\">\t\t<span class=\"comment\">// process if it is running too long because it has frozen. This uses the async</span></span><br><span class=\"line\">\t\t<span class=\"comment\">// signals supported in recent versions of PHP to accomplish it conveniently.</span></span><br><span class=\"line\">\t\tpcntl_signal(SIGALRM, <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">$this</span>-&gt;kill(<span class=\"number\">1</span>);</span><br><span class=\"line\">\t\t&#125;);</span><br><span class=\"line\">\t\tpcntl_alarm(</span><br><span class=\"line\">\t\t\tmax(<span class=\"keyword\">$this</span>-&gt;timeoutForJob($job, $options), <span class=\"number\">0</span>)</span><br><span class=\"line\">\t\t);</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"></span></span><br><span class=\"line\"><span class=\"comment\">* Determine if \"async\" signals are supported.</span></span><br><span class=\"line\"><span class=\"comment\">*</span></span><br><span class=\"line\"><span class=\"comment\">* <span class=\"doctag\">@return</span> bool</span></span><br><span class=\"line\"><span class=\"comment\">*/</span></span><br><span class=\"line\"><span class=\"keyword\">protected</span> <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">supportsAsyncSignals</span><span class=\"params\">()</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> version_compare(PHP_VERSION, <span class=\"string\">'7.1.0'</span>) &gt;= <span class=\"number\">0</span> &amp;&amp;</span><br><span class=\"line\">\textension_loaded(<span class=\"string\">'pcntl'</span>);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h2 id=\"测试结论\"><a href=\"#测试结论\" class=\"headerlink\" title=\"测试结论\"></a>测试结论</h2><ol>\n<li>php5.6，无法使用timeout属性</li>\n<li>任务进入重试后，相关参数就全部失效了，如tries，因此长耗时任务会一直跑</li>\n<li>tries为0时，会陷入无限重试。此时，必须要把redis中“queues:【这里是你的queue名称】:reserved”删除才能终止</li>\n<li>上面的设置中，retry_after比timeout大一些，在timeout无效后，任务会进行retry（丢回队列，由其他worker接管执行，这时会出现第2点的问题），当重试次数达到设定值时，原进程就会异常退出，报【A queued job has been attempted too many times. The job may have previously timed out】错误。</li>\n</ol>\n<p>上面的问题都是因为，php5不支持timeout……..看来要使用这个参数，必须要升级到php7.1了….</p>\n","categories":["技术"],"tags":["PHP","Laravel"]},{"title":"【PHP-ML】解决NLP中文文本分类问题","url":"/2019/11/30/%E3%80%90PHP-ML%E3%80%91%E8%A7%A3%E5%86%B3NLP%E4%B8%AD%E6%96%87%E6%96%87%E6%9C%AC%E5%88%86%E7%B1%BB%E9%97%AE%E9%A2%98/","content":"<h2 id=\"php-ml\"><a href=\"#php-ml\" class=\"headerlink\" title=\"php-ml\"></a>php-ml</h2><p><a href=\"https://php-ml.readthedocs.io/en/latest/\" target=\"_blank\" rel=\"noopener\">php-ml</a>是波兰开发者<a href=\"https://arkadiuszkondas.com/\" target=\"_blank\" rel=\"noopener\">Arkadiusz Kondas</a>的作品，前段时间刚翻译了他关于PHP在机器学习领域的看法「3 Reasons Why PHP is Not Yet Perfect for Machine Learning」。php-ml的出现丰富了PHP生态，让PHP开发者也能写机器学习应用，这篇文章讲一讲文本分类问题在php-ml中是怎么解决的。</p>\n<p>本文的实践例子已经放在Github：<a href=\"https://github.com/funsoul/php-text-classification\" target=\"_blank\" rel=\"noopener\">php-text-classification</a></p>\n<h2 id=\"数据集\"><a href=\"#数据集\" class=\"headerlink\" title=\"数据集\"></a>数据集</h2><p>本文采用<a href=\"https://github.com/fatecbf/toutiao-text-classfication-dataset\" target=\"_blank\" rel=\"noopener\">头条新闻数据集</a></p>\n<ul>\n<li>数据规模：共382688条，分布于15个分类中。</li>\n<li>采集时间：2018年05月</li>\n</ul>\n<p>分类code与名称：</p>\n<figure class=\"highlight vim\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"number\">100</span> 民生 故事 news_story</span><br><span class=\"line\"><span class=\"number\">101</span> 文化 文化 news_culture</span><br><span class=\"line\"><span class=\"number\">102</span> 娱乐 娱乐 news_entertainment</span><br><span class=\"line\"><span class=\"number\">103</span> 体育 体育 news_sports</span><br><span class=\"line\"><span class=\"number\">104</span> 财经 财经 news_finance</span><br><span class=\"line\"><span class=\"number\">106</span> 房产 房产 news_house</span><br><span class=\"line\"><span class=\"number\">107</span> 汽车 汽车 news_car</span><br><span class=\"line\"><span class=\"number\">108</span> 教育 教育 news_edu </span><br><span class=\"line\"><span class=\"number\">109</span> 科技 科技 news_tech</span><br><span class=\"line\"><span class=\"number\">110</span> 军事 军事 news_military</span><br><span class=\"line\"><span class=\"number\">112</span> 旅游 旅游 news_travel</span><br><span class=\"line\"><span class=\"number\">113</span> 国际 国际 news_world</span><br><span class=\"line\"><span class=\"number\">114</span> 证券 股票 stock</span><br><span class=\"line\"><span class=\"number\">115</span> 农业 三农 news_agriculture</span><br><span class=\"line\"><span class=\"number\">116</span> 电竞 游戏 news_game</span><br></pre></td></tr></table></figure>\n<h2 id=\"Classification\"><a href=\"#Classification\" class=\"headerlink\" title=\"Classification\"></a>Classification</h2><p>php-ml有多种文本分类模型</p>\n<ul>\n<li>SVM（依赖libsvm库）</li>\n<li>KNN</li>\n<li>NavieBayes</li>\n<li>MLPClassifier</li>\n</ul>\n<h2 id=\"数据预处理\"><a href=\"#数据预处理\" class=\"headerlink\" title=\"数据预处理\"></a>数据预处理</h2><p>php-ml对分类模型保持高度一致的接口，定义了统一的输入和输出。下面的代码贯穿全文，只需要选取合适的模型，把样本数据集<code>Samples</code>和类别对象<code>Labels</code>灌入训练API，即可进行训练。</p>\n<figure class=\"highlight php\"><table><tr><td class=\"code\"><pre><span class=\"line\">$samples = [[<span class=\"number\">5</span>, <span class=\"number\">1</span>, <span class=\"number\">1</span>], [<span class=\"number\">1</span>, <span class=\"number\">5</span>, <span class=\"number\">1</span>], [<span class=\"number\">1</span>, <span class=\"number\">1</span>, <span class=\"number\">5</span>]];</span><br><span class=\"line\">$labels = [<span class=\"string\">'a'</span>, <span class=\"string\">'b'</span>, <span class=\"string\">'c'</span>];</span><br><span class=\"line\"></span><br><span class=\"line\">$classifier = <span class=\"keyword\">new</span> ClassificationModel();</span><br><span class=\"line\">$classifier-&gt;train($samples, $labels);</span><br></pre></td></tr></table></figure>\n<p>在这里，ClassificationModel可以是SVM，也可以KNN或者其他分类模型。区别在于，各模型存在算法、核函数或超参差异。当进行深度拟合数据、提高模型分类效果时，可进行调整。然而，php-ml没有交叉验证或者网格搜索等方法，需要自己设计程序进行调参。</p>\n<p>回到主题，我们需要把不同类别的中文文本数据进行训练，中文文本的<code>形式化处理</code>是关键。</p>\n<p>先看原始数据形式，截取第一条数据出来</p>\n<figure class=\"highlight vim\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"number\">6551700932705387022</span>_!_101_!_news_culture_!_京城最值得你来场文化之旅的博物馆_!_保利集团,马未都,中国科学技术馆,博物馆,新中国</span><br></pre></td></tr></table></figure>\n<p>数据以<code>_!_</code>分隔，对本文来说，需要获取类别ID、类别名称和句子，如下：</p>\n<ul>\n<li>category_id: 101</li>\n<li>category_name: news_culture</li>\n<li>text: 京城最值得你来场文化之旅的博物馆</li>\n</ul>\n<p>读取文件，进行分词和停用词过滤后，得到如下的数据结构</p>\n<figure class=\"highlight php\"><table><tr><td class=\"code\"><pre><span class=\"line\">[</span><br><span class=\"line\">  [</span><br><span class=\"line\">    category_id: <span class=\"number\">101</span>,</span><br><span class=\"line\">    category_name: news_culture,</span><br><span class=\"line\">    text: 京城最值得你来场文化之旅的博物馆</span><br><span class=\"line\">  ]</span><br><span class=\"line\">  <span class=\"comment\">// 此处省略382687行</span></span><br><span class=\"line\">]</span><br></pre></td></tr></table></figure>\n<h2 id=\"特征提取\"><a href=\"#特征提取\" class=\"headerlink\" title=\"特征提取\"></a>特征提取</h2><h3 id=\"分词\"><a href=\"#分词\" class=\"headerlink\" title=\"分词\"></a>分词</h3><p>分词方式有多种：</p>\n<ol>\n<li>直接调用php jieba分词库<a href=\"https://github.com/fukuball/jieba-php\" target=\"_blank\" rel=\"noopener\">fukuball/jieba-php</a></li>\n<li>直接调用php jieba分词扩展<a href=\"https://github.com/jonnywang/phpjieba\" target=\"_blank\" rel=\"noopener\">jonnywang/phpjieba</a></li>\n<li>使用swoole+jieba分词，提供一个http服务。参考之前写的这篇文章<a href=\"/2019/08/14/Swoole加速结巴分词/\" title=\"Swoole加速结巴分词\">Swoole加速结巴分词</a></li>\n<li>使用python+aiohttp+jieba</li>\n</ol>\n<h3 id=\"过滤\"><a href=\"#过滤\" class=\"headerlink\" title=\"过滤\"></a>过滤</h3><ol>\n<li>停用词过滤，可以使用<a href=\"https://github.com/goto456/stopwords\" target=\"_blank\" rel=\"noopener\">goto456/stopwords</a></li>\n<li>对于英文文本，单个字符会被过滤。对于中文同样适用，单个词没有太大意义</li>\n</ol>\n<h3 id=\"语料库（词袋）\"><a href=\"#语料库（词袋）\" class=\"headerlink\" title=\"语料库（词袋）\"></a>语料库（词袋）</h3><p>进行分词和过滤后，将获得特征。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">[&apos;京城&apos;, &apos;值得&apos;,  &apos;来场&apos; , &apos;文化&apos;, &apos;之旅&apos;, &apos;博物馆&apos;]</span><br></pre></td></tr></table></figure>\n<p>将特征以空格分隔，合并成句子</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">京城 值得 来场 文化 之旅 博物馆</span><br></pre></td></tr></table></figure>\n<p>使用<code>WhitespaceTokenizer</code>进行文本样本集的向量化</p>\n<figure class=\"highlight php\"><table><tr><td class=\"code\"><pre><span class=\"line\">$vectorizer = <span class=\"keyword\">new</span> TokenCountVectorizer(<span class=\"keyword\">new</span> WhitespaceTokenizer());</span><br><span class=\"line\">$vectorizer-&gt;fit($trainX);</span><br><span class=\"line\">$vectorizer-&gt;transform($trainX);</span><br></pre></td></tr></table></figure>\n<p>词袋</p>\n<figure class=\"highlight php\"><table><tr><td class=\"code\"><pre><span class=\"line\">$vectorizer-&gt;getVocabulary();</span><br><span class=\"line\"><span class=\"comment\">// ['之旅', '京城', '值得', '博物馆', '文化', '来场']</span></span><br></pre></td></tr></table></figure>\n<p>语料库</p>\n<figure class=\"highlight php\"><table><tr><td class=\"code\"><pre><span class=\"line\">[[<span class=\"number\">1</span> <span class=\"number\">1</span> <span class=\"number\">1</span> <span class=\"number\">1</span> <span class=\"number\">1</span> <span class=\"number\">1</span>]]</span><br></pre></td></tr></table></figure>\n<h3 id=\"TF-IDF\"><a href=\"#TF-IDF\" class=\"headerlink\" title=\"TF-IDF\"></a>TF-IDF</h3><blockquote>\n<p>tf-idf是一种统计方法，用以评估一字词对于一个文件集或一个语料库中的其中一份文件的重要程度。字词的重要性随着它在文件中出现的次数成正比增加，但同时会随着它在语料库中出现的频率成反比下降。</p>\n</blockquote>\n<figure class=\"highlight php\"><table><tr><td class=\"code\"><pre><span class=\"line\">$transformer = <span class=\"keyword\">new</span> TfIdfTransformer($trainX);</span><br><span class=\"line\">$transformer-&gt;transform($trainX);</span><br></pre></td></tr></table></figure>\n<p>在这里，由于只有一句话，且这句话里面所有的字词都只有一个，所以权重是一样的。</p>\n<figure class=\"highlight php\"><table><tr><td class=\"code\"><pre><span class=\"line\">[[<span class=\"number\">0.40824829</span> <span class=\"number\">0.40824829</span> <span class=\"number\">0.40824829</span> <span class=\"number\">0.40824829</span> <span class=\"number\">0.40824829</span> <span class=\"number\">0.40824829</span>]]</span><br></pre></td></tr></table></figure>\n<h2 id=\"训练\"><a href=\"#训练\" class=\"headerlink\" title=\"训练\"></a>训练</h2><p>进行特征处理后的<code>特征集</code>和<code>类别对象</code>传入模型的构造方法，即可进行训练。注意，这里可以对比<code>未使用tfidf</code>和<code>使用tfidf</code>前后的效果。</p>\n<p>这里使用朴素贝叶斯举例：</p>\n<figure class=\"highlight php\"><table><tr><td class=\"code\"><pre><span class=\"line\">$model = <span class=\"keyword\">new</span> NaiveBayes($trainX, $trainY),</span><br><span class=\"line\">$classifier = $model-&gt;train();</span><br></pre></td></tr></table></figure>\n<h2 id=\"预测\"><a href=\"#预测\" class=\"headerlink\" title=\"预测\"></a>预测</h2><p>准备新的样本文本，并进行分词、过滤和特征提取后，传入即可</p>\n<figure class=\"highlight php\"><table><tr><td class=\"code\"><pre><span class=\"line\">$classifier-&gt;predict($testSample);</span><br></pre></td></tr></table></figure>\n<h2 id=\"持久化\"><a href=\"#持久化\" class=\"headerlink\" title=\"持久化\"></a>持久化</h2><p>如果想要保存训练结果，避免多次训练，可以将模型持久化到本地。需要使用时，将模型重新导入内存即可使用。</p>\n<figure class=\"highlight php\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 模型导出</span></span><br><span class=\"line\">$filepath = <span class=\"string\">'/path/to/store/the/model'</span>;</span><br><span class=\"line\">$modelManager = <span class=\"keyword\">new</span> ModelManager();</span><br><span class=\"line\">$modelManager-&gt;saveToFile($classifier, $filepath);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 模型导入</span></span><br><span class=\"line\">$restoredClassifier = $modelManager-&gt;restoreFromFile($filepath);</span><br><span class=\"line\">$restoredClassifier-&gt;predict([<span class=\"number\">3</span>, <span class=\"number\">2</span>]);</span><br></pre></td></tr></table></figure>\n<h2 id=\"评估指标（Metric）\"><a href=\"#评估指标（Metric）\" class=\"headerlink\" title=\"评估指标（Metric）\"></a>评估指标（Metric）</h2><p>仓库代码中，我将样本通过<code>StratifiedRandomSplit</code>划分为<code>训练集</code>和<code>测试集</code>，用于评估模型效果。</p>\n<figure class=\"highlight php\"><table><tr><td class=\"code\"><pre><span class=\"line\">$split = <span class=\"keyword\">new</span> StratifiedRandomSplit($dataset, <span class=\"number\">0.2</span>);</span><br></pre></td></tr></table></figure>\n<p>对测试集进行预测</p>\n<figure class=\"highlight php\"><table><tr><td class=\"code\"><pre><span class=\"line\">$predictY = [];</span><br><span class=\"line\"><span class=\"keyword\">foreach</span> ($testX <span class=\"keyword\">as</span> $test) &#123;</span><br><span class=\"line\">    $testSampleText = [$test];</span><br><span class=\"line\"></span><br><span class=\"line\">    $vectorizer-&gt;transform($testSampleText);</span><br><span class=\"line\"></span><br><span class=\"line\">    $predictY[] = current($classifier-&gt;predict($testSampleText));</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h3 id=\"Score\"><a href=\"#Score\" class=\"headerlink\" title=\"Score\"></a>Score</h3><p>通过<code>Accuracy</code>得到预测结果的正确率</p>\n<figure class=\"highlight php\"><table><tr><td class=\"code\"><pre><span class=\"line\">Accuracy::score($testY, $predictY)</span><br></pre></td></tr></table></figure>\n<h3 id=\"Confusion-Matrix\"><a href=\"#Confusion-Matrix\" class=\"headerlink\" title=\"Confusion Matrix\"></a>Confusion Matrix</h3><p>通过<code>ConfusionMatrix</code>得到预测结果的错误情况</p>\n<figure class=\"highlight php\"><table><tr><td class=\"code\"><pre><span class=\"line\">$text = <span class=\"keyword\">new</span> Text($textFile);</span><br><span class=\"line\">$categoryIds = $text-&gt;getCategoryIds();</span><br><span class=\"line\">ConfusionMatrix::compute($testY, $predictY, $categoryIds);</span><br></pre></td></tr></table></figure>\n<h3 id=\"Classification-Report\"><a href=\"#Classification-Report\" class=\"headerlink\" title=\"Classification Report\"></a>Classification Report</h3><p>通过<code>ClassificationReport</code>得到整体分类报告（score、f1、recall）</p>\n<figure class=\"highlight php\"><table><tr><td class=\"code\"><pre><span class=\"line\">$report = <span class=\"keyword\">new</span> ClassificationReport($testY, $predictY);</span><br><span class=\"line\">$report-&gt;getAverage();</span><br></pre></td></tr></table></figure>\n<h2 id=\"Pipeline\"><a href=\"#Pipeline\" class=\"headerlink\" title=\"Pipeline\"></a>Pipeline</h2><p>还可以使用<code>Pipeline</code>来管线化工作流，有两个好处：</p>\n<ol>\n<li>代码少很多，阅读更清晰</li>\n<li>内存占用更低</li>\n</ol>\n<figure class=\"highlight php\"><table><tr><td class=\"code\"><pre><span class=\"line\">$transformers = [</span><br><span class=\"line\">    <span class=\"keyword\">new</span> TokenCountVectorizer(<span class=\"keyword\">new</span> WhitespaceTokenizer()),</span><br><span class=\"line\">    <span class=\"keyword\">new</span> TfIdfTransformer()</span><br><span class=\"line\">];</span><br><span class=\"line\"></span><br><span class=\"line\">$pipeline = <span class=\"keyword\">new</span> Pipeline($transformers, <span class=\"keyword\">new</span> NaiveBayes());</span><br><span class=\"line\">$pipeline-&gt;train($trainX, $trainY);</span><br><span class=\"line\">$predictY = $pipeline-&gt;predict($testX);</span><br><span class=\"line\">Accuracy::score($testY, $predictY);</span><br></pre></td></tr></table></figure>","categories":["技术"],"tags":["PHP","PHP-ML","机器学习","NLP","文本分类"]},{"title":"【PHP7】- 编译安装与新特性初体验","url":"/2015/12/03/%E3%80%90PHP7%E3%80%91-%20%E7%BC%96%E8%AF%91%E5%AE%89%E8%A3%85%E4%B8%8E%E6%96%B0%E7%89%B9%E6%80%A7%E5%88%9D%E4%BD%93%E9%AA%8C/","content":"<h2 id=\"前言\"><a href=\"#前言\" class=\"headerlink\" title=\"前言\"></a>前言</h2><p>今天是世界上最好的语言革命性的一天，PHP7问世了！实际上我使用php只有一年半多一点，但是却被深深地吸引住，所以也容我感慨一下吧。</p>\n<p>大一下学期，我们学校开始教Java（我的专业方向就是Java），那时班上的很多同学早在上学期就自学了Java，而且学的非常好。我跟着课程的进度一步步的下载，安装，配置环境，然后写一些简单的程序，调试。这个过程非常煎熬，因为在配置环境的时候就出现了很多问题，使用eclipse来写代码，由于当时电脑配置并不好，所以写代码的时候总是会出现“未响应”，然后卡顿很长时间，更不用说MyEclipse了。苦闷的心情还历历在目~</p>\n<p>当时学校还为我们开设了一门PHP课程，我第一次使用的时候感觉很神奇，弱类型的概念还不是很清晰，只是觉得不需要再去考虑变量的类型，php为我们都处理好了。而且网上PHP的环境非常多，其中xampp就是一个著名的跨平台环境，一键安装，可以马上看到自己的代码运行的结果，我可以更关注自己写的逻辑和正确性，不得不说实在是太好用了。最后这门课需要结合另一门jQuery课做一个课程设计，我一个星期就敲出来了，还为我们赢得了不少掌声。就这样，一直用到现在，与php牵连在了一起。</p>\n<h2 id=\"正文\"><a href=\"#正文\" class=\"headerlink\" title=\"正文\"></a>正文</h2><h3 id=\"环境\"><a href=\"#环境\" class=\"headerlink\" title=\"环境\"></a>环境</h3><ul>\n<li>Ubuntu 14.04</li>\n</ul>\n<h3 id=\"准备PHP源码\"><a href=\"#准备PHP源码\" class=\"headerlink\" title=\"准备PHP源码\"></a>准备PHP源码</h3><p><a href=\"http://php.net/get/php-7.0.0.tar.gz/from/a/mirror\" target=\"_blank\" rel=\"noopener\">http://php.net/get/php-7.0.0.tar.gz/from/a/mirror</a></p>\n<p>1.解压源码并重命名为php-7<br>2.安装依赖项</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">sudo apt-get update</span><br><span class=\"line\">sudo apt-get install libxml2-dev</span><br></pre></td></tr></table></figure>\n<h4 id=\"安装依赖项\"><a href=\"#安装依赖项\" class=\"headerlink\" title=\"安装依赖项\"></a>安装依赖项</h4><figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">sudo apt-get  install  build-essential</span><br><span class=\"line\">sudo apt-get install openssl </span><br><span class=\"line\">sudo apt-get install libssl-dev </span><br><span class=\"line\">sudo apt-get install make</span><br><span class=\"line\">sudo apt-get install curl</span><br><span class=\"line\">sudo apt-get install libcurl4-gnutls-dev</span><br><span class=\"line\">sudo apt-get install libjpeg-dev</span><br><span class=\"line\">sudo apt-get install libpng-dev</span><br><span class=\"line\">sudo apt-get install libmcrypt-dev</span><br><span class=\"line\">sudo apt-get install libreadline6 libreadline6-dev</span><br></pre></td></tr></table></figure>\n<h4 id=\"编译配置\"><a href=\"#编译配置\" class=\"headerlink\" title=\"编译配置\"></a>编译配置</h4><figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">./configure（注意斜杠前的点）</span><br><span class=\"line\"></span><br><span class=\"line\">./configure --prefix=/usr/<span class=\"built_in\">local</span>/php --with-config-file-path=/usr/<span class=\"built_in\">local</span>/php/etc --<span class=\"built_in\">enable</span>-fpm --with-fpm-user=www --with-fpm-group=www --with-mysqli --with-pdo-mysql --with-iconv-dir --with-freetype-dir --with-jpeg-dir --with-png-dir --with-zlib --with-libxml-dir=/usr --<span class=\"built_in\">enable</span>-xml --<span class=\"built_in\">disable</span>-rpath --<span class=\"built_in\">enable</span>-bcmath --<span class=\"built_in\">enable</span>-shmop --<span class=\"built_in\">enable</span>-sysvsem --<span class=\"built_in\">enable</span>-inline-optimization --with-curl --<span class=\"built_in\">enable</span>-mbregex --<span class=\"built_in\">enable</span>-mbstring --with-mcrypt --<span class=\"built_in\">enable</span>-ftp --with-gd --<span class=\"built_in\">enable</span>-gd-native-ttf --with-openssl --with-mhash --<span class=\"built_in\">enable</span>-pcntl --<span class=\"built_in\">enable</span>-sockets --with-xmlrpc --<span class=\"built_in\">enable</span>-zip --<span class=\"built_in\">enable</span>-soap --without-pear --with-gettext --<span class=\"built_in\">disable</span>-fileinfo --<span class=\"built_in\">enable</span>-maintainer-zts  </span><br><span class=\"line\"></span><br><span class=\"line\">./configure --prefix=/usr/<span class=\"built_in\">local</span>/php --<span class=\"built_in\">enable</span>-fpm --<span class=\"built_in\">enable</span>-inline-optimization --<span class=\"built_in\">disable</span>-debug --<span class=\"built_in\">disable</span>-rpath --<span class=\"built_in\">enable</span>-shared --<span class=\"built_in\">enable</span>-opcache  --with-mysql --with-mysqli --with-mysql-sock  --<span class=\"built_in\">enable</span>-pdo --with-pdo-mysql --with-gettext --<span class=\"built_in\">enable</span>-mbstring --with-iconv --with-mcrypt --with-mhash --with-openssl --<span class=\"built_in\">enable</span>-bcmath --<span class=\"built_in\">enable</span>-soap --with-libxml-dir --<span class=\"built_in\">enable</span>-pcntl --<span class=\"built_in\">enable</span>-shmop --<span class=\"built_in\">enable</span>-sysvmsg --<span class=\"built_in\">enable</span>-sysvsem --<span class=\"built_in\">enable</span>-sysvshm --<span class=\"built_in\">enable</span>-sockets --with-curl --with-zlib --<span class=\"built_in\">enable</span>-zip --<span class=\"built_in\">enable</span>-bz2 --with-readline --without-sqlite3 --without-pdo-sqlite --with-pear --with-libdir=/lib/x86_64-linux-gnu --with-gd --with-jpeg-dir=/usr/lib --<span class=\"built_in\">enable</span>-gd-native-ttf --<span class=\"built_in\">enable</span>-xml</span><br></pre></td></tr></table></figure>\n<h4 id=\"安装-PHP\"><a href=\"#安装-PHP\" class=\"headerlink\" title=\"安装 PHP\"></a>安装 PHP</h4><figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">make &amp;&amp; make <span class=\"built_in\">test</span>      （这个过程可能会慢一点，视配置而定，我的虚拟机为单处理器+2G内存）</span><br></pre></td></tr></table></figure>\n<p><img src=\"/images/php7新特性与初体验/20151203232056485.jpg\" alt></p>\n<p>这里可能会出现这个问题，save一下就好了，也就是输入字母s即可，如果开源精神爆棚（我我我），可以输入y，然后输入自己的邮箱。啦啦啦~</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">make &amp;&amp; sudo make install   （这里可能需要输入你的root账户密码）</span><br><span class=\"line\">php -v</span><br></pre></td></tr></table></figure>\n<p><img src=\"/images/php7新特性与初体验/20151203232255760.jpg\" alt></p>\n<p>到这里已经完成php7的安装，接下来就可以尽情的使用PHP7了！</p>\n<h2 id=\"PHP7新特性\"><a href=\"#PHP7新特性\" class=\"headerlink\" title=\"PHP7新特性\"></a>PHP7新特性</h2><p>php7与以前的版本相比有哪些让人兴奋的新特性，我们来体验一番~</p>\n<h3 id=\"宇宙飞船运算符\"><a href=\"#宇宙飞船运算符\" class=\"headerlink\" title=\"宇宙飞船运算符\"></a>宇宙飞船运算符</h3><p>新增运算符Combined comparison Operator ‘&lt;=&gt;’ 吼吼~</p>\n<p><img src=\"/images/php7新特性与初体验/20151203231855632.jpg\" alt></p>\n<p>代码变少了，小于则返回-1，大于返回1，等于返回0，简单易懂，非常爽~</p>\n<h3 id=\"Return-Type-Declarations\"><a href=\"#Return-Type-Declarations\" class=\"headerlink\" title=\"Return Type Declarations\"></a>Return Type Declarations</h3><p>返回类型声明 和Scalar Type Declarations 标量类型声明</p>\n<p><img src=\"/images/php7新特性与初体验/20151203231720195.jpg\" alt></p>\n<p>对于C/C++/java系的看到这个肯定开心爆了，还可以通过declare(strict_type = 1);开启严格模式，这时php将不会帮你自动转换类型，而是报错。</p>\n<h3 id=\"更多的Error变为可捕获的Exception\"><a href=\"#更多的Error变为可捕获的Exception\" class=\"headerlink\" title=\"更多的Error变为可捕获的Exception\"></a>更多的Error变为可捕获的Exception</h3><p><img src=\"/images/php7新特性与初体验/20151203231410865.jpg\" alt></p>\n<p>在php7前未定义函数是致命错误Fatal error，这样会使整个脚本中止，程序无法继续运行下去。但是现在可以通过捕获错误-&gt;处理错误，让程序继续执行下去，大大提高了异常处理能力。</p>\n<h3 id=\"性能提升\"><a href=\"#性能提升\" class=\"headerlink\" title=\"性能提升\"></a>性能提升</h3><p><img src=\"/images/php7新特性与初体验/20151203231219865.png\" alt></p>\n<p>可以看出，php7比php5提高不止100%的性能。升级后该省多少机器啊！</p>\n<h2 id=\"最后再说两句\"><a href=\"#最后再说两句\" class=\"headerlink\" title=\"最后再说两句\"></a>最后再说两句</h2><p>听说PHP7.1将会重启JIT计划，PHP本来就不适合密集计算，开启JIT后，性能，效率又会有多大的提升？很难想象~再加上swoole，yaf等等优秀的开源框架，PHP社区只会越来越繁荣。简单，门槛低，性能好，这应该就是未来编程语言的走向，人人编程的设想也不会是梦吧~</p>\n<p>感谢开源，感谢自己的坚持~</p>\n<p>本文所有例子皆得到验证，亲测可用。</p>\n<p>本文安装教程参考了<a href=\"http://www.oschina.net/question/2010961_242272\" target=\"_blank\" rel=\"noopener\">http://www.oschina.net/question/2010961_242272</a></p>\n<p>本文PHP7新特性参考了鸟哥的分享与博客<a href=\"http://www.laruence.com/\" target=\"_blank\" rel=\"noopener\">http://www.laruence.com/</a></p>\n","categories":["技术"],"tags":["PHP","PHP7"]},{"title":"funtask：又一个多任务处理框架","url":"/2018/07/29/%E3%80%90funtask%E3%80%91%E5%8F%88%E4%B8%80%E4%B8%AA%E5%A4%9A%E4%BB%BB%E5%8A%A1%E5%A4%84%E7%90%86%E6%A1%86%E6%9E%B6/","content":"<h2 id=\"框架获取\"><a href=\"#框架获取\" class=\"headerlink\" title=\"框架获取\"></a>框架获取</h2><p><a href=\"https://github.com/funsoul/funtask\" title=\"funtask\" target=\"_blank\" rel=\"noopener\">funtask</a></p>\n<h2 id=\"更新日志\"><a href=\"#更新日志\" class=\"headerlink\" title=\"更新日志\"></a>更新日志</h2><ol>\n<li>2018-07-29 Swoole1.0简单版生产消费模型，采用多进程模式</li>\n<li>2019-04-25 采用Swoole4重构进程池（退出重启），增加进程组（退出不重启）</li>\n<li>2019-05-06 支持协程Coroutine</li>\n</ol>\n<h2 id=\"使用例子\"><a href=\"#使用例子\" class=\"headerlink\" title=\"使用例子\"></a>使用例子</h2><h3 id=\"耗时任务例子\"><a href=\"#耗时任务例子\" class=\"headerlink\" title=\"耗时任务例子\"></a>耗时任务例子</h3><figure class=\"highlight php\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Consumer</span> <span class=\"keyword\">implements</span> \\<span class=\"title\">Funsoul</span>\\<span class=\"title\">Funtask</span>\\<span class=\"title\">Process</span>\\<span class=\"title\">JobInterface</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * business job</span></span><br><span class=\"line\"><span class=\"comment\">     *</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@return</span> bool [exit process or not]</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">handle</span><span class=\"params\">()</span>: <span class=\"title\">bool</span></span></span><br><span class=\"line\"><span class=\"function\">    </span>&#123;</span><br><span class=\"line\">        $pid = getmypid();</span><br><span class=\"line\"></span><br><span class=\"line\">        $i = <span class=\"number\">0</span>;</span><br><span class=\"line\">        $running = <span class=\"keyword\">true</span>;</span><br><span class=\"line\">        <span class=\"keyword\">while</span> ($running) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">echo</span> <span class=\"string\">\"&#123;$pid&#125;: \"</span> . $i++ . PHP_EOL;</span><br><span class=\"line\"></span><br><span class=\"line\">            <span class=\"keyword\">if</span> ($i == <span class=\"number\">5</span>)</span><br><span class=\"line\">                $running = <span class=\"keyword\">false</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">// exit current process</span></span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">false</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h3 id=\"ProcessPool进程池\"><a href=\"#ProcessPool进程池\" class=\"headerlink\" title=\"ProcessPool进程池\"></a>ProcessPool进程池</h3><figure class=\"highlight php\"><table><tr><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\">$task = <span class=\"keyword\">new</span> \\Funsoul\\Funtask\\Funtask();</span><br><span class=\"line\">$task-&gt;setType(<span class=\"string\">'POOL'</span>)</span><br><span class=\"line\">    -&gt;setJob(<span class=\"keyword\">new</span> Consumer())</span><br><span class=\"line\">    -&gt;setWorkerNum(<span class=\"number\">3</span>)</span><br><span class=\"line\">    -&gt;setWorkerName(<span class=\"string\">'myWorker'</span>)</span><br><span class=\"line\">    -&gt;start();</span><br></pre></td></tr></table></figure>\n<h3 id=\"ProcessGroup进程组\"><a href=\"#ProcessGroup进程组\" class=\"headerlink\" title=\"ProcessGroup进程组\"></a>ProcessGroup进程组</h3><figure class=\"highlight php\"><table><tr><td class=\"code\"><pre><span class=\"line\">$task = <span class=\"keyword\">new</span> \\Funsoul\\Funtask\\Funtask();</span><br><span class=\"line\">$task-&gt;setType(<span class=\"string\">'GROUP'</span>)</span><br><span class=\"line\">    -&gt;setJob(<span class=\"keyword\">new</span> Consumer())</span><br><span class=\"line\">    -&gt;setWorkerNum(<span class=\"number\">3</span>)</span><br><span class=\"line\">    -&gt;setWorkerName(<span class=\"string\">'myWorker'</span>)</span><br><span class=\"line\">    -&gt;start();</span><br></pre></td></tr></table></figure>\n<h3 id=\"Coroutine协程\"><a href=\"#Coroutine协程\" class=\"headerlink\" title=\"Coroutine协程\"></a>Coroutine协程</h3><h4 id=\"协程任务例子\"><a href=\"#协程任务例子\" class=\"headerlink\" title=\"协程任务例子\"></a>协程任务例子</h4><figure class=\"highlight php\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">ConsumerCo</span> <span class=\"keyword\">implements</span> \\<span class=\"title\">Funsoul</span>\\<span class=\"title\">Funtask</span>\\<span class=\"title\">Coroutine</span>\\<span class=\"title\">CoJobInterface</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@param</span> \\Swoole\\Http\\Request $request</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@return</span> mixed|void</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">handle</span><span class=\"params\">(\\Swoole\\Http\\Request $request)</span></span></span><br><span class=\"line\"><span class=\"function\">    </span>&#123;</span><br><span class=\"line\">        $cid = Co::getuid();</span><br><span class=\"line\"></span><br><span class=\"line\">        $i = <span class=\"number\">0</span>;</span><br><span class=\"line\">        $running = <span class=\"keyword\">true</span>;</span><br><span class=\"line\">        <span class=\"keyword\">while</span> ($running) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">echo</span> <span class=\"string\">\"&#123;$cid&#125;: \"</span> . $i++ . PHP_EOL;</span><br><span class=\"line\"></span><br><span class=\"line\">            Co::sleep(<span class=\"number\">1</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">            <span class=\"keyword\">if</span> ($i == <span class=\"number\">5</span>)</span><br><span class=\"line\">                $running = <span class=\"keyword\">false</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h4 id=\"funtask统一接口\"><a href=\"#funtask统一接口\" class=\"headerlink\" title=\"funtask统一接口\"></a>funtask统一接口</h4><figure class=\"highlight php\"><table><tr><td class=\"code\"><pre><span class=\"line\">$task = <span class=\"keyword\">new</span> \\Funsoul\\Funtask\\Funtask();</span><br><span class=\"line\">$task-&gt;setType(<span class=\"string\">'CO'</span>)-&gt;setCoJob(<span class=\"keyword\">new</span> ConsumerCo())-&gt;setWorkerNum(<span class=\"number\">3</span>);</span><br><span class=\"line\"><span class=\"comment\">/** var \\Swoole\\Http\\Response $response */</span></span><br><span class=\"line\">$task-&gt;setFinishCallback(<span class=\"function\"><span class=\"keyword\">function</span> <span class=\"params\">($response)</span> </span>&#123;</span><br><span class=\"line\">\t$response-&gt;end(<span class=\"string\">'finished'</span>);</span><br><span class=\"line\">&#125;);</span><br><span class=\"line\">$task-&gt;start();</span><br></pre></td></tr></table></figure>\n<h4 id=\"coroutine接口\"><a href=\"#coroutine接口\" class=\"headerlink\" title=\"coroutine接口\"></a>coroutine接口</h4><figure class=\"highlight php\"><table><tr><td class=\"code\"><pre><span class=\"line\">$co = <span class=\"keyword\">new</span> \\Funsoul\\Funtask\\Coroutine\\Coroutine();</span><br><span class=\"line\">$co-&gt;setHost(<span class=\"string\">'127.0.0.1'</span>)</span><br><span class=\"line\">    -&gt;setPort(<span class=\"number\">9501</span>)</span><br><span class=\"line\">    -&gt;setWorkerNum(<span class=\"number\">1</span>)</span><br><span class=\"line\">    -&gt;setCoNum(<span class=\"number\">3</span>)</span><br><span class=\"line\">    -&gt;setJob(<span class=\"keyword\">new</span> ConsumerCo());</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/** var \\Swoole\\Http\\Response $response */</span></span><br><span class=\"line\">$co-&gt;start(<span class=\"function\"><span class=\"keyword\">function</span> <span class=\"params\">($response)</span> </span>&#123;</span><br><span class=\"line\">\t$response-&gt;end(<span class=\"string\">\"finished!\\n\"</span>);</span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure>","categories":["项目"],"tags":["PHP","Swoole","多任务处理"]},{"title":"Redis：排查 read error on connection 小记","url":"/2019/08/13/%E3%80%90Redis%E3%80%91brpop%E4%BF%9D%E6%B4%BB%E6%9C%BA%E5%88%B6/","content":"<h2 id=\"从错误说起\"><a href=\"#从错误说起\" class=\"headerlink\" title=\"从错误说起\"></a>从错误说起</h2><p>版本信息</p>\n<ul>\n<li>php-7.1.x</li>\n<li><a href=\"https://github.com/phpredis/phpredis/tree/4.0.2\" target=\"_blank\" rel=\"noopener\">phpredis-4.0.x</a></li>\n</ul>\n<p>一个<code>PHP常驻内存进程</code>，连上<code>Redis</code>后，定时做<code>brpop</code>操作，阻塞时间为<code>10s</code>。问题出现在，几天（不定时）后，该进程就会<br><code>僵死</code>，表现为：</p>\n<ol>\n<li><code>netstat</code>下，php进程与redis建立的客户端连接仍在（ESTABLISHED)</li>\n<li>在客户机<code>tcpdump</code>，没有输出任何数据包信息（没有通信？)</li>\n<li><code>strace</code>该php进程，并没有输出任何系统调用（阻塞在哪了？）</li>\n<li>查看redis-server，发现<code>client list</code>中，并不存在该client（被移除了？）</li>\n</ol>\n<h2 id=\"phpredis客户端连接为何不断？\"><a href=\"#phpredis客户端连接为何不断？\" class=\"headerlink\" title=\"phpredis客户端连接为何不断？\"></a>phpredis客户端连接为何不断？</h2><p>关于phpredis连接，有下面几个地方需要理解清楚</p>\n<ol>\n<li>connect() 函数参数 timeout 为 0</li>\n<li>ini_set(‘default_socket_timeout’, -1)</li>\n<li>setOption(\\Redis::OPT_READ_TIMEOUT, -1)</li>\n<li>pconnect</li>\n</ol>\n<h3 id=\"connect-函数参数-timeout\"><a href=\"#connect-函数参数-timeout\" class=\"headerlink\" title=\"connect 函数参数 timeout\"></a>connect 函数参数 timeout</h3><p>参数：</p>\n<ul>\n<li><em>host</em>: string. can be a host, or the path to a unix domain socket. Starting from version 5.0.0 it is possible to specify schema </li>\n<li><em>port</em>: int, optional  </li>\n<li><em>timeout</em>: float, value in seconds (optional, default is 0 meaning unlimited)  </li>\n<li><em>reserved</em>: should be NULL if retry_interval is specified  </li>\n<li><em>retry_interval</em>: int, value in milliseconds (optional)  </li>\n<li><em>read_timeout</em>: float, value in seconds (optional, default is 0 meaning unlimited)</li>\n</ul>\n<p>这里的<code>timeout</code>表示<code>建立连接</code>时的超时时间，调用此函数时，客户端将与服务端进行三次握手，建立TCP连接。由于网络原因，可以指定一个超时时间，意思是，如果客户端和服务端在该<code>时间限制</code>内未能建立连接，则返回false</p>\n<p>文件：redis.c 行：935</p>\n<figure class=\"highlight c\"><table><tr><td class=\"code\"><pre><span class=\"line\">PHP_METHOD(Redis, connect)</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (redis_connect(INTERNAL_FUNCTION_PARAM_PASSTHRU, <span class=\"number\">0</span>) == FAILURE) &#123;</span><br><span class=\"line\">        RETURN_FALSE;</span><br><span class=\"line\">    &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">        RETURN_TRUE;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>其中，redis_connect的函数原型为</p>\n<figure class=\"highlight c\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"function\">PHP_REDIS_API <span class=\"keyword\">int</span> <span class=\"title\">redis_connect</span><span class=\"params\">(INTERNAL_FUNCTION_PARAMETERS, <span class=\"keyword\">int</span> persistent)</span></span>;</span><br></pre></td></tr></table></figure>\n<p>persistent 为 <code>0</code> 表示不建立<code>持久连接</code>，下面会聊到<code>等于 1</code>的情况。说明<code>connect</code>函数建立的是<code>短连接</code>，当调用<code>close</code>函数时，连接就会关闭。看下面的源码确实如此，如果在建立连接前已经存在另一个连接，则关闭。</p>\n<p>文件：redis.c 行：1011</p>\n<figure class=\"highlight c\"><table><tr><td class=\"code\"><pre><span class=\"line\">redis = PHPREDIS_GET_OBJECT(redis_object, object);</span><br><span class=\"line\"><span class=\"comment\">/* if there is a redis sock already we have to remove it */</span></span><br><span class=\"line\"><span class=\"keyword\">if</span> (redis-&gt;sock) &#123;</span><br><span class=\"line\">    redis_sock_disconnect(redis-&gt;sock, <span class=\"number\">0</span>);</span><br><span class=\"line\">    redis_free_socket(redis-&gt;sock);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h3 id=\"default-socket-timeout\"><a href=\"#default-socket-timeout\" class=\"headerlink\" title=\"default_socket_timeout\"></a>default_socket_timeout</h3><p>这个配置可以在php.ini找到，文档注释很简单：<code>基于 socket 的流的默认超时时间（秒）</code></p>\n<p>redis是基于<code>tcp协议</code>的程序，所以这个配置也会对其造成影响。比如<code>read error on connection</code>错误，这是phpredis在执行get、brpop等操作时，如果在<code>default_socket_timeout</code>时间内不返回结果就会报这个错误。php.ini中默认为<code>60s</code>。可以在程序中使用内置函数<code>ini_set</code>在运行时修改。</p>\n<h3 id=\"OPT-READ-TIMEOUT\"><a href=\"#OPT-READ-TIMEOUT\" class=\"headerlink\" title=\"OPT_READ_TIMEOUT\"></a>OPT_READ_TIMEOUT</h3><p>phpredis版本的“default_socket_timeout”，通过这个值，一样可以达到同样的效果。那么如果同时设置了<code>default_socket_timeout</code>和<code>OPT_READ_TIMEOUT</code>，优先级是怎样的？</p>\n<p>实测发现，<strong>如果同时存在两个配置，优先使用<code>OPT_READ_TIMEOUT</code>的配置</strong>，这样是合理的。</p>\n<p>文件：redis_commands.c 行：3980</p>\n<figure class=\"highlight c\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">case</span> REDIS_OPT_READ_TIMEOUT:</span><br><span class=\"line\">    redis_sock-&gt;read_timeout = zval_get_double(val);</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (redis_sock-&gt;stream) &#123;</span><br><span class=\"line\">        read_tv.tv_sec  = (<span class=\"keyword\">time_t</span>)redis_sock-&gt;read_timeout;</span><br><span class=\"line\">        read_tv.tv_usec = (<span class=\"keyword\">int</span>)((redis_sock-&gt;read_timeout -</span><br><span class=\"line\">                                    read_tv.tv_sec) * <span class=\"number\">1000000</span>);</span><br><span class=\"line\">        php_stream_set_option(redis_sock-&gt;stream,</span><br><span class=\"line\">                                PHP_STREAM_OPTION_READ_TIMEOUT, <span class=\"number\">0</span>,</span><br><span class=\"line\">                                &amp;read_tv);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    RETURN_TRUE;</span><br></pre></td></tr></table></figure>\n<h2 id=\"pconnect的原理是什么？\"><a href=\"#pconnect的原理是什么？\" class=\"headerlink\" title=\"pconnect的原理是什么？\"></a>pconnect的原理是什么？</h2><p>文件：redis.c 行：947</p>\n<figure class=\"highlight c\"><table><tr><td class=\"code\"><pre><span class=\"line\">PHP_METHOD(Redis, pconnect)</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (redis_connect(INTERNAL_FUNCTION_PARAM_PASSTHRU, <span class=\"number\">1</span>) == FAILURE) &#123;</span><br><span class=\"line\">        RETURN_FALSE;</span><br><span class=\"line\">    &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">        RETURN_TRUE;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>建立连接时，先到<code>连接池</code>获取连接（最后一个），并移除最后一个连接实例。如果连接是活跃的（PHP_STREAM_OPTION_CHECK_LIVENESS），则直接返回。如果连接已失效，则建立新的连接。</p>\n<p>文件：library.c 行：1828</p>\n<figure class=\"highlight c\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">if</span> (redis_sock-&gt;persistent) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (INI_INT(<span class=\"string\">\"redis.pconnect.pooling_enabled\"</span>)) &#123;</span><br><span class=\"line\">        p = redis_sock_get_connection_pool(redis_sock);</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (zend_llist_count(&amp;p-&gt;<span class=\"built_in\">list</span>) &gt; <span class=\"number\">0</span>) &#123;</span><br><span class=\"line\">            redis_sock-&gt;stream = *(php_stream **)zend_llist_get_last(&amp;p-&gt;<span class=\"built_in\">list</span>);</span><br><span class=\"line\">            zend_llist_remove_tail(&amp;p-&gt;<span class=\"built_in\">list</span>);</span><br><span class=\"line\">            <span class=\"comment\">/* Check socket liveness using 0 second timeout */</span></span><br><span class=\"line\">            <span class=\"keyword\">if</span> (php_stream_set_option(redis_sock-&gt;stream, PHP_STREAM_OPTION_CHECK_LIVENESS, <span class=\"number\">0</span>, <span class=\"literal\">NULL</span>) == PHP_STREAM_OPTION_RETURN_OK) &#123;</span><br><span class=\"line\">                redis_sock-&gt;status = REDIS_SOCK_STATUS_CONNECTED;</span><br><span class=\"line\">                <span class=\"keyword\">return</span> SUCCESS;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            php_stream_pclose(redis_sock-&gt;stream);</span><br><span class=\"line\">            p-&gt;nb_active--;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">int</span> limit = INI_INT(<span class=\"string\">\"redis.pconnect.connection_limit\"</span>);</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (limit &gt; <span class=\"number\">0</span> &amp;&amp; p-&gt;nb_active &gt;= limit) &#123;</span><br><span class=\"line\">            redis_sock_set_err(redis_sock, <span class=\"string\">\"Connection limit reached\"</span>, <span class=\"keyword\">sizeof</span>(<span class=\"string\">\"Connection limit reached\"</span>) - <span class=\"number\">1</span>);</span><br><span class=\"line\">            <span class=\"keyword\">return</span> FAILURE;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        gettimeofday(&amp;tv, <span class=\"literal\">NULL</span>);</span><br><span class=\"line\">        persistent_id = strpprintf(<span class=\"number\">0</span>, <span class=\"string\">\"phpredis_%ld%ld\"</span>, tv.tv_sec, tv.tv_usec);</span><br><span class=\"line\">    &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (redis_sock-&gt;persistent_id) &#123;</span><br><span class=\"line\">            persistent_id = strpprintf(<span class=\"number\">0</span>, <span class=\"string\">\"phpredis:%s:%s\"</span>, host, ZSTR_VAL(redis_sock-&gt;persistent_id));</span><br><span class=\"line\">        &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">            persistent_id = strpprintf(<span class=\"number\">0</span>, <span class=\"string\">\"phpredis:%s:%f\"</span>, host, redis_sock-&gt;timeout);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    </span><br><span class=\"line\">    tv.tv_sec  = (<span class=\"keyword\">time_t</span>)redis_sock-&gt;timeout;</span><br><span class=\"line\">    tv.tv_usec = (<span class=\"keyword\">int</span>)((redis_sock-&gt;timeout - tv.tv_sec) * <span class=\"number\">1000000</span>);</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (tv.tv_sec != <span class=\"number\">0</span> || tv.tv_usec != <span class=\"number\">0</span>) &#123;</span><br><span class=\"line\">        tv_ptr = &amp;tv;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    redis_sock-&gt;stream = php_stream_xport_create(host, host_len,</span><br><span class=\"line\">        <span class=\"number\">0</span>, STREAM_XPORT_CLIENT | STREAM_XPORT_CONNECT,</span><br><span class=\"line\">        persistent_id ? ZSTR_VAL(persistent_id) : <span class=\"literal\">NULL</span>,</span><br><span class=\"line\">        tv_ptr, <span class=\"literal\">NULL</span>, &amp;estr, &amp;err);</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (persistent_id) &#123;</span><br><span class=\"line\">        zend_string_release(persistent_id);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (!redis_sock-&gt;stream) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (estr) &#123;</span><br><span class=\"line\">            redis_sock_set_err(redis_sock, ZSTR_VAL(estr), ZSTR_LEN(estr));</span><br><span class=\"line\">            zend_string_release(estr);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> FAILURE;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (p) p-&gt;nb_active++;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/* Attempt to set TCP_NODELAY/TCP_KEEPALIVE if we're not using a unix socket. */</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (!usocket) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">php_netstream_data_t</span> *sock = (<span class=\"keyword\">php_netstream_data_t</span>*)redis_sock-&gt;stream-&gt;abstract;</span><br><span class=\"line\">        err = setsockopt(sock-&gt;socket, IPPROTO_TCP, TCP_NODELAY, (<span class=\"keyword\">char</span>*) &amp;tcp_flag, <span class=\"keyword\">sizeof</span>(tcp_flag));</span><br><span class=\"line\">        PHPREDIS_NOTUSED(err);</span><br><span class=\"line\">        err = setsockopt(sock-&gt;socket, SOL_SOCKET, SO_KEEPALIVE, (<span class=\"keyword\">char</span>*) &amp;redis_sock-&gt;tcp_keepalive, <span class=\"keyword\">sizeof</span>(redis_sock-&gt;tcp_keepalive));</span><br><span class=\"line\">        PHPREDIS_NOTUSED(err);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    php_stream_auto_cleanup(redis_sock-&gt;stream);</span><br><span class=\"line\"></span><br><span class=\"line\">    read_tv.tv_sec  = (<span class=\"keyword\">time_t</span>)redis_sock-&gt;read_timeout;</span><br><span class=\"line\">    read_tv.tv_usec = (<span class=\"keyword\">int</span>)((redis_sock-&gt;read_timeout - read_tv.tv_sec) * <span class=\"number\">1000000</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (read_tv.tv_sec != <span class=\"number\">0</span> || read_tv.tv_usec != <span class=\"number\">0</span>) &#123;</span><br><span class=\"line\">        php_stream_set_option(redis_sock-&gt;stream,PHP_STREAM_OPTION_READ_TIMEOUT,</span><br><span class=\"line\">            <span class=\"number\">0</span>, &amp;read_tv);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    php_stream_set_option(redis_sock-&gt;stream,</span><br><span class=\"line\">        PHP_STREAM_OPTION_WRITE_BUFFER, PHP_STREAM_BUFFER_NONE, <span class=\"literal\">NULL</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">    redis_sock-&gt;status = REDIS_SOCK_STATUS_CONNECTED;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">return</span> SUCCESS;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>重点来了，注意看上面代码中这一段，先卖个关子，后面聊<code>tcp_keepalive</code>的时候会着重分析</p>\n<figure class=\"highlight c\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/* Attempt to set TCP_NODELAY/TCP_KEEPALIVE if we're not using a unix socket. */</span></span><br><span class=\"line\"><span class=\"keyword\">if</span> (!usocket) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">php_netstream_data_t</span> *sock = (<span class=\"keyword\">php_netstream_data_t</span>*)redis_sock-&gt;stream-&gt;abstract;</span><br><span class=\"line\">    err = setsockopt(sock-&gt;socket, IPPROTO_TCP, TCP_NODELAY, (<span class=\"keyword\">char</span>*) &amp;tcp_flag, <span class=\"keyword\">sizeof</span>(tcp_flag));</span><br><span class=\"line\">    PHPREDIS_NOTUSED(err);</span><br><span class=\"line\">    err = setsockopt(sock-&gt;socket, SOL_SOCKET, SO_KEEPALIVE, (<span class=\"keyword\">char</span>*) &amp;redis_sock-&gt;tcp_keepalive, <span class=\"keyword\">sizeof</span>(redis_sock-&gt;tcp_keepalive));</span><br><span class=\"line\">    PHPREDIS_NOTUSED(err);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h2 id=\"redis-server为什么会移除client？\"><a href=\"#redis-server为什么会移除client？\" class=\"headerlink\" title=\"redis-server为什么会移除client？\"></a>redis-server为什么会移除client？</h2><p>先回顾一下TCP协议是怎么<code>keepalive</code>（保活）的。</p>\n<h3 id=\"模拟tcp-keepalive\"><a href=\"#模拟tcp-keepalive\" class=\"headerlink\" title=\"模拟tcp keepalive\"></a>模拟tcp keepalive</h3><ul>\n<li>服务端：nc</li>\n<li>客户端：<a href=\"https://github.com/cyberelf/netcat-keepalive\" target=\"_blank\" rel=\"noopener\">netcat-keepalive</a></li>\n</ul>\n<h3 id=\"开始通信\"><a href=\"#开始通信\" class=\"headerlink\" title=\"开始通信\"></a>开始通信</h3><p>开启一个TCP服务端</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">nc -lp 9999</span><br></pre></td></tr></table></figure>\n<p>启动一个客户端，连接服务端</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">./nckl-linux -K -O 15 -I 5 -P 5 127.0.0.1 9999</span><br></pre></td></tr></table></figure>\n<p>netcat-keepalive的使用参数</p>\n<ul>\n<li>-K Turn on TCP Keepalive</li>\n<li>-O secs TCP keepalive timeout</li>\n<li>-I secs TCP keepalive interval</li>\n<li>-P count TCP keepalive probe count</li>\n</ul>\n<p>如果不设置，默认为<code>系统的默认配置</code>，如linux下</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">sysctl -a | grep keepalive</span><br></pre></td></tr></table></figure>\n<ul>\n<li>net.ipv4.tcp_keepalive_time = 7200</li>\n<li>net.ipv4.tcp_keepalive_probes = 9</li>\n<li>net.ipv4.tcp_keepalive_intvl = 75</li>\n</ul>\n<p>使用tcpdump查看发包情况</p>\n<figure class=\"highlight vim\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"number\">18</span>:<span class=\"number\">15</span>:<span class=\"number\">24.852471</span> IP localhost.<span class=\"number\">45698</span> &gt; localhost.<span class=\"number\">9999</span>: Flags [S], seq <span class=\"number\">253066745</span>, win <span class=\"number\">43690</span>, <span class=\"keyword\">options</span> [mss <span class=\"number\">65495</span>,sackOK,TS val <span class=\"number\">23438901</span> ecr <span class=\"number\">0</span>,nop,wscale <span class=\"number\">7</span>], length <span class=\"number\">0</span></span><br><span class=\"line\"><span class=\"number\">18</span>:<span class=\"number\">15</span>:<span class=\"number\">24.852510</span> IP localhost.<span class=\"number\">9999</span> &gt; localhost.<span class=\"number\">45698</span>: Flags [S.], seq <span class=\"number\">2889588682</span>, ack <span class=\"number\">253066746</span>, win <span class=\"number\">43690</span>, <span class=\"keyword\">options</span> [mss <span class=\"number\">65495</span>,sackOK,TS val <span class=\"number\">23438901</span> ecr <span class=\"number\">23438901</span>,nop,wscale <span class=\"number\">7</span>], length <span class=\"number\">0</span></span><br><span class=\"line\"><span class=\"number\">18</span>:<span class=\"number\">15</span>:<span class=\"number\">24.852542</span> IP localhost.<span class=\"number\">45698</span> &gt; localhost.<span class=\"number\">9999</span>: Flags [.], ack <span class=\"number\">1</span>, win <span class=\"number\">342</span>, <span class=\"keyword\">options</span> [nop,nop,TS val <span class=\"number\">23438901</span> ecr <span class=\"number\">23438901</span>], length <span class=\"number\">0</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"number\">18</span>:<span class=\"number\">15</span>:<span class=\"number\">32.933719</span> IP localhost.<span class=\"number\">45698</span> &gt; localhost.<span class=\"number\">9999</span>: Flags [<span class=\"keyword\">P</span>.], seq <span class=\"number\">1</span>:<span class=\"number\">3</span>, ack <span class=\"number\">1</span>, win <span class=\"number\">342</span>, <span class=\"keyword\">options</span> [nop,nop,TS val <span class=\"number\">23439709</span> ecr <span class=\"number\">23438901</span>], length <span class=\"number\">2</span></span><br><span class=\"line\"><span class=\"number\">18</span>:<span class=\"number\">15</span>:<span class=\"number\">32.933814</span> IP localhost.<span class=\"number\">9999</span> &gt; localhost.<span class=\"number\">45698</span>: Flags [.], ack <span class=\"number\">3</span>, win <span class=\"number\">342</span>, <span class=\"keyword\">options</span> [nop,nop,TS val <span class=\"number\">23439709</span> ecr <span class=\"number\">23439709</span>], length <span class=\"number\">0</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"number\">18</span>:<span class=\"number\">15</span>:<span class=\"number\">47.962915</span> IP localhost.<span class=\"number\">45698</span> &gt; localhost.<span class=\"number\">9999</span>: Flags [.], ack <span class=\"number\">1</span>, win <span class=\"number\">342</span>, <span class=\"keyword\">options</span> [nop,nop,TS val <span class=\"number\">23441216</span> ecr <span class=\"number\">23439709</span>], length <span class=\"number\">0</span></span><br><span class=\"line\"><span class=\"number\">18</span>:<span class=\"number\">15</span>:<span class=\"number\">47.962992</span> IP localhost.<span class=\"number\">9999</span> &gt; localhost.<span class=\"number\">45698</span>: Flags [.], ack <span class=\"number\">3</span>, win <span class=\"number\">342</span>, <span class=\"keyword\">options</span> [nop,nop,TS val <span class=\"number\">23441216</span> ecr <span class=\"number\">23439709</span>], length <span class=\"number\">0</span></span><br><span class=\"line\"><span class=\"number\">18</span>:<span class=\"number\">16</span>:<span class=\"number\">03.321743</span> IP localhost.<span class=\"number\">45698</span> &gt; localhost.<span class=\"number\">9999</span>: Flags [.], ack <span class=\"number\">1</span>, win <span class=\"number\">342</span>, <span class=\"keyword\">options</span> [nop,nop,TS val <span class=\"number\">23442752</span> ecr <span class=\"number\">23441216</span>], length <span class=\"number\">0</span></span><br><span class=\"line\"><span class=\"number\">18</span>:<span class=\"number\">16</span>:<span class=\"number\">03.321802</span> IP localhost.<span class=\"number\">9999</span> &gt; localhost.<span class=\"number\">45698</span>: Flags [.], ack <span class=\"number\">3</span>, win <span class=\"number\">342</span>, <span class=\"keyword\">options</span> [nop,nop,TS val <span class=\"number\">23442752</span> ecr <span class=\"number\">23439709</span>], length <span class=\"number\">0</span></span><br></pre></td></tr></table></figure>\n<p>分三段来看，</p>\n<ul>\n<li>第一段：三次握手，建立连接</li>\n<li>第二段：客户端发包，服务端应答（这里是我在客户端发了一个数字1）</li>\n<li>第三段：每隔15秒发一个<code>keepalive</code>包</li>\n</ul>\n<h2 id=\"使用docker重现问题\"><a href=\"#使用docker重现问题\" class=\"headerlink\" title=\"使用docker重现问题\"></a>使用docker重现问题</h2><h3 id=\"docker-compose建立本地网络\"><a href=\"#docker-compose建立本地网络\" class=\"headerlink\" title=\"docker-compose建立本地网络\"></a>docker-compose建立本地网络</h3><h3 id=\"断开服务端容器的网络\"><a href=\"#断开服务端容器的网络\" class=\"headerlink\" title=\"断开服务端容器的网络\"></a>断开服务端容器的网络</h3><figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">docker network disconnect docker_network docker_redis</span><br></pre></td></tr></table></figure>\n<h3 id=\"phpredis客户端\"><a href=\"#phpredis客户端\" class=\"headerlink\" title=\"phpredis客户端\"></a>phpredis客户端</h3><p>这里出现了两种情况，分别是「已发完PSH包」和「正在发PSH包」</p>\n<ol>\n<li>已发完PSH包，过一段时间，然后连续发几次<code>FIN_WAIT1</code>包，最后断开与服务端的单边连接</li>\n<li>正在发PSH包，不断重试，重试几次后，如果没有得到服务端的确认，直接发一个F包，然后断开与服务端的单边连接</li>\n</ol>\n<p>无论是哪一种情况，当客户端主动断开与服务端的连接时，都会返回一个异常 —— <code>read error on connection</code>，这是可以捕获的。但是，如果在执行<code>brpop</code>操作，当断开后，的确会返回该异常，然而，下一次再执行<code>brpop</code>的时候，就不走网络了，因为连接已经断开，所以redis客户端会直接返回<code>false</code>。</p>\n<h3 id=\"网络恢复？\"><a href=\"#网络恢复？\" class=\"headerlink\" title=\"网络恢复？\"></a>网络恢复？</h3><h4 id=\"docker模拟\"><a href=\"#docker模拟\" class=\"headerlink\" title=\"docker模拟\"></a>docker模拟</h4><figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">docker network connect docker_network docker_redis</span><br></pre></td></tr></table></figure>\n<p>网络恢复的时机也分为两种情况，分别对应断开的时机</p>\n<ol>\n<li>已发完PSH包，此时网络中断，客户端等待1分钟，然后开始发F包。这时，网络恢复了！</li>\n<li>正在发PSH包，此时网络中断，客户端不断重试，在重试结束前，网络恢复了！</li>\n</ol>\n<p>第一种情况：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">16:50:53.555004 IP 2388ad577c4b.38658 &gt; web_docker_redis.web_docker_web_network.6379: Flags [F.], seq 155, ack 21, win 229, options [nop,nop,TS val 19885306 ecr 19879304], length 0</span><br><span class=\"line\">16:50:53.774621 IP 2388ad577c4b.38658 &gt; web_docker_redis.web_docker_web_network.6379: Flags [F.], seq 155, ack 21, win 229, options [nop,nop,TS val 19885328 ecr 19879304], length 0</span><br><span class=\"line\">16:50:53.995675 IP 2388ad577c4b.38658 &gt; web_docker_redis.web_docker_web_network.6379: Flags [F.], seq 155, ack 21, win 229, options [nop,nop,TS val 19885350 ecr 19879304], length 0</span><br><span class=\"line\">16:50:54.425041 IP 2388ad577c4b.38658 &gt; web_docker_redis.web_docker_web_network.6379: Flags [F.], seq 155, ack 21, win 229, options [nop,nop,TS val 19885393 ecr 19879304], length 0</span><br><span class=\"line\">16:50:55.296710 IP 2388ad577c4b.38658 &gt; web_docker_redis.web_docker_web_network.6379: Flags [F.], seq 155, ack 21, win 229, options [nop,nop,TS val 19885480 ecr 19879304], length 0</span><br><span class=\"line\">16:50:57.055424 IP 2388ad577c4b.38658 &gt; web_docker_redis.web_docker_web_network.6379: Flags [F.], seq 155, ack 21, win 229, options [nop,nop,TS val 19885656 ecr 19879304], length 0</span><br><span class=\"line\">16:51:00.495806 IP 2388ad577c4b.38658 &gt; web_docker_redis.web_docker_web_network.6379: Flags [F.], seq 155, ack 21, win 229, options [nop,nop,TS val 19886000 ecr 19879304], length 0</span><br><span class=\"line\">16:51:00.496113 IP web_docker_redis.web_docker_web_network.6379 &gt; 2388ad577c4b.38658: Flags [P.], seq 21:26, ack 156, win 227, options [nop,nop,TS val 19886000 ecr 19886000], length 5: RESP null</span><br><span class=\"line\">16:51:00.496207 IP 2388ad577c4b.38658 &gt; web_docker_redis.web_docker_web_network.6379: Flags [R], seq 721889775, win 0, length 0</span><br></pre></td></tr></table></figure>\n<p><strong>因为客户端已经发了F包，就算这时候网络恢复了，也会断开连接，最终结果为，客户端异常</strong></p>\n<p>第二种情况：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">16:59:45.126281 IP 2388ad577c4b.38666 &gt; web_docker_redis.web_docker_web_network.6379: Flags [P.], seq 123:155, ack 21, win 229, options [nop,nop,TS val 19938525 ecr 19938424], length 32: RESP <span class=\"string\">\"BRPOP\"</span> <span class=\"string\">\"test\"</span> <span class=\"string\">\"3\"</span></span><br><span class=\"line\">16:59:45.126422 IP web_docker_redis.web_docker_web_network.6379 &gt; 2388ad577c4b.38666: Flags [.], ack 155, win 227, options [nop,nop,TS val 19938525 ecr 19938525], length 0</span><br><span class=\"line\">16:59:48.191229 IP web_docker_redis.web_docker_web_network.6379 &gt; 2388ad577c4b.38666: Flags [P.], seq 21:26, ack 155, win 227, options [nop,nop,TS val 19938831 ecr 19938525], length 5: RESP null</span><br><span class=\"line\">16:59:48.191365 IP 2388ad577c4b.38666 &gt; web_docker_redis.web_docker_web_network.6379: Flags [.], ack 26, win 229, options [nop,nop,TS val 19938831 ecr 19938831], length 0</span><br><span class=\"line\">16:59:49.196785 IP 2388ad577c4b.38666 &gt; web_docker_redis.web_docker_web_network.6379: Flags [P.], seq 155:187, ack 26, win 229, options [nop,nop,TS val 19938932 ecr 19938831], length 32: RESP <span class=\"string\">\"BRPOP\"</span> <span class=\"string\">\"test\"</span> <span class=\"string\">\"3\"</span></span><br><span class=\"line\">16:59:49.196919 IP web_docker_redis.web_docker_web_network.6379 &gt; 2388ad577c4b.38666: Flags [.], ack 187, win 227, options [nop,nop,TS val 19938932 ecr 19938932], length 0</span><br><span class=\"line\">16:59:52.276131 IP web_docker_redis.web_docker_web_network.6379 &gt; 2388ad577c4b.38666: Flags [P.], seq 26:31, ack 187, win 227, options [nop,nop,TS val 19939240 ecr 19938932], length 5: RESP null</span><br><span class=\"line\">16:59:52.276197 IP 2388ad577c4b.38666 &gt; web_docker_redis.web_docker_web_network.6379: Flags [.], ack 31, win 229, options [nop,nop,TS val 19939240 ecr 19939240], length 0</span><br><span class=\"line\">16:59:53.156963 IP 2388ad577c4b.38662 &gt; web_docker_redis.web_docker_web_network.6379: Flags [F.], seq 219, ack 31, win 229, options [nop,nop,TS val 19939328 ecr 19930202], length 0</span><br><span class=\"line\">16:59:53.279121 IP 2388ad577c4b.38666 &gt; web_docker_redis.web_docker_web_network.6379: Flags [P.], seq 187:219, ack 31, win 229, options [nop,nop,TS val 19939340 ecr 19939240], length 32: RESP <span class=\"string\">\"BRPOP\"</span> <span class=\"string\">\"test\"</span> <span class=\"string\">\"3\"</span></span><br><span class=\"line\">16:59:53.496082 IP 2388ad577c4b.38666 &gt; web_docker_redis.web_docker_web_network.6379: Flags [P.], seq 187:219, ack 31, win 229, options [nop,nop,TS val 19939362 ecr 19939240], length 32: RESP <span class=\"string\">\"BRPOP\"</span> <span class=\"string\">\"test\"</span> <span class=\"string\">\"3\"</span></span><br><span class=\"line\">16:59:53.715753 IP 2388ad577c4b.38666 &gt; web_docker_redis.web_docker_web_network.6379: Flags [P.], seq 187:219, ack 31, win 229, options [nop,nop,TS val 19939384 ecr 19939240], length 32: RESP <span class=\"string\">\"BRPOP\"</span> <span class=\"string\">\"test\"</span> <span class=\"string\">\"3\"</span></span><br><span class=\"line\">16:59:54.147245 IP 2388ad577c4b.38666 &gt; web_docker_redis.web_docker_web_network.6379: Flags [P.], seq 187:219, ack 31, win 229, options [nop,nop,TS val 19939427 ecr 19939240], length 32: RESP <span class=\"string\">\"BRPOP\"</span> <span class=\"string\">\"test\"</span> <span class=\"string\">\"3\"</span></span><br><span class=\"line\">16:59:54.997751 IP 2388ad577c4b.38666 &gt; web_docker_redis.web_docker_web_network.6379: Flags [P.], seq 187:219, ack 31, win 229, options [nop,nop,TS val 19939512 ecr 19939240], length 32: RESP <span class=\"string\">\"BRPOP\"</span> <span class=\"string\">\"test\"</span> <span class=\"string\">\"3\"</span></span><br><span class=\"line\">16:59:56.756647 IP 2388ad577c4b.38666 &gt; web_docker_redis.web_docker_web_network.6379: Flags [P.], seq 187:219, ack 31, win 229, options [nop,nop,TS val 19939688 ecr 19939240], length 32: RESP <span class=\"string\">\"BRPOP\"</span> <span class=\"string\">\"test\"</span> <span class=\"string\">\"3\"</span></span><br><span class=\"line\">17:00:00.197701 IP 2388ad577c4b.38666 &gt; web_docker_redis.web_docker_web_network.6379: Flags [P.], seq 187:219, ack 31, win 229, options [nop,nop,TS val 19940032 ecr 19939240], length 32: RESP <span class=\"string\">\"BRPOP\"</span> <span class=\"string\">\"test\"</span> <span class=\"string\">\"3\"</span></span><br><span class=\"line\">17:00:07.238143 IP 2388ad577c4b.38666 &gt; web_docker_redis.web_docker_web_network.6379: Flags [P.], seq 187:219, ack 31, win 229, options [nop,nop,TS val 19940736 ecr 19939240], length 32: RESP <span class=\"string\">\"BRPOP\"</span> <span class=\"string\">\"test\"</span> <span class=\"string\">\"3\"</span></span><br><span class=\"line\">17:00:21.282035 IP 2388ad577c4b.38666 &gt; web_docker_redis.web_docker_web_network.6379: Flags [P.], seq 187:219, ack 31, win 229, options [nop,nop,TS val 19942144 ecr 19939240], length 32: RESP <span class=\"string\">\"BRPOP\"</span> <span class=\"string\">\"test\"</span> <span class=\"string\">\"3\"</span></span><br><span class=\"line\">17:00:48.768290 IP 2388ad577c4b.38666 &gt; web_docker_redis.web_docker_web_network.6379: Flags [P.], seq 187:219, ack 31, win 229, options [nop,nop,TS val 19944896 ecr 19939240], length 32: RESP <span class=\"string\">\"BRPOP\"</span> <span class=\"string\">\"test\"</span> <span class=\"string\">\"3\"</span></span><br><span class=\"line\">17:00:48.768815 IP web_docker_redis.web_docker_web_network.6379 &gt; 2388ad577c4b.38666: Flags [.], ack 219, win 227, options [nop,nop,TS val 19944896 ecr 19944896], length 0</span><br><span class=\"line\">17:00:51.830821 IP web_docker_redis.web_docker_web_network.6379 &gt; 2388ad577c4b.38666: Flags [P.], seq 31:36, ack 219, win 227, options [nop,nop,TS val 19945202 ecr 19944896], length 5: RESP null</span><br></pre></td></tr></table></figure>\n<p><strong>在客户端重试发PSH包的时候，网络恢复了，连接还在，服务端也会继续返回结果，客户端不再阻塞，继续运行</strong></p>\n<h2 id=\"解决方案：忙连接\"><a href=\"#解决方案：忙连接\" class=\"headerlink\" title=\"解决方案：忙连接\"></a>解决方案：忙连接</h2><ol>\n<li>使用php.ini的<code>default_socket_timeout</code>，或者phpredis的<code>OPT_READ_TIMEOUT</code>,设置一个自定义值，比如<code>60s</code></li>\n<li>设置connect函数的<code>timeout</code>为一个自定义值，如<code>10s</code></li>\n<li>在客户端断开连接并报异常<code>read error on connection</code>时，进行异常捕获，开启一个阻塞循环，不断的重连redis，只有连接成功后才返回</li>\n</ol>\n<h3 id=\"代码\"><a href=\"#代码\" class=\"headerlink\" title=\"代码\"></a>代码</h3><figure class=\"highlight php\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">PopData</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"comment\">/** <span class=\"doctag\">@var</span> Redis */</span></span><br><span class=\"line\">    <span class=\"keyword\">private</span> $redis = <span class=\"keyword\">null</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">start</span><span class=\"params\">()</span></span></span><br><span class=\"line\"><span class=\"function\">    </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">$this</span>-&gt;newRedis();</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">while</span> (<span class=\"keyword\">true</span>) &#123;</span><br><span class=\"line\">            $data = <span class=\"keyword\">$this</span>-&gt;popData();</span><br><span class=\"line\">            var_dump([<span class=\"string\">'data'</span> =&gt; $data, <span class=\"string\">'time'</span> =&gt; date(<span class=\"string\">'Y-m-d H:i:s'</span>, time())]);</span><br><span class=\"line\">            sleep(<span class=\"number\">1</span>);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * 连接Redis</span></span><br><span class=\"line\"><span class=\"comment\">     */</span> </span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">newRedis</span><span class=\"params\">()</span></span></span><br><span class=\"line\"><span class=\"function\">    </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">$this</span>-&gt;redis = <span class=\"keyword\">new</span> \\Redis();</span><br><span class=\"line\">        <span class=\"keyword\">$this</span>-&gt;redis-&gt;connect(<span class=\"string\">'192.168.48.4'</span>, <span class=\"number\">6379</span>, <span class=\"number\">3</span>);</span><br><span class=\"line\">        <span class=\"keyword\">$this</span>-&gt;redis-&gt;auth(<span class=\"number\">123456</span>);</span><br><span class=\"line\">        <span class=\"keyword\">$this</span>-redis-&gt;setOption(\\Redis::OPT_READ_TIMEOUT, <span class=\"number\">60</span>)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * brpop</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@return</span> array</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">popData</span><span class=\"params\">()</span></span></span><br><span class=\"line\"><span class=\"function\">    </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">            <span class=\"comment\">// 发完Fin包后，直接从redis返回，不走网络请求。这里已经结束socket连接了，所以，即使网络情况好了也不会重连</span></span><br><span class=\"line\">            $data = <span class=\"keyword\">$this</span>-&gt;redis-&gt;brPop([<span class=\"string\">'test'</span>], <span class=\"number\">3</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">            <span class=\"keyword\">return</span> $data;</span><br><span class=\"line\"></span><br><span class=\"line\">        &#125; <span class=\"keyword\">catch</span> (\\<span class=\"keyword\">Exception</span> $e) &#123;</span><br><span class=\"line\">            <span class=\"comment\">// 只打印了一次</span></span><br><span class=\"line\">            var_dump( $e-&gt;getMessage() );</span><br><span class=\"line\"></span><br><span class=\"line\">            <span class=\"comment\">// 进入重连逻辑</span></span><br><span class=\"line\">            <span class=\"keyword\">$this</span>-&gt;reconnect();</span><br><span class=\"line\"></span><br><span class=\"line\">            <span class=\"comment\">// 重连成功，返回结果</span></span><br><span class=\"line\">            <span class=\"keyword\">return</span> [];</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * 重连redis</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">reconnect</span><span class=\"params\">()</span></span></span><br><span class=\"line\"><span class=\"function\">    </span>&#123;</span><br><span class=\"line\">        $isLostConnect = <span class=\"keyword\">true</span>;</span><br><span class=\"line\">        <span class=\"keyword\">while</span>($isLostConnect) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">                <span class=\"keyword\">$this</span>-&gt;newRedis();</span><br><span class=\"line\"></span><br><span class=\"line\">                <span class=\"comment\">// 重连成功</span></span><br><span class=\"line\">                <span class=\"keyword\">if</span> (<span class=\"keyword\">$this</span>-&gt;redis-&gt;ping() === <span class=\"string\">'+PONG'</span>) &#123;</span><br><span class=\"line\">                    $isLostConnect = <span class=\"keyword\">false</span>;</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">            &#125; <span class=\"keyword\">catch</span> (\\<span class=\"keyword\">Exception</span> $e) &#123;</span><br><span class=\"line\">                var_dump($e-&gt;getMessage());</span><br><span class=\"line\"></span><br><span class=\"line\">                sleep(<span class=\"number\">3</span>);</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h3 id=\"系统与网络情况\"><a href=\"#系统与网络情况\" class=\"headerlink\" title=\"系统与网络情况\"></a>系统与网络情况</h3><p>tcpdump看下，在定时重连期间，客户端的发包情况</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">7:33:18.326086 IP 2388ad577c4b.38700 &gt; web_docker_redis.web_docker_web_network.6379: Flags [F.], seq 91, ack 11, win 229, options [nop,nop,TS val 20140076 ecr 20134070], length 0</span><br><span class=\"line\">17:33:18.326556 IP 2388ad577c4b.38702 &gt; web_docker_redis.web_docker_web_network.6379: Flags [S], seq 3300121440, win 29200, options [mss 1460,sackOK,TS val 20140076 ecr 0,nop,wscale 7], length 0</span><br><span class=\"line\">17:33:18.544393 IP 2388ad577c4b.38700 &gt; web_docker_redis.web_docker_web_network.6379: Flags [F.], seq 91, ack 11, win 229, options [nop,nop,TS val 20140098 ecr 20134070], length 0</span><br><span class=\"line\">17:33:18.767654 IP 2388ad577c4b.38700 &gt; web_docker_redis.web_docker_web_network.6379: Flags [F.], seq 91, ack 11, win 229, options [nop,nop,TS val 20140120 ecr 20134070], length 0</span><br><span class=\"line\">17:33:19.194564 IP 2388ad577c4b.38700 &gt; web_docker_redis.web_docker_web_network.6379: Flags [F.], seq 91, ack 11, win 229, options [nop,nop,TS val 20140163 ecr 20134070], length 0</span><br><span class=\"line\">17:33:19.404336 IP 2388ad577c4b.38702 &gt; web_docker_redis.web_docker_web_network.6379: Flags [S], seq 3300121440, win 29200, options [mss 1460,sackOK,TS val 20140184 ecr 0,nop,wscale 7], length 0</span><br><span class=\"line\">17:33:20.044337 IP 2388ad577c4b.38700 &gt; web_docker_redis.web_docker_web_network.6379: Flags [F.], seq 91, ack 11, win 229, options [nop,nop,TS val 20140248 ecr 20134070], length 0</span><br><span class=\"line\">17:33:21.807982 IP 2388ad577c4b.38700 &gt; web_docker_redis.web_docker_web_network.6379: Flags [F.], seq 91, ack 11, win 229, options [nop,nop,TS val 20140424 ecr 20134070], length 0</span><br><span class=\"line\">17:33:24.329065 IP 2388ad577c4b.38704 &gt; web_docker_redis.web_docker_web_network.6379: Flags [S], seq 717381143, win 29200, options [mss 1460,sackOK,TS val 20140676 ecr 0,nop,wscale 7], length 0</span><br><span class=\"line\">17:33:25.255734 IP 2388ad577c4b.38700 &gt; web_docker_redis.web_docker_web_network.6379: Flags [F.], seq 91, ack 11, win 229, options [nop,nop,TS val 20140769 ecr 20134070], length 0</span><br><span class=\"line\">17:33:25.403884 IP 2388ad577c4b.38704 &gt; web_docker_redis.web_docker_web_network.6379: Flags [S], seq 717381143, win 29200, options [mss 1460,sackOK,TS val 20140784 ecr 0,nop,wscale 7], length 0</span><br><span class=\"line\">17:34:59.783849 IP 2388ad577c4b.38738 &gt; web_docker_redis.web_docker_web_network.6379: Flags [S], seq 1730851263, win 29200, options [mss 1460,sackOK,TS val 20150126 ecr 0,nop,wscale 7], length 0</span><br><span class=\"line\">17:34:59.784023 IP web_docker_redis.web_docker_web_network.6379 &gt; 2388ad577c4b.38738: Flags [S.], seq 1414026707, ack 1730851264, win 28960, options [mss 1460,sackOK,TS val 20150232 ecr 20150126,nop,wscale 7], length 0</span><br></pre></td></tr></table></figure>\n<p>可以发现，有两个线程正在疯狂的“试探”，一个想要结束，一个想要连接。</p>\n<p>netstat看下，在定时重连期间，客户端的连接状态</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">tcp        0      1 192.168.48.5:38700      192.168.48.4:6379       FIN_WAIT1   -</span><br><span class=\"line\">tcp        0      1 192.168.48.5:38728      192.168.48.4:6379       SYN_SENT    682/php</span><br></pre></td></tr></table></figure>\n<p>由于“连接线程”是通过<code>new Redis</code>来实现的，所以端口会一直变化。</p>\n<h2 id=\"OPT-TCP-KEEPALIVE-到底是什么？怎么用？\"><a href=\"#OPT-TCP-KEEPALIVE-到底是什么？怎么用？\" class=\"headerlink\" title=\"OPT_TCP_KEEPALIVE 到底是什么？怎么用？\"></a>OPT_TCP_KEEPALIVE 到底是什么？怎么用？</h2><p>在官方文档中，根本找不到这个选项的说明。查看源码发现，phpredis在建立连接时，<code>tcp_keepalive</code>参数默认为 <code>0</code></p>\n<p>文件：library.c 行：1783</p>\n<figure class=\"highlight c\"><table><tr><td class=\"code\"><pre><span class=\"line\">redis_sock-&gt;tcp_keepalive = <span class=\"number\">0</span>;</span><br></pre></td></tr></table></figure>\n<p>可以通过函数<code>setOption</code>来设置<code>tcp_keepalive</code>的值</p>\n<p>文件：redis_commands.c 行：3991</p>\n<figure class=\"highlight c\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">case</span> REDIS_OPT_TCP_KEEPALIVE:</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/* Don't set TCP_KEEPALIVE if we're using a unix socket. */</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (ZSTR_VAL(redis_sock-&gt;host)[<span class=\"number\">0</span>] == <span class=\"string\">'/'</span> &amp;&amp; redis_sock-&gt;port &lt; <span class=\"number\">1</span>) &#123;</span><br><span class=\"line\">        RETURN_FALSE;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    tcp_keepalive = zval_get_long(val) &gt; <span class=\"number\">0</span> ? <span class=\"number\">1</span> : <span class=\"number\">0</span>;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (redis_sock-&gt;tcp_keepalive == tcp_keepalive) &#123;</span><br><span class=\"line\">        RETURN_TRUE;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (redis_sock-&gt;stream) &#123;</span><br><span class=\"line\">        <span class=\"comment\">/* set TCP_KEEPALIVE */</span></span><br><span class=\"line\">        sock = (<span class=\"keyword\">php_netstream_data_t</span>*)redis_sock-&gt;stream-&gt;abstract;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (setsockopt(sock-&gt;socket, SOL_SOCKET, SO_KEEPALIVE, (<span class=\"keyword\">char</span>*)&amp;tcp_keepalive,</span><br><span class=\"line\">                    <span class=\"keyword\">sizeof</span>(tcp_keepalive)) == <span class=\"number\">-1</span>) &#123;</span><br><span class=\"line\">            RETURN_FALSE;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        redis_sock-&gt;tcp_keepalive = tcp_keepalive;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    RETURN_TRUE;</span><br></pre></td></tr></table></figure>\n<p>刚刚谈pconnect的时候，聊到下面这个地方，现在着重看看</p>\n<figure class=\"highlight c\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/* Attempt to set TCP_NODELAY/TCP_KEEPALIVE if we're not using a unix socket. */</span></span><br><span class=\"line\"><span class=\"keyword\">if</span> (!usocket) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">php_netstream_data_t</span> *sock = (<span class=\"keyword\">php_netstream_data_t</span>*)redis_sock-&gt;stream-&gt;abstract;</span><br><span class=\"line\">    err = setsockopt(sock-&gt;socket, IPPROTO_TCP, TCP_NODELAY, (<span class=\"keyword\">char</span>*) &amp;tcp_flag, <span class=\"keyword\">sizeof</span>(tcp_flag));</span><br><span class=\"line\">    PHPREDIS_NOTUSED(err);</span><br><span class=\"line\">    err = setsockopt(sock-&gt;socket, SOL_SOCKET, SO_KEEPALIVE, (<span class=\"keyword\">char</span>*) &amp;redis_sock-&gt;tcp_keepalive, <span class=\"keyword\">sizeof</span>(redis_sock-&gt;tcp_keepalive));</span><br><span class=\"line\">    PHPREDIS_NOTUSED(err);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>在连接的时候，会通过判断<code>host</code>来看是否开启<code>TCP_KEEPALIVE</code>，前面在说connect函数的时候了解到，host由下面几种：</p>\n<p><em>host</em>: string. can be </p>\n<ul>\n<li>a host（ip/域名）</li>\n<li>or the path to a unix domain socket. （本地域socket）</li>\n<li>Starting from version 5.0.0 it is possible to specify schema</li>\n</ul>\n<p>我把这句话拆开来看会比较清晰，上面这段代码中可以看到，如果是<code>unix domain socket</code>，则不会启用<code>TCP_KEEPALIVE</code>。然而，在<code>connect</code>阶段，根本没有这个配置项，也就是说，真正设置该配置的地方在别处..</p>\n<h3 id=\"docker模拟-1\"><a href=\"#docker模拟-1\" class=\"headerlink\" title=\"docker模拟\"></a>docker模拟</h3><h4 id=\"代码-1\"><a href=\"#代码-1\" class=\"headerlink\" title=\"代码\"></a>代码</h4><p><strong>test.php</strong></p>\n<figure class=\"highlight php\"><table><tr><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\">$redis = <span class=\"keyword\">new</span> \\Redis();</span><br><span class=\"line\">$redis-&gt;connect(<span class=\"string\">'192.168.80.2'</span>, <span class=\"number\">6379</span>);</span><br><span class=\"line\">$redis-&gt;auth(<span class=\"number\">123456</span>);</span><br><span class=\"line\">$redis-&gt;setOption(\\Redis::OPT_TCP_KEEPALIVE, <span class=\"number\">10</span>);</span><br><span class=\"line\">var_dump($redis-&gt;ping());</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">while</span>(<span class=\"keyword\">true</span>) &#123;</span><br><span class=\"line\">    </span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>通过<code>host</code>方式连接服务端，并设置选项<code>OPT_TCP_KEEPALIVE</code>为<code>10s</code>，通过ping查看连通性，然后进行<code>阻塞</code>操作。<code>lsof</code>看下，确实使用<code>TCP</code>方式。</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">php     899 root    3u  IPv4 741397      0t0     TCP 2388ad577c4b:38782-&gt;web_docker_redis.web_docker_web_network:6379 (ESTABLISHED)</span><br></pre></td></tr></table></figure>\n<p>断开服务端容器的网络发现，在设定条件下，并不会发keepalive包，可能与docker的实现机制有关，自动转化为unix domain socket?目前不确定是<code>phpredis</code>的问题还是<code>docker网络机制</code>的问题。接下来，先看看phpredis究竟有没有执行到相应的逻辑。</p>\n<h4 id=\"非debug模式\"><a href=\"#非debug模式\" class=\"headerlink\" title=\"非debug模式\"></a>非debug模式</h4><p>为了看这段代码是否被执行到，我改一下phpredis的源码，在这里打印一下日志，再重新编译。</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">curl -O http://pecl.php.net/get/redis-4.0.2.tgz</span><br><span class=\"line\">tar zxvf redis-4.0.2.tgz</span><br><span class=\"line\"><span class=\"built_in\">cd</span> redis-4.0.2</span><br><span class=\"line\">vim library.c</span><br></pre></td></tr></table></figure>\n<p>找到<code>redis_sock_connect</code>函数，在下面的代码中，加入<code>打印日志</code>的代码</p>\n<figure class=\"highlight c\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/* Attempt to set TCP_NODELAY/TCP_KEEPALIVE if we're not using a unix socket. */</span></span><br><span class=\"line\"><span class=\"keyword\">if</span> (!usocket) &#123;</span><br><span class=\"line\">    <span class=\"built_in\">printf</span>(<span class=\"string\">\"open keepalive\"</span>);</span><br><span class=\"line\">    <span class=\"keyword\">php_netstream_data_t</span> *sock = (<span class=\"keyword\">php_netstream_data_t</span>*)redis_sock-&gt;stream-&gt;abstract;</span><br><span class=\"line\">    err = setsockopt(sock-&gt;socket, IPPROTO_TCP, TCP_NODELAY, (<span class=\"keyword\">char</span>*) &amp;tcp_flag, <span class=\"keyword\">sizeof</span>(tcp_flag));</span><br><span class=\"line\">    PHPREDIS_NOTUSED(err);</span><br><span class=\"line\">    err = setsockopt(sock-&gt;socket, SOL_SOCKET, SO_KEEPALIVE, (<span class=\"keyword\">char</span>*) &amp;redis_sock-&gt;tcp_keepalive, <span class=\"keyword\">sizeof</span>(redis_sock-&gt;tcp_keepalive));</span><br><span class=\"line\">    PHPREDIS_NOTUSED(err);</span><br><span class=\"line\">&#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">    <span class=\"built_in\">printf</span>(<span class=\"string\">\"not open keepalive\"</span>);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>这样做发现，打印的结果是<code>open keepalive</code>。要想得到整个<code>调用栈</code>以及<code>打印变量</code>，不是很方便。下面使用gdb来调试，设置断点。</p>\n<h4 id=\"debug模式\"><a href=\"#debug模式\" class=\"headerlink\" title=\"debug模式\"></a>debug模式</h4><p>为了使用<code>gdb</code>断点调试PHP扩展，需要把PHP编译为<code>debug</code>模式，然后再把phpredis重新编译一次</p>\n<p><strong>编译php</strong></p>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">wget -c https://github.com/php/php-src/archive/php-7.1.30.tar.gz</span><br><span class=\"line\">tar zxvf php-7.1.30.tar.gz</span><br><span class=\"line\"><span class=\"built_in\">cd</span> php-src-php-7.1.30</span><br><span class=\"line\">./buildconf --force</span><br><span class=\"line\">./configure \\</span><br><span class=\"line\">--prefix=/usr/<span class=\"built_in\">local</span>/php7.1.30 \\</span><br><span class=\"line\">--<span class=\"built_in\">exec</span>-prefix=/usr/<span class=\"built_in\">local</span>/php7.1.30 \\</span><br><span class=\"line\">--bindir=/usr/<span class=\"built_in\">local</span>/php7.1.30/bin \\</span><br><span class=\"line\">--sbindir=/usr/<span class=\"built_in\">local</span>/php7.1.30/sbin \\</span><br><span class=\"line\">--includedir=/usr/<span class=\"built_in\">local</span>/php7.1.30/include \\</span><br><span class=\"line\">--libdir=/usr/<span class=\"built_in\">local</span>/php7.1.30/lib/php \\</span><br><span class=\"line\">--mandir=/usr/<span class=\"built_in\">local</span>/php7.1.30/php/man \\</span><br><span class=\"line\">--with-config-file-path=/usr/<span class=\"built_in\">local</span>/php7.1.30/etc \\</span><br><span class=\"line\">--<span class=\"built_in\">enable</span>-pcntl \\</span><br><span class=\"line\">--with-curl \\</span><br><span class=\"line\">--<span class=\"built_in\">enable</span>-debug \\</span><br><span class=\"line\">--<span class=\"built_in\">enable</span>-cli</span><br><span class=\"line\">make &amp;&amp; make install</span><br><span class=\"line\">cp php-src-php-7.1.30/php.ini-development /usr/<span class=\"built_in\">local</span>/php7.1.30/etc/php.ini</span><br></pre></td></tr></table></figure>\n<p><strong>编译phpredis</strong></p>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">curl -O http://pecl.php.net/get/redis-4.0.2.tgz</span><br><span class=\"line\">tar zxvf redis-4.0.2.tgz</span><br><span class=\"line\">/usr/<span class=\"built_in\">local</span>/php7.1.30/bin/phpize</span><br><span class=\"line\">./configure --with-php-config=/usr/<span class=\"built_in\">local</span>/php7.1.30/bin/php-config</span><br><span class=\"line\">make &amp;&amp; make install</span><br><span class=\"line\">vim /usr/<span class=\"built_in\">local</span>/php7.1.30/etc/php.ini</span><br><span class=\"line\">// 添加extension=redis.so到文件尾</span><br></pre></td></tr></table></figure>\n<p>编译完成后，会发现安装目录为 <code>/usr/local/php7.1.30/lib/php/extensions/debug-non-zts-20160303</code></p>\n<p><strong>开始gdb调试</strong></p>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">gdb /usr/<span class=\"built_in\">local</span>/php7.1.30/bin/php</span><br><span class=\"line\"></span><br><span class=\"line\">Reading symbols from /usr/<span class=\"built_in\">local</span>/php7.1.30/bin/php...done.</span><br><span class=\"line\">(gdb) b redis_sock_connect</span><br><span class=\"line\">Function <span class=\"string\">\"redis_sock_connect\"</span> not defined.</span><br><span class=\"line\">Make breakpoint pending on future shared library load? (y or [n]) y</span><br><span class=\"line\">Breakpoint 1 (redis_sock_connect) pending.</span><br><span class=\"line\">(gdb) run test.php</span><br><span class=\"line\">Starting program: /usr/<span class=\"built_in\">local</span>/php7.1.30/bin/php test.php</span><br><span class=\"line\">95337</span><br><span class=\"line\">Breakpoint 1, redis_sock_connect (redis_sock=0x7ffff687e0e0) at /data/tools/redis-4.0.2/library.c:1416</span><br><span class=\"line\">1416\t&#123;</span><br><span class=\"line\">(gdb) n</span><br><span class=\"line\">1417\t    struct timeval tv, read_tv, *tv_ptr = NULL;</span><br><span class=\"line\">(gdb) n</span><br><span class=\"line\">1418\t    char host[1024], *persistent_id = NULL;</span><br><span class=\"line\">(gdb) n</span><br><span class=\"line\">1419\t    const char *fmtstr = <span class=\"string\">\"%s:%d\"</span>;</span><br><span class=\"line\">(gdb) n</span><br><span class=\"line\">1420\t    int host_len, usocket = 0, err = 0;</span><br><span class=\"line\">(gdb) n</span><br><span class=\"line\">1422\t    int tcp_flag = 1;</span><br><span class=\"line\">(gdb) n</span><br><span class=\"line\">1426\t    zend_string *estr = NULL;</span><br><span class=\"line\">(gdb) n</span><br><span class=\"line\">1429\t    <span class=\"keyword\">if</span> (redis_sock-&gt;stream != NULL) &#123;</span><br><span class=\"line\">(gdb) n</span><br><span class=\"line\">1433\t    tv.tv_sec  = (time_t)redis_sock-&gt;timeout;</span><br><span class=\"line\">(gdb) n</span><br><span class=\"line\">1434\t    tv.tv_usec = (int)((redis_sock-&gt;timeout - tv.tv_sec) * 1000000);</span><br><span class=\"line\">(gdb) n</span><br><span class=\"line\">1435\t    <span class=\"keyword\">if</span>(tv.tv_sec != 0 || tv.tv_usec != 0) &#123;</span><br><span class=\"line\">(gdb) n</span><br><span class=\"line\">1439\t    read_tv.tv_sec  = (time_t)redis_sock-&gt;read_timeout;</span><br><span class=\"line\">(gdb) n</span><br><span class=\"line\">1440\t    read_tv.tv_usec = (int)((redis_sock-&gt;read_timeout-read_tv.tv_sec)*1000000);</span><br><span class=\"line\">(gdb) n</span><br><span class=\"line\">1442\t    <span class=\"keyword\">if</span> (ZSTR_VAL(redis_sock-&gt;host)[0] == <span class=\"string\">'/'</span> &amp;&amp; redis_sock-&gt;port &lt; 1) &#123;</span><br><span class=\"line\">(gdb) n</span><br><span class=\"line\">1446\t        <span class=\"keyword\">if</span>(redis_sock-&gt;port == 0)</span><br><span class=\"line\">(gdb) n</span><br><span class=\"line\">1452\t        <span class=\"keyword\">if</span> (strchr(ZSTR_VAL(redis_sock-&gt;host), <span class=\"string\">':'</span>) != NULL) &#123;</span><br><span class=\"line\">(gdb) n</span><br><span class=\"line\">1456\t        host_len = snprintf(host, sizeof(host), fmtstr, ZSTR_VAL(redis_sock-&gt;host), redis_sock-&gt;port);</span><br><span class=\"line\">(gdb) n</span><br><span class=\"line\">1459\t    <span class=\"keyword\">if</span> (redis_sock-&gt;persistent) &#123;</span><br><span class=\"line\">(gdb) n</span><br><span class=\"line\">1469\t    redis_sock-&gt;stream = php_stream_xport_create(host, host_len,</span><br><span class=\"line\">(gdb) n</span><br><span class=\"line\">1473\t    <span class=\"keyword\">if</span> (persistent_id) &#123;</span><br><span class=\"line\">(gdb) n</span><br><span class=\"line\">1477\t    <span class=\"keyword\">if</span> (!redis_sock-&gt;stream) &#123;</span><br><span class=\"line\">(gdb) n</span><br><span class=\"line\">1491\t    sock = (php_netstream_data_t*)redis_sock-&gt;stream-&gt;abstract;</span><br><span class=\"line\">(gdb) p persistent_id</span><br><span class=\"line\"><span class=\"variable\">$1</span> = 0x0</span><br><span class=\"line\">(gdb) n</span><br><span class=\"line\">1492\t    <span class=\"keyword\">if</span> (!usocket) &#123;</span><br><span class=\"line\">(gdb) p usocket</span><br><span class=\"line\"><span class=\"variable\">$2</span> = 0</span><br><span class=\"line\">(gdb) n</span><br><span class=\"line\">1493\t\t<span class=\"built_in\">printf</span>(<span class=\"string\">\"open keepalive\"</span>);</span><br><span class=\"line\">(gdb) n</span><br><span class=\"line\">1494\t        err = setsockopt(sock-&gt;socket, IPPROTO_TCP, TCP_NODELAY, (char*) &amp;tcp_flag, sizeof(tcp_flag));</span><br><span class=\"line\">(gdb) n</span><br><span class=\"line\">1496\t        err = setsockopt(sock-&gt;socket, SOL_SOCKET, SO_KEEPALIVE, (char*) &amp;redis_sock-&gt;tcp_keepalive, sizeof(redis_sock-&gt;tcp_keepalive));</span><br><span class=\"line\">(gdb) p redis_sock-&gt;tcp_keepalive</span><br><span class=\"line\"><span class=\"variable\">$5</span> = 0</span><br></pre></td></tr></table></figure>\n<p>通过上面的gdb调试纪录可以发现，</p>\n<ol>\n<li><code>usocket</code>的值为<code>0</code>，说明docker没有做什么“小动作”，host模式没问题。</li>\n<li>在<code>connect</code>阶段，<code>tcp_keepalive</code>默认为<code>0</code></li>\n</ol>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">(gdb) b redis_setoption_handler</span><br><span class=\"line\">Function <span class=\"string\">\"redis_setoption_handler\"</span> not defined.</span><br><span class=\"line\">Make breakpoint pending on future shared library load? (y or [n]) y</span><br><span class=\"line\">Breakpoint 1 (redis_setoption_handler) pending.</span><br><span class=\"line\">(gdb) run /data/webapp/<span class=\"built_in\">test</span>/test.php</span><br><span class=\"line\">Starting program: /usr/<span class=\"built_in\">local</span>/php7.1.30/bin/php /data/webapp/<span class=\"built_in\">test</span>/test.php</span><br><span class=\"line\">6</span><br><span class=\"line\">open keepalive</span><br><span class=\"line\">Breakpoint 1, redis_setoption_handler (execute_data=0x7ffff6814160, return_value=0x7fffffffb000, redis_sock=0x7ffff687e0e0, c=0x0)</span><br><span class=\"line\">    at /data/tools/redis-4.0.2/redis_commands.c:3089</span><br><span class=\"line\">3089\t&#123;</span><br><span class=\"line\">(gdb) n</span><br><span class=\"line\">3095\t    int tcp_keepalive = 0;</span><br><span class=\"line\">(gdb) n</span><br><span class=\"line\">3098\t    <span class=\"keyword\">if</span> (zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC, <span class=\"string\">\"ls\"</span>, &amp;option,</span><br><span class=\"line\">(gdb) n</span><br><span class=\"line\">3104\t    switch(option) &#123;</span><br><span class=\"line\">(gdb) n</span><br><span class=\"line\">3150\t            <span class=\"keyword\">if</span> (ZSTR_VAL(redis_sock-&gt;host)[0] == <span class=\"string\">'/'</span> &amp;&amp; redis_sock-&gt;port &lt; 1) &#123;</span><br><span class=\"line\">(gdb) p option</span><br><span class=\"line\"><span class=\"variable\">$1</span> = 6</span><br><span class=\"line\">(gdb) n</span><br><span class=\"line\">3153\t            tcp_keepalive = atol(val_str) &gt; 0 ? 1 : 0;</span><br><span class=\"line\">(gdb) p val_str</span><br><span class=\"line\"><span class=\"variable\">$2</span> = 0x7ffff6802bd8 <span class=\"string\">\"10\"</span></span><br><span class=\"line\">(gdb) n</span><br><span class=\"line\">3154\t            <span class=\"keyword\">if</span> (redis_sock-&gt;tcp_keepalive == tcp_keepalive) &#123;</span><br><span class=\"line\">(gdb) p tcp_keepalive</span><br><span class=\"line\"><span class=\"variable\">$3</span> = 1</span><br><span class=\"line\">(gdb) p redis_sock-&gt;tcp_keepalive</span><br><span class=\"line\"><span class=\"variable\">$4</span> = 0</span><br><span class=\"line\">(gdb) n</span><br><span class=\"line\">3157\t            <span class=\"keyword\">if</span> (redis_sock-&gt;stream) &#123;</span><br><span class=\"line\">(gdb) n</span><br><span class=\"line\">3159\t                sock = (php_netstream_data_t*)redis_sock-&gt;stream-&gt;abstract;</span><br><span class=\"line\">(gdb) n</span><br><span class=\"line\">3160\t                <span class=\"keyword\">if</span> (setsockopt(sock-&gt;socket, SOL_SOCKET, SO_KEEPALIVE, (char*)&amp;tcp_keepalive,</span><br><span class=\"line\">(gdb) n</span><br><span class=\"line\">3164\t                redis_sock-&gt;tcp_keepalive = tcp_keepalive;</span><br><span class=\"line\">(gdb) p redis_sock-&gt;tcp_keepalive</span><br><span class=\"line\"><span class=\"variable\">$5</span> = 0</span><br><span class=\"line\">(gdb) p tcp_keepalive</span><br><span class=\"line\"><span class=\"variable\">$6</span> = 1</span><br><span class=\"line\">(gdb) n</span><br><span class=\"line\">3166\t            RETURN_TRUE;</span><br></pre></td></tr></table></figure>\n<p>通过上面的调试可以知道，</p>\n<ul>\n<li>在调用<code>setOption</code>函数阶段，成功设置了<code>tcp_keepalive</code>为<code>1</code>。</li>\n</ul>\n<h3 id=\"疑问\"><a href=\"#疑问\" class=\"headerlink\" title=\"疑问\"></a>疑问</h3><p>前面我们通过docker模拟，gdb断点排查，现在进行小结：</p>\n<ol>\n<li>版本问题：一开始怀疑是phpredis没有<code>TCP_KEEPALIVE</code>的配置项，查看源码发现4.0以上的版本都支持了。</li>\n<li>环境问题：通过gdb断点发现，host是没问题的，并没有采用<code>unix domain socket</code>模式，在docker环境下模拟没问题。</li>\n<li>逻辑问题：通过gdb断点发现，在<code>connect</code>阶段，sock-&gt;tcp_keepalive默认为<code>0</code>，在<code>setOption</code>阶段，sock-&gt;tcp_keepalive被设置为<code>1</code>，逻辑也没问题</li>\n</ol>\n<p>到现在，几乎任何关于代码的地方都“似乎”没问题，所以走不通了，只能回头再看看，有什么细节遗漏了。前面，我们在<code>setOption</code>阶段，把<code>OPT_TCP_KEEPALIVE</code>设置为<code>10</code>，当时我说，把时间设置为<code>10s</code>，因为我把这里理所当然的理解为<code>tcp_keepalive_time</code>，我希望在断网后10秒内，能给服务端发<code>keepalive</code>包。可是，查看源码发现，</p>\n<figure class=\"highlight c\"><table><tr><td class=\"code\"><pre><span class=\"line\">tcp_keepalive = zval_get_long(val) &gt; <span class=\"number\">0</span> ? <span class=\"number\">1</span> : <span class=\"number\">0</span>;</span><br></pre></td></tr></table></figure>\n<p>这里传入的值，似乎被当作了另一种用法，<code>只要是正整数，就把tcp_keepalive设置为1，否则设置为0</code>。也就是说，这里并没有<code>tcp_keepalive_time</code>的功能，仅作为开关！！！</p>\n<p>但是，我找不到任何提供的API可以设置了…</p>\n<h3 id=\"设置系统默认TCP-KEEPALIVE各参数值\"><a href=\"#设置系统默认TCP-KEEPALIVE各参数值\" class=\"headerlink\" title=\"设置系统默认TCP_KEEPALIVE各参数值\"></a>设置系统默认TCP_KEEPALIVE各参数值</h3><p>前面我们知道，系统有一个全局默认的TCP_KEEPALIVE配置</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">sysctl -a | grep keepalive</span><br><span class=\"line\"></span><br><span class=\"line\">net.ipv4.tcp_keepalive_intvl = 75</span><br><span class=\"line\">net.ipv4.tcp_keepalive_probes = 9</span><br><span class=\"line\">net.ipv4.tcp_keepalive_time = 7200</span><br></pre></td></tr></table></figure>\n<p>上面这个配置是两个小时（7200s）后才发包，现在我把这些设置改一下，改短一点</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">sysctl -w net.ipv4.tcp_keepalive_time=15 net.ipv4.tcp_keepalive_probes=3 net.ipv4.tcp_keepalive_intvl=10</span><br></pre></td></tr></table></figure>\n<ul>\n<li>net.ipv4.tcp_keepalive_time：15</li>\n<li>net.ipv4.tcp_keepalive_probes：3</li>\n<li>net.ipv4.tcp_keepalive_intvl：10</li>\n</ul>\n<p>重新跑一遍代码，断开服务端网络，tcpdump看发包情况。</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">15:38:24.862503 IP web_docker_php.web_docker_web_network.42480 &gt; ce6e2fa39930.6379: Flags [.], ack 13, win 229, options [nop,nop,TS val 35239808 ecr 35238270], length 0</span><br><span class=\"line\">15:38:24.862592 IP ce6e2fa39930.6379 &gt; web_docker_php.web_docker_web_network.42480: Flags [.], ack 41, win 227, options [nop,nop,TS val 35239808 ecr 35238275], length 0</span><br><span class=\"line\">15:38:39.866247 IP web_docker_php.web_docker_web_network.42480 &gt; ce6e2fa39930.6379: Flags [.], ack 13, win 229, options [nop,nop,TS val 35241312 ecr 35239808], length 0</span><br><span class=\"line\">15:38:39.866290 IP ce6e2fa39930.6379 &gt; web_docker_php.web_docker_web_network.42480: Flags [.], ack 41, win 227, options [nop,nop,TS val 35241312 ecr 35238275], length 0</span><br><span class=\"line\">15:38:54.907073 IP web_docker_php.web_docker_web_network.42480 &gt; ce6e2fa39930.6379: Flags [.], ack 13, win 229, options [nop,nop,TS val 35242816 ecr 35241312], length 0</span><br><span class=\"line\">15:38:54.907178 IP ce6e2fa39930.6379 &gt; web_docker_php.web_docker_web_network.42480: Flags [.], ack 41, win 227, options [nop,nop,TS val 35242816 ecr 35238275], length 0</span><br></pre></td></tr></table></figure>\n<p>重新试一下发现，竟然没问题了！确实每隔15秒发一次<code>keepalive包</code>。也就是说，我一直对phpredis的<code>TCP_KEEPALIVE</code>用法理解错了。先入为主的认为这个就是<code>tcp_keepalive_time</code>。其实，之前的程序一直没有问题，只不过，因为系统默认的时间太久了，程序一直阻塞着，所以我才觉得这个参数没有正确被设置。</p>\n<h2 id=\"更简单的方案\"><a href=\"#更简单的方案\" class=\"headerlink\" title=\"更简单的方案?\"></a>更简单的方案?</h2><p>前面讨论了解决<code>brpop</code>在网络抖动的情况下，使用<code>忙连接</code>的方案。后来，我们了解了<code>OPT_TCP_KEEPALIVE</code>的用法，能不能有更简单的方案？要是phpredis客户端能定时发<code>keepalive包</code>，如果网络中断，直接报异常，然后进行异常捕获，重新连接。岂不是更佳？</p>\n<p>然而，在实测过程中（使用test.php），当网络中断后，客户端便不再发送<code>keepalive包</code>，通过netstat看，客户端在<strong>短时间内自动断开客户端与服务端的单边连接</strong>，然后也没有报异常:(</p>\n<h2 id=\"总结\"><a href=\"#总结\" class=\"headerlink\" title=\"总结\"></a>总结</h2><ol>\n<li>使用nc和netcat-keepalive工具，回顾TCP_KEEPALIVE机制</li>\n<li>理清redis几个关于timeout的API，以及结合使用时它们的优先级</li>\n<li>理清phpredis客户端keepalive用法，没有开放TCP_KEEPALIVE的三个关键配置，而是仅作为开关，使用系统环境的参数配置</li>\n<li>把网络异常当作常态，在应用层做更健壮的长连接检测</li>\n</ol>\n<h2 id=\"最后\"><a href=\"#最后\" class=\"headerlink\" title=\"最后\"></a>最后</h2><p>本文使用Redis的brpop做消息获取，这只是其中一种情况，还有其他网络API也是需要长连接的，如subscribe，针对其他API，解决方案是否如出一辙呢？留到下一次继续分析～</p>\n","categories":["技术"],"tags":["PHP","Redis","TCP/IP"]},{"title":"下载大文件时不得不了解nginx的一个配置","url":"/2019/02/14/%E3%80%90nginx%E3%80%91fastcgi_max_tmp_file_size/","content":"<h2 id=\"问题背景\"><a href=\"#问题背景\" class=\"headerlink\" title=\"问题背景\"></a>问题背景</h2><p>laravel下载大文件服务，浏览器无法承载大文件下载，会崩溃。改为提供api，外部使用curl或者wget等工具下载。为什么没用scp呢？因为服务器权限问题，这个功能是为了解决浏览器下载大文件崩溃而生的。</p>\n<h2 id=\"问题\"><a href=\"#问题\" class=\"headerlink\" title=\"问题\"></a>问题</h2><p>大文件下载遇到的问题，每次下载到1024M的时候，就自动停了。</p>\n<h2 id=\"解决过程\"><a href=\"#解决过程\" class=\"headerlink\" title=\"解决过程\"></a>解决过程</h2><ol>\n<li>curl的问题，加上-C参数，提供断点续传。无效</li>\n<li>wget，同上，到了1024M就自动停了</li>\n<li>laravel的问题，并不是，symfony有很好的文件响应组件</li>\n<li>php的问题，没有这样的配置</li>\n<li>php-fpm的问题，同上，没有这样的配置</li>\n<li>nginx的问题，是的！</li>\n</ol>\n<h2 id=\"fastcgi-max-temp-file-size默认为1024M\"><a href=\"#fastcgi-max-temp-file-size默认为1024M\" class=\"headerlink\" title=\"fastcgi_max_temp_file_size默认为1024M\"></a>fastcgi_max_temp_file_size默认为1024M</h2><p>配置说明</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">When buffering of responses from the FastCGI server is enabled, and the whole response does not fit into the buffers set by the fastcgi_buffer_size and fastcgi_buffers directives, a part of the response can be saved to a temporary file. This directive sets the maximum size of the temporary file. The size of data written to the temporary file at a time is set by the fastcgi_temp_file_write_size directive.</span><br><span class=\"line\">The zero value disables buffering of responses to temporary files.</span><br><span class=\"line\">This restriction does not apply to responses that will be cached or stored on disk.</span><br></pre></td></tr></table></figure>\n<p>改大一点，解决~</p>\n","categories":["技术"],"tags":["nginx"]},{"title":"用shc保护你的敏感信息","url":"/2019/02/14/%E3%80%90shell%E3%80%91shc%E5%8A%A0%E5%AF%86/","content":"<h2 id=\"背景\"><a href=\"#背景\" class=\"headerlink\" title=\"背景\"></a>背景</h2><p>有个功能是在web下载大文件，但是太大的文件，在浏览器下载会崩溃。想了下，能不能改为API的方式，使用CURL来下载？</p>\n<p>一开始不想暴露api，这个api不常用，因为绕过了用户会话（不用登陆），并不安全，如果被恶意利用：数据会被泄露，服务器会被拖慢等等安全隐患。</p>\n<p>于是想过把通过shell文件，把api放在里面，然后使用shc来加密shell文件为二进制文件。这样一来，api就“看不到”了，有一定的安全性，只要不被反编译，应该是目前最可靠的方法。</p>\n<h2 id=\"安装shc\"><a href=\"#安装shc\" class=\"headerlink\" title=\"安装shc\"></a>安装shc</h2><p>root用户</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\"># wget http://www.datsi.fi.upm.es/~frosal/sources/shc-3.8.3.tgz</span><br><span class=\"line\"># tar -zxvf shc-3.8.3.tgz</span><br><span class=\"line\"># cd shc-3.8.3</span><br><span class=\"line\"># make &amp;&amp; make install</span><br></pre></td></tr></table></figure>\n<p><strong>这里会让你确认，千万别直接enter，而是输入y，enter</strong></p>\n<h2 id=\"使用shc\"><a href=\"#使用shc\" class=\"headerlink\" title=\"使用shc\"></a>使用shc</h2><figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">shc -v -r -T -f xxx.sh</span><br></pre></td></tr></table></figure>\n<p>这里也有坑，不用-T的话，是没办法执行的。</p>\n<p>然后会生成两个文件</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">xxx.sh.x  --- 二进制文件</span><br><span class=\"line\">xxx.sh.x.c  --- C文件，可删除</span><br></pre></td></tr></table></figure>\n<h2 id=\"使用二进制\"><a href=\"#使用二进制\" class=\"headerlink\" title=\"使用二进制\"></a>使用二进制</h2><figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">chmod +x xxx.sh.x</span><br><span class=\"line\">rname xxx.sh （重命名）</span><br><span class=\"line\">./xxx.sh</span><br></pre></td></tr></table></figure>\n<p>windows下，是执行不了这个二进制文件的，需要使用cygwin或者windows子系统才可以。想过直接用gcc编译c文件，但是会报错，应该是格式原因，还是得在windows下执行shc。</p>\n<h2 id=\"curl注意事项\"><a href=\"#curl注意事项\" class=\"headerlink\" title=\"curl注意事项\"></a>curl注意事项</h2><p>如果想要在windows下执行curl，如果链接里面有&amp;符号是有问题的，需要把整个链接用引号包起来才可以</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">curl &quot;https://aa.com/api/excel/download?token=xx&amp;file=xx.csv&quot; &gt;&gt; xx.csv</span><br></pre></td></tr></table></figure>","categories":["技术"],"tags":["shell"]},{"title":"【字符编码】PHP导出CSV中文乱码问题研究","url":"/2018/02/02/%E3%80%90%E5%AD%97%E7%AC%A6%E7%BC%96%E7%A0%81%E3%80%91PHP%E5%AF%BC%E5%87%BACSV%E4%B8%AD%E6%96%87%E4%B9%B1%E7%A0%81%E9%97%AE%E9%A2%98%E7%A0%94%E7%A9%B6/","content":"<p>没有踩过字符编码问题的程序生涯是不完整的，还记得曾经还踩过Apache+PHP+MySQL的编码问题，不过那时候没总结下来，今天遇到了导出文件的编码问题，一起来好好研究一下:)</p>\n<p>推荐一下这篇文章<a href=\"http://cenalulu.github.io/linux/character-encoding/\" title=\"十分钟搞清字符集和字符编码\" target=\"_blank\" rel=\"noopener\">十分钟搞清字符集和字符编码</a>，可以快速了解一下字符编码的知识</p>\n<h3 id=\"业务背景\"><a href=\"#业务背景\" class=\"headerlink\" title=\"业务背景\"></a>业务背景</h3><p>把数据查询结果导出到CSV，由于Laravel Excel内部实现方法的问题，载入大数据量时，容易爆内存，因此这里分了两种实现，小数据量则采用Laravel Excel，大数据量则使用无缓冲查询+Yield，详情可参考这篇文章<a href=\"http://funsoul.org/2018/02/01/【Yield】大数据下的应用/\" title=\"【Yield】大数据下的应用\">【Yield】大数据下的应用</a></p>\n<p>由于使用了Laravel Excel工具集，先来看看这个工具内部是如何实现编码兼容的<br><figure class=\"highlight php\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># ..\\vendor\\maatwebsite\\excel\\src\\Maatwebsite\\Excel\\Writers\\LaravelExcelWriter.php</span></span><br><span class=\"line\"><span class=\"comment\"># 约347行</span></span><br><span class=\"line\"><span class=\"keyword\">protected</span> <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">_download</span><span class=\"params\">(Array $headers = [])</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    <span class=\"comment\">// Set the headers</span></span><br><span class=\"line\">    <span class=\"keyword\">$this</span>-&gt;_setHeaders(</span><br><span class=\"line\">        $headers,</span><br><span class=\"line\">        [</span><br><span class=\"line\">            <span class=\"string\">'Content-Type'</span>        =&gt; <span class=\"keyword\">$this</span>-&gt;contentType,</span><br><span class=\"line\">            <span class=\"string\">'Content-Disposition'</span> =&gt; <span class=\"string\">'attachment; filename=\"'</span> . <span class=\"keyword\">$this</span>-&gt;filename . <span class=\"string\">'.'</span> . <span class=\"keyword\">$this</span>-&gt;ext . <span class=\"string\">'\"'</span>,</span><br><span class=\"line\">            <span class=\"string\">'Expires'</span>             =&gt; <span class=\"string\">'Mon, 26 Jul 1997 05:00:00 GMT'</span>, <span class=\"comment\">// Date in the past</span></span><br><span class=\"line\">            <span class=\"string\">'Last-Modified'</span>       =&gt; Carbon::now()-&gt;format(<span class=\"string\">'D, d M Y H:i:s'</span>),</span><br><span class=\"line\">            <span class=\"string\">'Cache-Control'</span>       =&gt; <span class=\"string\">'cache, must-revalidate'</span>,</span><br><span class=\"line\">            <span class=\"string\">'Pragma'</span>              =&gt; <span class=\"string\">'public'</span></span><br><span class=\"line\">        ]</span><br><span class=\"line\">    );</span><br><span class=\"line\"></span><br><span class=\"line\">    ...</span><br><span class=\"line\">    ..</span><br><span class=\"line\">    .</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p>通过区分不同的文件类型设置$this-&gt;contentType，但是这里是用来设置浏览器下载的header的，并不是保存为服务器文件，继续找。</p>\n<h3 id=\"查看PHPExcel对CSV格式的兼容性实现\"><a href=\"#查看PHPExcel对CSV格式的兼容性实现\" class=\"headerlink\" title=\"查看PHPExcel对CSV格式的兼容性实现\"></a>查看PHPExcel对CSV格式的兼容性实现</h3><figure class=\"highlight php\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># ..\\vendor\\phpoffice\\phpexcel\\Classes\\PHPExcel\\Writer\\CSV.php</span></span><br><span class=\"line\"><span class=\"comment\"># 约116行</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">if</span> (<span class=\"keyword\">$this</span>-&gt;_excelCompatibility) &#123;</span><br><span class=\"line\">\tfwrite($fileHandle, <span class=\"string\">\"\\xEF\\xBB\\xBF\"</span>);\t<span class=\"comment\">//\tEnforce UTF-8 BOM Header</span></span><br><span class=\"line\">\t<span class=\"keyword\">$this</span>-&gt;setEnclosure(<span class=\"string\">'\"'</span>);\t\t\t\t<span class=\"comment\">//\tSet enclosure to \"</span></span><br><span class=\"line\">\t<span class=\"keyword\">$this</span>-&gt;setDelimiter(<span class=\"string\">\";\"</span>);\t\t\t    <span class=\"comment\">//\tSet delimiter to a semi-colon</span></span><br><span class=\"line\">    <span class=\"keyword\">$this</span>-&gt;setLineEnding(<span class=\"string\">\"\\r\\n\"</span>);</span><br><span class=\"line\">\tfwrite($fileHandle, <span class=\"string\">'sep='</span> . <span class=\"keyword\">$this</span>-&gt;getDelimiter() . <span class=\"keyword\">$this</span>-&gt;_lineEnding);</span><br><span class=\"line\">&#125; <span class=\"keyword\">elseif</span> (<span class=\"keyword\">$this</span>-&gt;_useBOM) &#123;</span><br><span class=\"line\">\t<span class=\"comment\">// Write the UTF-8 BOM code if required</span></span><br><span class=\"line\">\tfwrite($fileHandle, <span class=\"string\">\"\\xEF\\xBB\\xBF\"</span>);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>发现$this-&gt;_useBOM这个配置项，默认是没有开启的。查看使用LaravelExcel下载的CSV文件的BOM确实没有支持UTF-8</p>\n<h3 id=\"laravel-Excel配置开启use-bom\"><a href=\"#laravel-Excel配置开启use-bom\" class=\"headerlink\" title=\"laravel Excel配置开启use_bom\"></a>laravel Excel配置开启use_bom</h3><p>config/excel.php，设置csv的use_bom为true，默认为false</p>\n<h3 id=\"查看BOM\"><a href=\"#查看BOM\" class=\"headerlink\" title=\"查看BOM\"></a>查看BOM</h3><figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">]$ head -c 3 file | hexdump -C</span><br><span class=\"line\"></span><br><span class=\"line\">00000000  ef bb bf                                          |...|</span><br><span class=\"line\">00000003</span><br></pre></td></tr></table></figure>\n<p>找到问题的关键了，在需要写入文件前，添加UTF-8的BOM即可<br><figure class=\"highlight php\"><table><tr><td class=\"code\"><pre><span class=\"line\">fwrite($fp, <span class=\"string\">\"\\xEF\\xBB\\xBF\"</span>); <span class=\"comment\">// 添加 UTF-8 BOM</span></span><br></pre></td></tr></table></figure></p>\n","categories":["技术"],"tags":["PHP","乱码"]},{"title":"【问题排查】PHP-FPM模式下提示缺失lib","url":"/2017/12/14/%E3%80%90%E9%97%AE%E9%A2%98%E6%8E%92%E6%9F%A5%E3%80%91PHP-FPM%E6%A8%A1%E5%BC%8F%E4%B8%8B%E6%8F%90%E7%A4%BA%E7%BC%BA%E5%A4%B1lib/","content":"<h2 id=\"php-fpm-conf\"><a href=\"#php-fpm-conf\" class=\"headerlink\" title=\"php-fpm.conf\"></a>php-fpm.conf</h2><p>设置worker为1，方便strace</p>\n<figure class=\"highlight vim\"><table><tr><td class=\"code\"><pre><span class=\"line\">[<span class=\"keyword\">global</span>]</span><br><span class=\"line\">pid = /usr/local/php/var/run/php-fpm.pid</span><br><span class=\"line\">error_log = /usr/local/php/var/<span class=\"built_in\">log</span>/php-fpm.<span class=\"built_in\">log</span></span><br><span class=\"line\">log_level = notice</span><br><span class=\"line\">[www]</span><br><span class=\"line\">listen = /tmp/php-cgi.sock</span><br><span class=\"line\">listen.backlog = -<span class=\"number\">1</span></span><br><span class=\"line\">listen.allowed_clients = <span class=\"number\">127.0</span>.<span class=\"number\">0.1</span></span><br><span class=\"line\">listen.owner = www</span><br><span class=\"line\">listen.group = www</span><br><span class=\"line\">listen.<span class=\"keyword\">mode</span> = <span class=\"number\">0666</span></span><br><span class=\"line\">user = www</span><br><span class=\"line\">group = www</span><br><span class=\"line\">pm = static</span><br><span class=\"line\">pm.max_children = <span class=\"number\">1</span></span><br><span class=\"line\">pm.start_servers = <span class=\"number\">1</span></span><br><span class=\"line\">pm.min_spare_servers = <span class=\"number\">1</span></span><br><span class=\"line\">pm.max_spare_servers = <span class=\"number\">1</span></span><br><span class=\"line\">request_terminate_timeout = <span class=\"number\">100</span></span><br><span class=\"line\">request_slowlog_timeout = <span class=\"number\">0</span></span><br><span class=\"line\">slowlog = var/<span class=\"built_in\">log</span>/slow.<span class=\"built_in\">log</span></span><br></pre></td></tr></table></figure>\n<h2 id=\"ps-ef-grep-php-fpm\"><a href=\"#ps-ef-grep-php-fpm\" class=\"headerlink\" title=\"ps -ef | grep php-fpm\"></a>ps -ef | grep php-fpm</h2><figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">root       6598      1  0 10:45 ?        00:00:00 php-fpm: master process (/usr/<span class=\"built_in\">local</span>/php/etc/php-fpm.conf)                                                                    </span><br><span class=\"line\">www        6599   6598  0 10:45 ?        00:00:00 php-fpm: pool www</span><br></pre></td></tr></table></figure>\n<h2 id=\"sudo-strace-p-6599\"><a href=\"#sudo-strace-p-6599\" class=\"headerlink\" title=\"sudo strace -p 6599\"></a>sudo strace -p 6599</h2><p>查看worker进程系统调用，找到问题行</p>\n<figure class=\"highlight vim\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">open</span>(<span class=\"string\">\"/lib64/tls/libssl.so.1.0.0\"</span>, O_RDONLY) = -<span class=\"number\">1</span> ENOENT (No such <span class=\"keyword\">file</span> <span class=\"built_in\">or</span> directory) </span><br><span class=\"line\"><span class=\"keyword\">open</span>(<span class=\"string\">\"/lib64/libssl.so.1.0.0\"</span>, O_RDONLY) = -<span class=\"number\">1</span> ENOENT (No such <span class=\"keyword\">file</span> <span class=\"built_in\">or</span> directory) </span><br><span class=\"line\"><span class=\"keyword\">open</span>(<span class=\"string\">\"/usr/lib64/tls/libssl.so.1.0.0\"</span>, O_RDONLY) = -<span class=\"number\">1</span> ENOENT (No such <span class=\"keyword\">file</span> <span class=\"built_in\">or</span> directory) </span><br><span class=\"line\"><span class=\"keyword\">open</span>(<span class=\"string\">\"/usr/lib64/libssl.so.1.0.0\"</span>, O_RDONLY) = -<span class=\"number\">1</span> ENOENT (No such <span class=\"keyword\">file</span> <span class=\"built_in\">or</span> directory</span><br></pre></td></tr></table></figure>\n<p>发现系统中确实没有libssl.so.1.0.0，只有libssl.so.1.0.1e，一般而言都会向下兼容，设置软链接</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">sudo ln -s /usr/lib64/libssl.so.1.0.1e /usr/lib64/tls/libssl.so.1.0.0</span><br></pre></td></tr></table></figure>\n<p>再次执行，刚刚出现的“libssl”缺失已经不见了，出现了新的lib缺失</p>\n<figure class=\"highlight vim\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">open</span>(<span class=\"string\">\"/lib64/tls/libcrypto.so.1.0.0\"</span>, O_RDONLY) = -<span class=\"number\">1</span> ENOENT (No such <span class=\"keyword\">file</span> <span class=\"built_in\">or</span> directory)</span><br><span class=\"line\"><span class=\"keyword\">open</span>(<span class=\"string\">\"/lib64/libcrypto.so.1.0.0\"</span>, O_RDONLY) = -<span class=\"number\">1</span> ENOENT (No such <span class=\"keyword\">file</span> <span class=\"built_in\">or</span> directory)</span><br><span class=\"line\"><span class=\"keyword\">open</span>(<span class=\"string\">\"/usr/lib64/tls/libcrypto.so.1.0.0\"</span>, O_RDONLY) = -<span class=\"number\">1</span> ENOENT (No such <span class=\"keyword\">file</span> <span class=\"built_in\">or</span> directory)</span><br><span class=\"line\"><span class=\"keyword\">open</span>(<span class=\"string\">\"/usr/lib64/libcrypto.so.1.0.0\"</span>, O_RDONLY) = -<span class=\"number\">1</span> ENOENT (No such <span class=\"keyword\">file</span> <span class=\"built_in\">or</span> directory)</span><br></pre></td></tr></table></figure>\n<p>同上，找到系统中存在的libcrypto.so.1.0.1e，并设置软链接</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">sudo ln -s /usr/lib64/libcrypto.so.1.0.1e /usr/lib64/libcrypto.so.1.0.0</span><br></pre></td></tr></table></figure>\n<p>问题解决~ :)</p>\n","categories":["技术"],"tags":["问题排查","PHP"]},{"title":"今天玩了一款让我写代码的游戏","url":"/2018/04/13/%E4%BB%8A%E5%A4%A9%E7%8E%A9%E4%BA%86%E4%B8%80%E6%AC%BE%E8%AE%A9%E6%88%91%E5%86%99%E4%BB%A3%E7%A0%81%E7%9A%84%E6%B8%B8%E6%88%8F/","content":"<h2 id=\"编程？游戏？\"><a href=\"#编程？游戏？\" class=\"headerlink\" title=\"编程？游戏？\"></a>编程？游戏？</h2><p>今天看到一个有趣的网站，这是个通过游戏的形式学习python的网站，玩到了第二关<a href=\"http://www.pythonchallenge.com/pc/def/map.html\" target=\"_blank\" rel=\"noopener\">pythonchallenge</a>，很有意思，虽然作者的本意是让玩家学习python，但是我决定用PHP…</p>\n<p>游戏中给出了一张图，图里面是这样的提示：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">E -&gt; G</span><br><span class=\"line\">K -&gt; M</span><br><span class=\"line\">O -&gt; Q</span><br></pre></td></tr></table></figure>\n<p>然后给出了一段”乱码”:</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">g fmnc wms bgblr rpylqjyrc gr zw fylb. rfyrq ufyr amknsrcpq ypc dmp. bmgle gr gl zw fylb gq glcddgagclr ylb rfyr&apos;q ufw rfgq rcvr gq qm jmle. sqgle qrpgle.kyicrpylq() gq pcamkkclbcb. lmu ynnjw ml rfc spj.</span><br></pre></td></tr></table></figure>\n<p>显然，只要把“乱码”中每个字母往后移动两位即可…</p>\n<h2 id=\"代码实现\"><a href=\"#代码实现\" class=\"headerlink\" title=\"代码实现\"></a>代码实现</h2><figure class=\"highlight php\"><table><tr><td class=\"code\"><pre><span class=\"line\">$str = <span class=\"string\">\"g fmnc wms bgblr rpylqjyrc gr zw fylb. rfyrq ufyr amknsrcpq ypc dmp. bmgle gr gl zw fylb gq glcddgagclr ylb rfyr'q ufw rfgq rcvr gq qm jmle. sqgle qrpgle.kyicrpylq() gq pcamkkclbcb. lmu ynnjw ml rfc spj.\"</span>;</span><br><span class=\"line\">$arr = str_split($str);</span><br><span class=\"line\">$res = [];</span><br><span class=\"line\">$filter = [<span class=\"string\">' '</span>,<span class=\"string\">'.'</span>,<span class=\"string\">'\\''</span>,<span class=\"string\">'('</span>,<span class=\"string\">')'</span>];</span><br><span class=\"line\"><span class=\"keyword\">foreach</span> ($arr <span class=\"keyword\">as</span> $item)&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(in_array($item,$filter)) &#123;</span><br><span class=\"line\">        $res[] = $item;</span><br><span class=\"line\">        <span class=\"keyword\">continue</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    $tmp = ord($item);</span><br><span class=\"line\">    $res[] = $item == <span class=\"string\">'z'</span> ? <span class=\"string\">'b'</span> : ($item == <span class=\"string\">'y'</span> ? <span class=\"string\">'a'</span> : chr($tmp + <span class=\"number\">2</span>));</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">$str = implode($res,<span class=\"string\">''</span>);</span><br><span class=\"line\"><span class=\"keyword\">echo</span> $str;</span><br></pre></td></tr></table></figure>\n<h2 id=\"结果\"><a href=\"#结果\" class=\"headerlink\" title=\"结果\"></a>结果</h2><p>i hope you didnt translate it by hand. thats what computers are for. doing it in by hand is inefficient and that’s why this text is so long. using string.maketrans() is recommended. now apply on the url.</p>\n","categories":["技术"],"tags":["PHP","有趣"]},{"title":"基于统计机器学习的自动回复","url":"/2019/12/02/%E5%9F%BA%E4%BA%8E%E7%BB%9F%E8%AE%A1%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0%E7%9A%84%E8%87%AA%E5%8A%A8%E5%9B%9E%E5%A4%8D/","content":"<h2 id=\"前言\"><a href=\"#前言\" class=\"headerlink\" title=\"前言\"></a>前言</h2><p>这篇文章是最近工作的总结，受到<code>费曼技巧</code>的影响，还有一个简陋的<a href=\"https://slides.com/funsoul/auto_response_v2\" target=\"_blank\" rel=\"noopener\">PPT</a></p>\n<h2 id=\"背景\"><a href=\"#背景\" class=\"headerlink\" title=\"背景\"></a>背景</h2><p>这篇文章的背景是游戏环境下的客服投诉系统，玩家和游戏开发者的联系不止在游戏中，很多时候，游戏开发者需要提供一个通道让玩家表达意见、怀疑与不满。很常见的情况是，</p>\n<p>玩家想知道</p>\n<ol>\n<li>系统公告问题（开服、合服时间）</li>\n<li>装备掉落概率问题（打副本爆装备概率低）</li>\n<li>系统奖励资源问题（礼包、奖励未到账）</li>\n<li>游戏下载问题（下载地址）</li>\n<li>关于玩家举报反馈</li>\n</ol>\n<p>对于简单、重复的问题，客服常常会有一套差不多的回复。既然问题有规律/规则、有共性，那么只要识别问题的规则，面对特定的规则，自动回复特定的内容，好像就解决了。</p>\n<p>然而，事情远远没有那么简单。我们很快开发了一套识别用户问题意图的基于规则的自动回复系统，上线运行了一段时间后，各项指标非常惨烈。分别是，</p>\n<ol>\n<li>准确率，衡量正确识别用户意图的指标。只有85～90%</li>\n<li>匹配率，衡量单位时间内匹配当前所有配置规则的指标，只有18～20%</li>\n<li>召回率，衡量单个规则在同性质问题的匹配度，未统计，通过匹配率可以看出，也是相当惨烈</li>\n</ol>\n<p>准确率的反面就是未解决率+错误率的总和，通过这两个反向指标，我们终于发现问题，后面会详细说说。</p>\n<h2 id=\"鸟瞰自然语言处理的历史\"><a href=\"#鸟瞰自然语言处理的历史\" class=\"headerlink\" title=\"鸟瞰自然语言处理的历史\"></a>鸟瞰自然语言处理的历史</h2><p>学习新东西，我喜欢看它的历史，从历史进程中认识发展的脉络。</p>\n<p>我很喜欢的一个作家吴军博士，在《数学之美》一书的第二章「自然语言处理，从规则到统计」中把自然语言处理的历史讲述的非常深入人心。计算机诞生之时，科学家希望计算机能懂人类语言，于是在长达20年的时间里（1950～1970），研究人类语言的句法和语义，不断完善句法，到1960年基于规则的研究已经获得了普遍的认同。然而，局限于句法的多义性和复杂度，算法设计的复杂度也随之攀升，性能是个大问题，而且如果要让计算机认识人类语言，或许需要世界的知识和常识。</p>\n<p>时间来到1970年代，IBM基于数学模型和统计设计的系统横空出世（准确率达到90%），让人们不禁想，也许方向错了。学派之争到了1990年代，随着参与基于规则的研究人员越来越少，参与基于统计的研究人员越来越多，自然语言处理的过渡完成了。2005年，Google基于统计的翻译系统出来后，人们终于放弃了基于规则的方法。</p>\n<h3 id=\"句法分析、语义分析\"><a href=\"#句法分析、语义分析\" class=\"headerlink\" title=\"句法分析、语义分析\"></a>句法分析、语义分析</h3><p>下面来看看这个简单的例子，玩家发了一条投诉意见：</p>\n<blockquote>\n<p>你们合区啊，这区人少的，简直打不掉装备。</p>\n</blockquote>\n<p>我们可以很容易理解，这句话的意思是需要针对「合服」类做回复。但是基于规则的自然语言处理系统能理解吗？</p>\n<p><img src=\"/images/基于统计机器学习的自动回复/基于规则.png\" alt=\"基于规则的自然语言处理\"></p>\n<p>基于规则的系统会先进行分词，得到每个词的词性。简单的关键字匹配，可以得到几个有价值的关键词：合区、装备。但是我们怎么知道这是属于「合区」的类别，还是属于「概率」的类别呢？这里，机器开始不明白用户的意图了。</p>\n<p>于是我们想，单靠一个词机器理解不了，那就再来一个。然后，我们得到了组合词规则：「合区 + 人少」、「装备 + 不掉」。我们开始思考词法和语义分析了，希望通过主谓关系来理解用户的意图，接下来你也想到了，<strong>规则的复杂度开始加大了，算法设计的复杂度也开始增加</strong>。</p>\n<p>我们明白：人类语言的句法中含有并列、转折等多重关系，单纯的规则（关键字）无法识别用户真正的意图。</p>\n<h3 id=\"关键字\"><a href=\"#关键字\" class=\"headerlink\" title=\"关键字\"></a>关键字</h3><p>下面我们通过<code>词云</code>来呈现每个规则的关键词有多么复杂和庞大。</p>\n<p><img src=\"/images/基于统计机器学习的自动回复/word_cloud_概率.png\" alt=\"词云-概率类\"></p>\n<center>（概率类）</center>\n\n<p><img src=\"/images/基于统计机器学习的自动回复/word_cloud_举报.png\" alt=\"词云-举报类\"></p>\n<center>（举报类）</center>\n\n<p>也就是说，人工设计的规则，还带来一个问题，人类语言是演进和繁杂的，而人工无法设计涵盖所有词的程序。</p>\n<h3 id=\"多义性\"><a href=\"#多义性\" class=\"headerlink\" title=\"多义性\"></a>多义性</h3><p>人工智能专家<code>马文·明斯基</code>举过一个例子：</p>\n<blockquote>\n<p>The pen is in the box.（笔在盒子里。）<br>The box is in the pen. (盒子在围栏里。)</p>\n</blockquote>\n<p>这是另一个无法解决的问题，中文语境博大精深，同样存在此类问题。但在今天这篇文章中，我们暂且不谈。</p>\n<p>下面这句话摘自吴军博士《数学之美》第二章「自然语言处理，从规则到统计」</p>\n<blockquote>\n<p>在20世纪60年代，摆在科学家面前的问题是怎样才能理解自然语言，当时普遍的认识是首先要做好两件事，即分析语句和获取语义，这实际上又是惯性思维的结果，它收到传统语言学的影响。</p>\n</blockquote>\n<h2 id=\"从规则到统计\"><a href=\"#从规则到统计\" class=\"headerlink\" title=\"从规则到统计\"></a>从规则到统计</h2><p><img src=\"/images/基于统计机器学习的自动回复/从规则到统计.jpeg\" alt=\"从规则到统计\"></p>\n<center>图片来自《深度学习》</center>\n\n<p>最近在读《<a href=\"https://book.douban.com/subject/27087503/\" target=\"_blank\" rel=\"noopener\">深度学习</a>》这本书，业界俗称「花书」。这张图很好地展示了近几十年人工智能发展的趋势。可以发现，基于规则的系统必然会成为历史。从经典机器学习到后面的表示学习，都属于基于统计的范畴。区别在于，谁来挖掘特征？经典机器学习依赖人工挖掘特征，这是大前提。意味着人去告诉/教会机器，什么是系统需要的特征，然后从特征去对应输出。表示学习就不依赖任何东西，但同样需要明确输入和输出，只是挖掘特征的过程交给模型/算法去做。</p>\n<p>回到主题，对于文本分类领域，是否也可以使用基于统计的方法？答案是肯定的。</p>\n<p><img src=\"/images/基于统计机器学习的自动回复/基于统计.png\" alt=\"基于统计的自然语言处理\"></p>\n<p>本文使用经典机器学习的方式，将文本分词，但是不使用词性。而是先过滤<code>停用词</code>和<code>单词</code>（单个文字的词）。这里，我们得到了文本的特征。到这里，你也许问，这不是和关键字一样了吗？是的，如果仅仅处理一条文本，和基于规则的方式并无二致。基于统计的精髓在于 —— 统计，这意味着庞大的样本集。</p>\n<p>然后，我们进行特征映射，构造词袋。从词袋中，获取真正的语料，这些语料已经成为数字形式了。也就是说，从最初的文本到现在的语料，我们对文本进行了形式化处理。有了这些语料，就可以使用分类模型了。举个简单的例子，下面使用sklearn的NavieBayes模型中的<code>GaussianNB</code></p>\n<figure class=\"highlight python\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">from</span> sklearn.naive_bayes <span class=\"keyword\">import</span> GaussianNB</span><br><span class=\"line\"></span><br><span class=\"line\">data = [[<span class=\"number\">1</span>, <span class=\"number\">1</span>]]</span><br><span class=\"line\">target = [<span class=\"number\">1</span>]    <span class=\"comment\"># 假设「合区」类的ID为1</span></span><br><span class=\"line\"></span><br><span class=\"line\">gnb = GaussianNB()</span><br><span class=\"line\">gnb.fit(data, target)</span><br></pre></td></tr></table></figure>\n<p>图中，我还用了<code>TF-IDF</code>，这是一种获取文本权重值的方法，可以显著提高文本分类的效果。</p>\n<h2 id=\"结合基于规则和基于统计的新方案\"><a href=\"#结合基于规则和基于统计的新方案\" class=\"headerlink\" title=\"结合基于规则和基于统计的新方案\"></a>结合基于规则和基于统计的新方案</h2><ol>\n<li>第一阶段：结合人工校对和机器分类，生成可用训练的历史投诉记录作为样本</li>\n<li>第二阶段：基于充足样本数以及高准确率的机器分类，结合原方案（关键字分类）制定新策略</li>\n<li>第三阶段：完成全部历史记录训练样本，并开始校对匹配记录中的机器判定结果，完成机器分类正反馈闭环</li>\n</ol>\n<h3 id=\"第一阶段：样本集\"><a href=\"#第一阶段：样本集\" class=\"headerlink\" title=\"第一阶段：样本集\"></a>第一阶段：样本集</h3><p><img src=\"/images/基于统计机器学习的自动回复/第一阶段.png\" alt=\"第一阶段\"></p>\n<p>这里有15W无分类的历史记录，第一阶段也是最耗费人力、时间成本的阶段，需要非常仔细的把每一条数据对应类别，只有这样，才能称之为样本。没有做人工处理的数据，不能用于训练，在经典机器学习中，这一步尤其重要，后面我会说到为什么。总的来说就是<strong>有多少人工，就有多少智能</strong>。</p>\n<p>这一步是值得的，但是能不能缩短人工分类的时间？答案是肯定的。如上图所示，我们先人工分出5k样本，有朋友看到这里，也许会问，为什么是5k？而不是更大的数。这是经过验证的，5k刚好是能让大家接受的人工分类的样本数，对于我们的模型来说，5k的准确率已经相当不错了（超过90%）。为什么这么早就要聊准确率了？</p>\n<p>接下来，我们使用这5k数据做训练，然后，给下一个5k做预测（对新的未人工分类的数据做泛化），并保存这个结果。是的，你也想到了。这5k被模型分类了一遍，虽然不是完全正确的，但是也有相当一部分是被正确归类了，相当于多了好几个人帮我们做这件事（分类速度很快，但有点粗心的人）。然后我们只需要做二次校对，把归类错误的找出来放到正确的类别即可。</p>\n<p>不断的做增量的循环：<strong>先使用机器分类一遍，然后人工做校对。你会发现，随着数据量越来越大，正确率会非常高，后面基本就不用人工分类了，只需要扫一眼，没啥问题就过了。</strong></p>\n<p>让人振奋的是，这种加速机器学习的方法，原来已经被发表过了，被称为<code>主动学习</code>，链接：<a href=\"http://www.52nlp.cn/accelerate-machine-learning\" target=\"_blank\" rel=\"noopener\">加速机器学习：从主动学习到BERT和流体标注</a>。</p>\n<p>人工分完类后，我们可以得到下面的特征分布散点图（使用PCA降维TF-IDF的结果）。这个图的分布情况在一定程度上，决定了我们的模型与核函数选择</p>\n<p><img src=\"/images/基于统计机器学习的自动回复/特征分布情况tfidf将维.png\" alt=\"特征分布情况\"></p>\n<h3 id=\"第二阶段：新策略\"><a href=\"#第二阶段：新策略\" class=\"headerlink\" title=\"第二阶段：新策略\"></a>第二阶段：新策略</h3><ol>\n<li>结合关键字+机器分类做判断</li>\n<li>未训练或样本数较少时，使用关键字分类</li>\n<li>样本集大、高准确率时，使用机器分类</li>\n</ol>\n<table>\n<thead>\n<tr>\n<th></th>\n<th>关键字分类</th>\n<th>机器分类</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>匹配率</td>\n<td>18%</td>\n<td>30%</td>\n</tr>\n<tr>\n<td>准确率</td>\n<td>91%</td>\n<td>97%</td>\n</tr>\n</tbody>\n</table>\n<p>很快，我们就进入了第二阶段。可以发现，相比基于规则的文本分类，我们的新模型表现的更好。</p>\n<h3 id=\"第三阶段：正反馈闭环\"><a href=\"#第三阶段：正反馈闭环\" class=\"headerlink\" title=\"第三阶段：正反馈闭环\"></a>第三阶段：正反馈闭环</h3><p><img src=\"/images/基于统计机器学习的自动回复/第三阶段.png\" alt=\"第三阶段\"></p>\n<p>很快，我们进入了第三阶段。在第三阶段之前，模型训练的操作也是需要人员去跟进的。其实，整个系统可以产生一个<code>正反馈闭环</code>，模型训练可以使用定时脚本来触发。但是，为了保证模型训练的样本是正确的，还需要加入一个<code>校对</code>的环节。</p>\n<p>每一次产生新的投诉，都会带来一条新的匹配记录，这条新记录是不能作为样本来训练的，需要人工进行校对，校对后的结果才能进行训练。于是，我们可以制定一个模型训练时刻，在这个时刻前，需要保证新记录是经过人工校对后的结果。</p>\n<h2 id=\"机器学习\"><a href=\"#机器学习\" class=\"headerlink\" title=\"机器学习\"></a>机器学习</h2><blockquote>\n<p>数据和特征决定了机器学习的上限，而模型和算法只是逼近这个上限。</p>\n</blockquote>\n<p>我们做了一个准确率折线图，记录样本数从最初的1k到最后15W样本集的评估。可以发现，从13W样本集开始，准确率开始放缓，而不是继续往上攀升。</p>\n<p><img src=\"/images/基于统计机器学习的自动回复/历史投诉记录准确率.png\" alt=\"历史投诉记录准确率\"></p>\n","categories":["技术"],"tags":["机器学习","NLP","文本分类","监督学习"]},{"title":"如何在impala-shell之外使用特定用户set变量","url":"/2020/05/20/%E5%A6%82%E4%BD%95%E5%9C%A8impala-shell%E4%B9%8B%E5%A4%96%E4%BD%BF%E7%94%A8%E7%89%B9%E5%AE%9Aset%E5%8F%98%E9%87%8F/","content":"<h2 id=\"版本信息\"><a href=\"#版本信息\" class=\"headerlink\" title=\"版本信息\"></a>版本信息</h2><ul>\n<li>impalad 2.5.0-cdh5.7.*</li>\n</ul>\n<h2 id=\"问题\"><a href=\"#问题\" class=\"headerlink\" title=\"问题\"></a>问题</h2><p>通过查阅<a href=\"https://docs.cloudera.com/documentation/enterprise/5-7-x/topics/impala_set.html#set\" target=\"_blank\" rel=\"noopener\">官网</a>可以知道，用户特定变量无法在除<code>impala-shell</code>外使用，这对使用odbc、jdbc或thrift的客户端来说，SQL维护会造成很大困扰 —— 在长SQL中改变一个或多个条件的值</p>\n<p>在impala-shell中，可以通过<code>set</code>语句或<code>--var</code>参数设置会话上下文中的变量，如下</p>\n<h3 id=\"使用set\"><a href=\"#使用set\" class=\"headerlink\" title=\"使用set\"></a>使用set</h3><figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">[localhost:21000] &gt; <span class=\"built_in\">set</span> var:table_name=production_table;</span><br><span class=\"line\">[localhost:21000] &gt; <span class=\"built_in\">set</span> var:cutoff=3;</span><br><span class=\"line\">[localhost:21000] &gt; select s from <span class=\"variable\">$&#123;var:table_name&#125;</span> order by s <span class=\"built_in\">limit</span> <span class=\"variable\">$&#123;var:cutoff&#125;</span>;</span><br><span class=\"line\">Query: select s from production_table order by s <span class=\"built_in\">limit</span> 3</span><br></pre></td></tr></table></figure>\n<h3 id=\"使用–var\"><a href=\"#使用–var\" class=\"headerlink\" title=\"使用–var\"></a>使用–var</h3><figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">$ impala-shell --var=table_name=staging_table --var=cutoff=2</span><br><span class=\"line\">[localhost:21000] &gt; select s from <span class=\"variable\">$&#123;var:table_name&#125;</span> order by s <span class=\"built_in\">limit</span> <span class=\"variable\">$&#123;var:cutoff&#125;</span>;</span><br><span class=\"line\">Query: select s from staging_table order by s <span class=\"built_in\">limit</span> 2</span><br></pre></td></tr></table></figure>\n<h2 id=\"模拟impala-shell：通过程序替换\"><a href=\"#模拟impala-shell：通过程序替换\" class=\"headerlink\" title=\"模拟impala-shell：通过程序替换\"></a>模拟impala-shell：通过程序替换</h2><figure class=\"highlight sql\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">set</span> <span class=\"keyword\">var</span>:table_name=production_table;</span><br><span class=\"line\"><span class=\"keyword\">set</span> <span class=\"keyword\">var</span>:cutoff=<span class=\"number\">3</span>;</span><br><span class=\"line\"><span class=\"keyword\">select</span> s <span class=\"keyword\">from</span> $&#123;<span class=\"keyword\">var</span>:table_name&#125; <span class=\"keyword\">order</span> <span class=\"keyword\">by</span> s <span class=\"keyword\">limit</span> $&#123;<span class=\"keyword\">var</span>:cutoff&#125;;</span><br></pre></td></tr></table></figure>\n<p>有以上sql，</p>\n<ol>\n<li>通过正则表达式抽出<code>set语句</code></li>\n<li>替换到由<code>${}</code>包裹的变量名</li>\n<li>使用odbc/jdbc/thrift执行替换变量后的sql</li>\n</ol>\n","categories":["技术"],"tags":["PHP","impala"]},{"title":"安装impala-shell遇到的问题","url":"/2017/12/05/%E5%AE%89%E8%A3%85impala-shell%E9%81%87%E5%88%B0%E7%9A%84%E9%97%AE%E9%A2%98/","content":"<h3 id=\"下载rpm包\"><a href=\"#下载rpm包\" class=\"headerlink\" title=\"下载rpm包\"></a>下载rpm包</h3><p> <a href=\"http://archive.cloudera.com/cdh5/redhat/6/x86_64/cdh/5.4.9/RPMS/x86_64/\" target=\"_blank\" rel=\"noopener\">impala-shell-2.2.0+cdh5.4.9+0-1.cdh5.4.9.p0.30.el6.x86_64.rpm</a></p>\n<h3 id=\"安装\"><a href=\"#安装\" class=\"headerlink\" title=\"安装\"></a>安装</h3><figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\"># yum install python-setuptools</span><br><span class=\"line\"># rpm -ivh impala-shell-2.2.0+cdh5.4.9+0-1.cdh5.4.9.p0.30.el6.x86_64.rpm</span><br></pre></td></tr></table></figure>\n<h4 id=\"报错\"><a href=\"#报错\" class=\"headerlink\" title=\"报错\"></a>报错</h4><figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">error: Failed dependencies: libpython2.6.so.1.0()(64bit) is needed by impala-shell-2.2.0+cdh5.4.9+0-1.cdh5.4.9.p0.30.el6.x86_64.rpm</span><br></pre></td></tr></table></figure>\n<h4 id=\"下载并安装\"><a href=\"#下载并安装\" class=\"headerlink\" title=\"下载并安装\"></a>下载并安装</h4><figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">rpm -Uvh lib64python2.6-2.6.6-1mdv2011.0.x86_64.rpm</span><br></pre></td></tr></table></figure>\n<h3 id=\"连接\"><a href=\"#连接\" class=\"headerlink\" title=\"连接\"></a>连接</h3><figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\"># impala-shell</span><br></pre></td></tr></table></figure>\n<h4 id=\"报错-1\"><a href=\"#报错-1\" class=\"headerlink\" title=\"报错\"></a>报错</h4><figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">···</span><br><span class=\"line\">···</span><br><span class=\"line\">ImportError: libsasl2.so.2: cannot open shared object file: No such file or directory</span><br></pre></td></tr></table></figure>\n<h4 id=\"检查sasl\"><a href=\"#检查sasl\" class=\"headerlink\" title=\"检查sasl\"></a>检查sasl</h4><figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">rpm -qa | grep sasl</span><br><span class=\"line\">rpm -ql cyrus-sasl-lib</span><br></pre></td></tr></table></figure>\n<p>发现 libsasl2.so.3被 cyrus-sasl-lib 安装在了 /usr/lib64/.这个目录下</p>\n<h4 id=\"重装sasl\"><a href=\"#重装sasl\" class=\"headerlink\" title=\"重装sasl\"></a>重装sasl</h4><figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">pip uninstall sasl</span><br><span class=\"line\">pip install sasl</span><br></pre></td></tr></table></figure>\n<p>pip不存在</p>\n<h4 id=\"安装pip\"><a href=\"#安装pip\" class=\"headerlink\" title=\"安装pip\"></a>安装pip</h4><figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">yun install -y pip</span><br><span class=\"line\">Nothing to do</span><br></pre></td></tr></table></figure>\n<h4 id=\"安装epel扩展源\"><a href=\"#安装epel扩展源\" class=\"headerlink\" title=\"安装epel扩展源\"></a>安装epel扩展源</h4><figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">sudo yum -y install epel-release</span><br><span class=\"line\">yum -y install python-pip</span><br></pre></td></tr></table></figure>\n<h4 id=\"卸载sasl\"><a href=\"#卸载sasl\" class=\"headerlink\" title=\"卸载sasl\"></a>卸载sasl</h4><figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">pip uninstall sasl</span><br></pre></td></tr></table></figure>\n<p>无法删除</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">Cannot uninstall requirement sasl, not installed</span><br></pre></td></tr></table></figure>\n<h4 id=\"安装sasl\"><a href=\"#安装sasl\" class=\"headerlink\" title=\"安装sasl\"></a>安装sasl</h4><figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">pip install sasl</span><br><span class=\"line\"></span><br><span class=\"line\">sasl/saslwrapper.cpp:8:22: fatal error: pyconfig.h: No such file or directory</span><br><span class=\"line\">#include &quot;pyconfig.h&quot;</span><br><span class=\"line\">^</span><br><span class=\"line\">compilation terminated.</span><br><span class=\"line\">error: command &apos;gcc&apos; failed with exit status 1</span><br></pre></td></tr></table></figure>\n<h4 id=\"继续找问题，回到这一步\"><a href=\"#继续找问题，回到这一步\" class=\"headerlink\" title=\"继续找问题，回到这一步\"></a>继续找问题，回到这一步</h4><figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">ImportError: libsasl2.so.2: cannot open shared object file: No such file or directory</span><br></pre></td></tr></table></figure>\n<h4 id=\"解决方案\"><a href=\"#解决方案\" class=\"headerlink\" title=\"解决方案\"></a>解决方案</h4><figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">Sometimes these version problems can be resolved by creating a symbolic link with another version of the same library. If you have libsasl2.so installed, create a linked file libsasl2.so.2 for the same:</span><br><span class=\"line\"></span><br><span class=\"line\">sudo ln -s /usr/lib64/libsasl2.so /usr/lib64/libsasl2.so.2</span><br></pre></td></tr></table></figure>","categories":["技术"],"tags":["问题排查","impala"]},{"title":"详解PHP连接Impala安装与配置","url":"/2017/12/08/%E8%AF%A6%E8%A7%A3PHP%E8%BF%9E%E6%8E%A5Impala%E5%AE%89%E8%A3%85%E4%B8%8E%E9%85%8D%E7%BD%AE/","content":"<h3 id=\"Impala的SQL语法参考\"><a href=\"#Impala的SQL语法参考\" class=\"headerlink\" title=\"Impala的SQL语法参考\"></a>Impala的SQL语法参考</h3><p><a href=\"https://www.cloudera.com/documentation/enterprise/latest/topics/impala_langref_sql.html\" target=\"_blank\" rel=\"noopener\">https://www.cloudera.com/documentation/enterprise/latest/topics/impala_langref_sql.html</a></p>\n<h3 id=\"PHP通过Thrift连接Impala\"><a href=\"#PHP通过Thrift连接Impala\" class=\"headerlink\" title=\"PHP通过Thrift连接Impala\"></a>PHP通过Thrift连接Impala</h3><h4 id=\"安装thrift服务\"><a href=\"#安装thrift服务\" class=\"headerlink\" title=\"安装thrift服务\"></a>安装thrift服务</h4><ul>\n<li>Thrift最初由Facebook开发用做系统内各语言之间的RPC通信.</li>\n<li>Thrift是一款可伸缩跨语言的服务开发框架, 该框架已经开源并且加入的Apache项目.</li>\n<li>Thrift主要功能是: 通过自定义的Interface Definition Language(IDL), 可以创建基于RPC的客户端和服务端的服务代码.</li>\n<li>数据和服务代码的生成是通过Thrift内置的代码生成器来实现的, Thrift的跨语言性体现在:它可以生成C++/Java/Python/PHP/Ruby/Erlang/Perl/Haskell/C#/Cocoa/JavaScript/Node.js/Smalltalk/OCaml/Delphi等语言的代码,且它们之间可以进行透明的通信.</li>\n</ul>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">[root@localhost tools]<span class=\"comment\"># rpm -ivh thrift-0.9.0-28.1.i686.rpm</span></span><br><span class=\"line\"></span><br><span class=\"line\">warning: thrift-0.9.0-28.1.i686.rpm: Header V3 DSA/SHA1 Signature, key ID a949b429: NOKEY</span><br><span class=\"line\">error: Failed dependencies:</span><br><span class=\"line\">libc.so.6 is needed by thrift-0.9.0-28.1.i686</span><br><span class=\"line\">libc.so.6(GLIBC_2.0) is needed by thrift-0.9.0-28.1.i686</span><br><span class=\"line\">libc.so.6(GLIBC_2.1) is needed by thrift-0.9.0-28.1.i686</span><br><span class=\"line\">libc.so.6(GLIBC_2.1.3) is needed by thrift-0.9.0-28.1.i686</span><br><span class=\"line\">libc.so.6(GLIBC_2.3) is needed by thrift-0.9.0-28.1.i686</span><br><span class=\"line\">libc.so.6(GLIBC_2.3.4) is needed by thrift-0.9.0-28.1.i686</span><br><span class=\"line\">libc.so.6(GLIBC_2.4) is needed by thrift-0.9.0-28.1.i686</span><br><span class=\"line\">libgcc_s.so.1 is needed by thrift-0.9.0-28.1.i686</span><br><span class=\"line\">libgcc_s.so.1(GCC_3.0) is needed by thrift-0.9.0-28.1.i686</span><br><span class=\"line\">libm.so.6 is needed by thrift-0.9.0-28.1.i686</span><br><span class=\"line\">libstdc++.so.6 is needed by thrift-0.9.0-28.1.i686</span><br><span class=\"line\">libstdc++.so.6(CXXABI_1.3) is needed by thrift-0.9.0-28.1.i686</span><br><span class=\"line\">libstdc++.so.6(CXXABI_1.3.1) is needed by thrift-0.9.0-28.1.i686</span><br><span class=\"line\">libstdc++.so.6(GLIBCXX_3.4) is needed by thrift-0.9.0-28.1.i686</span><br><span class=\"line\">libstdc++.so.6(GLIBCXX_3.4.11) is needed by thrift-0.9.0-28.1.i686</span><br><span class=\"line\">libstdc++.so.6(GLIBCXX_3.4.9) is needed by thrift-0.9.0-28.1.i686</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">#报错, 缺少相关依赖.</span></span><br><span class=\"line\"><span class=\"comment\">#解决libc.so.6依赖:</span></span><br><span class=\"line\"></span><br><span class=\"line\">[root@localhost tools]<span class=\"comment\"># yum list glibc*</span></span><br><span class=\"line\">[root@localhost tools]<span class=\"comment\"># yum install glibc.i686</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">#解决libgcc_s.so.1依赖:到https://rpmfind.net/linux/rpm2html/search.php?query=libgcc_s.so.1下载相关依赖rpm包</span></span><br><span class=\"line\"></span><br><span class=\"line\">[root@localhost tools]<span class=\"comment\"># rpm -ivh libgcc-4.4.7-18.el6.x86_64.rpm</span></span><br><span class=\"line\">[root@localhost tools]<span class=\"comment\"># rpm -ivh libgcc-4.4.7-18.el6.i686.rpm</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">#解决libstdc++.so.6依赖:</span></span><br><span class=\"line\"><span class=\"comment\">#到https://rpmfind.net/linux/rpm2html/search.php?query=libstdc++.so.6下载相关依赖rpm包</span></span><br><span class=\"line\"></span><br><span class=\"line\">[root@localhost tools]<span class=\"comment\"># rpm -ivh libstdc++-4.4.7-18.el6.i686.rpm</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">#最后重新安装即可:</span></span><br><span class=\"line\">[root@localhost tools]<span class=\"comment\"># rpm -ivh thrift-0.9.0-28.1.i686.rpm</span></span><br><span class=\"line\">        warning: thrift-0.9.0-28.1.i686.rpm: Header V3 DSA/SHA1 Signature, key ID a949b429: NOKEY</span><br><span class=\"line\">        Preparing...                <span class=\"comment\">########################################### [100%]</span></span><br><span class=\"line\">           1:thrift                 <span class=\"comment\">########################################### [100%]</span></span><br></pre></td></tr></table></figure>\n<h4 id=\"检查是否安装成功\"><a href=\"#检查是否安装成功\" class=\"headerlink\" title=\"检查是否安装成功\"></a>检查是否安装成功</h4><p>a. 首先创建Thrift的语法规则文件, 命名为server.thrift, 内容如下:</p>\n<figure class=\"highlight vim\"><table><tr><td class=\"code\"><pre><span class=\"line\">struct message</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    i32 seqId,</span><br><span class=\"line\">    <span class=\"built_in\">string</span> content</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">service serDemo</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    void <span class=\"keyword\">put</span>(message msg)</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>b. 然后shell下执行命令:</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># thrift -gen php server.thrift</span></span><br></pre></td></tr></table></figure>\n<p>该语句用于创建php服务框架, 创建成功后会在该目录下生成gen-php文件夹.</p>\n<h4 id=\"impala的SQL查询参考\"><a href=\"#impala的SQL查询参考\" class=\"headerlink\" title=\"impala的SQL查询参考\"></a>impala的SQL查询参考</h4><p><a href=\"http://www.cloudera.com/documentation/archive/impala/2-x/2-1-x/topics/impala_select.html\" target=\"_blank\" rel=\"noopener\">http://www.cloudera.com/documentation/archive/impala/2-x/2-1-x/topics/impala_select.html</a></p>\n<h4 id=\"连接PHP例子参考\"><a href=\"#连接PHP例子参考\" class=\"headerlink\" title=\"连接PHP例子参考\"></a>连接PHP例子参考</h4><p><a href=\"https://github.com/Automattic/php-thrift-sql\" target=\"_blank\" rel=\"noopener\">https://github.com/Automattic/php-thrift-sql</a></p>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># git clone https://github.com/Automattic/php-thrift-sql.git</span></span><br><span class=\"line\"><span class=\"comment\"># cd php-thrift-sql/</span></span><br><span class=\"line\"><span class=\"comment\"># php -c php.ini build.php  【重新生成ThriftSQL.phar文件】</span></span><br><span class=\"line\"><span class=\"comment\"># vim test.php</span></span><br></pre></td></tr></table></figure>\n<p>内容如下:</p>\n<figure class=\"highlight php\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&lt;?php</span></span><br><span class=\"line\"><span class=\"comment\">// Load this lib</span></span><br><span class=\"line\"><span class=\"keyword\">require_once</span> <span class=\"keyword\">__DIR__</span> . <span class=\"string\">'/ThriftSQL.phar'</span>;</span><br><span class=\"line\"><span class=\"comment\">// 1.Try out a Hive query</span></span><br><span class=\"line\">$hive = <span class=\"keyword\">new</span> \\ThriftSQL\\Hive(<span class=\"string\">'192.168.8.207'</span>, <span class=\"number\">21050</span>);</span><br><span class=\"line\">$hiveTables = $hive</span><br><span class=\"line\">    -&gt;setSasl(<span class=\"keyword\">false</span>) <span class=\"comment\">// To turn SASL auth off, on by default</span></span><br><span class=\"line\">    -&gt;connect()</span><br><span class=\"line\">    -&gt;queryAndFetchAll(<span class=\"string\">'SHOW TABLES'</span>);</span><br><span class=\"line\">print_r($hiveTables);</span><br><span class=\"line\"><span class=\"comment\">// 2.Try out an Impala query</span></span><br><span class=\"line\">$impala = <span class=\"keyword\">new</span> \\ThriftSQL\\Impala(<span class=\"string\">'192.168.8.207'</span>);</span><br><span class=\"line\">$impalaTables = $impala</span><br><span class=\"line\">    -&gt;connect()</span><br><span class=\"line\">    -&gt;queryAndFetchAll(<span class=\"string\">'SHOW TABLES'</span>);</span><br><span class=\"line\">print_r($impalaTables);</span><br><span class=\"line\"><span class=\"comment\">// 3.Try out an Impala query</span></span><br><span class=\"line\">$impalaDatas = $impala</span><br><span class=\"line\">    -&gt;connect()</span><br><span class=\"line\">    -&gt;queryAndFetchAll(<span class=\"string\">'select * from db_mcfx_log.t_log_sdk_log_user'</span>);</span><br><span class=\"line\">print_r($impalaDatas);</span><br><span class=\"line\"><span class=\"comment\">// 4.Don't forget to clear the client and close socket.</span></span><br><span class=\"line\">$hive-&gt;disconnect();</span><br><span class=\"line\">$impala-&gt;disconnect();</span><br><span class=\"line\"><span class=\"meta\">?&gt;</span></span><br></pre></td></tr></table></figure>\n<p>然后执行test.php</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># php test.php</span></span><br></pre></td></tr></table></figure>\n<h3 id=\"使PHP通过ODBC连接Impala-方法1\"><a href=\"#使PHP通过ODBC连接Impala-方法1\" class=\"headerlink\" title=\"使PHP通过ODBC连接Impala(方法1)\"></a>使PHP通过ODBC连接Impala(方法1)</h3><h4 id=\"安装ODBC相关软件包以及ImpalaODBC驱动\"><a href=\"#安装ODBC相关软件包以及ImpalaODBC驱动\" class=\"headerlink\" title=\"安装ODBC相关软件包以及ImpalaODBC驱动\"></a>安装ODBC相关软件包以及ImpalaODBC驱动</h4><h5 id=\"系统版本\"><a href=\"#系统版本\" class=\"headerlink\" title=\"系统版本\"></a>系统版本</h5><p>centos6，别用centos7，很多lib不兼容，经常会看到这样的错误，解决起来非常棘手，即使下载安装了i686相关的包也不行。</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">libxxx()(64bit) is needed by xxx</span><br></pre></td></tr></table></figure>\n<h4 id=\"使用ODBC连接数据库-分为两个主要部分\"><a href=\"#使用ODBC连接数据库-分为两个主要部分\" class=\"headerlink\" title=\"使用ODBC连接数据库, 分为两个主要部分:\"></a>使用ODBC连接数据库, 分为两个主要部分:</h4><ul>\n<li>安装ODBC管理程序(例如unixODBC/iODBC等), 这里管理程序选择unixODBC</li>\n<li>安装每个数据库对应的ODBC驱动程序, 而Impala的ODBC驱动则参考Cloudera-ODBC-Driver-for-Impala-Install-Guide</li>\n</ul>\n<h4 id=\"ClouderaImpalaODBC到Cloudera官网下载\"><a href=\"#ClouderaImpalaODBC到Cloudera官网下载\" class=\"headerlink\" title=\"ClouderaImpalaODBC到Cloudera官网下载:\"></a>ClouderaImpalaODBC到Cloudera官网下载:</h4><p><a href=\"https://downloads.cloudera.com/connectors/impala-2.5.15.1015/Linux/EL6/ClouderaImpalaODBC-2.5.15.1015-1.el6.x86_64.rpm\" target=\"_blank\" rel=\"noopener\">https://downloads.cloudera.com/connectors/impala-2.5.15.1015/Linux/EL6/ClouderaImpalaODBC-2.5.15.1015-1.el6.x86_64.rpm</a></p>\n<h4 id=\"若已安装其他版本则先卸载原来安装的\"><a href=\"#若已安装其他版本则先卸载原来安装的\" class=\"headerlink\" title=\"若已安装其他版本则先卸载原来安装的\"></a>若已安装其他版本则先卸载原来安装的</h4><figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># rpm -q ClouderaImpalaODBC</span></span><br><span class=\"line\"><span class=\"comment\"># rpm -e ClouderaImpalaODBC-2.5.30.1011-1.x86_64</span></span><br><span class=\"line\"><span class=\"comment\"># yum install -y unixODBC*</span></span><br><span class=\"line\"><span class=\"comment\"># rpm -ivh ClouderaImpalaODBC-2.5.15.1015-1.el6.x86_64.rpm</span></span><br></pre></td></tr></table></figure>\n<p>使用odbcinst命令查看unixODBC配置文件路径.<br>不同版本的unixODBC配置文件路径是不同的, 如果是源代码方式安装unixODBC, 也可以通过编译参数–sysconfdir指定.</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">[root@localhost ~]<span class=\"comment\"># odbcinst -j</span></span><br><span class=\"line\">unixODBC 2.2.14</span><br><span class=\"line\">DRIVERS............: /etc/odbcinst.ini</span><br><span class=\"line\">SYSTEM DATA SOURCES: /etc/odbc.ini</span><br><span class=\"line\">FILE DATA SOURCES..: /etc/ODBCDataSources</span><br><span class=\"line\">USER DATA SOURCES..: /root/.odbc.ini</span><br><span class=\"line\">SQLULEN Size.......: 8</span><br><span class=\"line\">SQLLEN Size........: 8</span><br><span class=\"line\">SQLSETPOSIROW Size.: 8</span><br></pre></td></tr></table></figure>\n<h4 id=\"增加环境变量-注意重启后失效-可在-etc-profile里面改使永久生效\"><a href=\"#增加环境变量-注意重启后失效-可在-etc-profile里面改使永久生效\" class=\"headerlink\" title=\"增加环境变量(注意重启后失效, 可在/etc/profile里面改使永久生效)\"></a>增加环境变量(注意重启后失效, 可在/etc/profile里面改使永久生效)</h4><figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># export LD_LIBRARY_PATH=/usr/local/lib:/opt/cloudera/impalaodbc/lib/64</span></span><br></pre></td></tr></table></figure>\n<h4 id=\"动态编译pdo-odbc扩展\"><a href=\"#动态编译pdo-odbc扩展\" class=\"headerlink\" title=\"动态编译pdo-odbc扩展\"></a>动态编译pdo-odbc扩展</h4><figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">[root@localhost ~]<span class=\"comment\"># cd /home/xxx/php-7.1.3 # 根据自己的PHP源码路径</span></span><br><span class=\"line\">[root@localhost php-7.1.3]<span class=\"comment\"># cd ext/pdo_odbc/</span></span><br><span class=\"line\">[root@localhost pdo_odbc]<span class=\"comment\"># /application/php/bin/phpize</span></span><br><span class=\"line\">[root@localhost pdo_odbc]<span class=\"comment\"># ./configure --help </span></span><br><span class=\"line\"><span class=\"comment\"># 注意，PHP多版本共存下需要指定PHP</span></span><br><span class=\"line\">[root@localhost pdo_odbc]<span class=\"comment\"># ./configure --with-php-config=/xxx/bin/php-config --with-pdo-odbc=unixODBC,/usr/</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># configure: error: Cannot find header file(s) for pdo_odbc</span></span><br><span class=\"line\"><span class=\"comment\"># 完全安装好unixODBC和unixODBC-devel</span></span><br><span class=\"line\"></span><br><span class=\"line\">[root@localhost pdo_odbc]<span class=\"comment\"># make &amp;&amp; make install</span></span><br><span class=\"line\"><span class=\"comment\"># 编辑php.ini加入pdo_odbc.so扩展</span></span><br><span class=\"line\">[root@localhost pdo_odbc]<span class=\"comment\"># vim /xxx/php.ini</span></span><br><span class=\"line\">extension = pdo_odbc.so</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 重启php查看配置如下:</span></span><br><span class=\"line\">[root@localhost pdo_odbc]<span class=\"comment\"># /etc/init.d/php-fpm restart</span></span><br><span class=\"line\">[root@localhost pdo_odbc]<span class=\"comment\"># php -i |grep odbc</span></span><br><span class=\"line\">PDO drivers =&gt; mysql, sqlite, odbc</span><br><span class=\"line\">LD_LIBRARY_PATH =&gt; /usr/<span class=\"built_in\">local</span>/lib:/opt/cloudera/impalaodbc/lib/64</span><br><span class=\"line\"><span class=\"variable\">$_SERVER</span>[<span class=\"string\">'LD_LIBRARY_PATH'</span>] =&gt; /usr/<span class=\"built_in\">local</span>/lib:/opt/cloudera/impalaodbc/lib/64</span><br></pre></td></tr></table></figure>\n<h4 id=\"动态编译odbc扩展\"><a href=\"#动态编译odbc扩展\" class=\"headerlink\" title=\"动态编译odbc扩展\"></a>动态编译odbc扩展</h4><figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">[root@localhost ~]<span class=\"comment\"># cd /home/xxx/php-7.1.3</span></span><br><span class=\"line\">[root@localhost php-7.1.3]<span class=\"comment\"># cd ext/odbc/</span></span><br><span class=\"line\">[root@localhost odbc]<span class=\"comment\"># /application/php/bin/phpize</span></span><br><span class=\"line\">[root@localhost odbc]<span class=\"comment\"># ./configure --help</span></span><br><span class=\"line\">[root@localhost odbc]<span class=\"comment\"># ./configure --with-php-config=/xxx/php7.1.3/bin/php-config --with-unixODBC=/usr/</span></span><br><span class=\"line\">[root@localhost odbc]<span class=\"comment\"># make</span></span><br><span class=\"line\">[root@localhost odbc]<span class=\"comment\"># make install</span></span><br><span class=\"line\">Installing shared extensions:     /xxx/php7.1.3/lib/php/extensions/no-debug-non-zts-20160303/</span><br><span class=\"line\">root@localhost odbc]<span class=\"comment\"># ll /xxx/php7.1.3/lib/php/extensions/no-debug-non-zts-20160303/</span></span><br><span class=\"line\">total 5556</span><br><span class=\"line\">-rwxr-xr-x 1 root root  350680 Mar 24 15:42 memcached.so</span><br><span class=\"line\">-rwxr-xr-x 1 root root  255310 Mar 24 15:00 memcache.so</span><br><span class=\"line\">-rwxr-xr-x 1 root root  173215 Jun 12 09:24 odbc.so</span><br><span class=\"line\">-rwxr-xr-x 1 root root 3020972 Mar 24 14:23 opcache.a</span><br><span class=\"line\">-rwxr-xr-x 1 root root 1750437 Mar 24 14:23 opcache.so</span><br><span class=\"line\">-rwxr-xr-x 1 root root  126680 May 23 14:04 pdo_odbc.so</span><br><span class=\"line\"><span class=\"comment\"># 编辑php.ini加入odbc.so扩展</span></span><br><span class=\"line\">[root@localhost odbc]<span class=\"comment\"># vim /xxx/php/lib/php.ini</span></span><br><span class=\"line\">extension = odbc.so</span><br><span class=\"line\"><span class=\"comment\"># 重启php查看配置信息:</span></span><br><span class=\"line\">[root@localhost odbc]<span class=\"comment\"># /etc/init.d/php-fpm restart</span></span><br><span class=\"line\">[root@localhost odbc]<span class=\"comment\"># php -i |grep odbc</span></span><br><span class=\"line\">odbc</span><br><span class=\"line\">odbc.allow_persistent =&gt; On =&gt; On</span><br><span class=\"line\">odbc.check_persistent =&gt; On =&gt; On</span><br><span class=\"line\">odbc.default_cursortype =&gt; Static cursor =&gt; Static cursor</span><br><span class=\"line\">odbc.default_db =&gt; no value =&gt; no value</span><br><span class=\"line\">odbc.default_pw =&gt; no value =&gt; no value</span><br><span class=\"line\">odbc.default_user =&gt; no value =&gt; no value</span><br><span class=\"line\">odbc.defaultbinmode =&gt; <span class=\"built_in\">return</span> as is =&gt; <span class=\"built_in\">return</span> as is</span><br><span class=\"line\">odbc.defaultlrl =&gt; <span class=\"built_in\">return</span> up to 4096 bytes =&gt; <span class=\"built_in\">return</span> up to 4096 bytes</span><br><span class=\"line\">odbc.max_links =&gt; Unlimited =&gt; Unlimited</span><br><span class=\"line\">odbc.max_persistent =&gt; Unlimited =&gt; Unlimited</span><br><span class=\"line\">PDO drivers =&gt; mysql, sqlite, odbc</span><br><span class=\"line\">LD_LIBRARY_PATH =&gt; /usr/<span class=\"built_in\">local</span>/lib:/opt/cloudera/impalaodbc/lib/64</span><br><span class=\"line\">PWD =&gt; /xxx/php-7.1.3/ext/odbc</span><br><span class=\"line\"><span class=\"variable\">$SERVER</span>[<span class=\"string\">'LD_LIBRARY_PATH'</span>] =&gt; /usr/<span class=\"built_in\">local</span>/lib:/opt/cloudera/impalaodbc/lib/64</span><br><span class=\"line\"><span class=\"variable\">$_SERVER</span>[<span class=\"string\">'PWD'</span>] =&gt; /xxx/php-7.1.3/ext/odbc</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 注意, 如果configure编译的时候出现报错如下:</span></span><br><span class=\"line\">checking <span class=\"keyword\">for</span> Adabas support... cp: cannot <span class=\"built_in\">stat</span> <span class=\"string\">'/usr/local/lib/odbclib.a'</span>: No such file or directory</span><br><span class=\"line\">configure: error: ODBC header file <span class=\"string\">'/usr/local/incl/sqlext.h'</span> not found!</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 那么可进行修改configure配置文件:</span></span><br><span class=\"line\">[root@localhost odbc]<span class=\"comment\"># sed -ri 's@^ *test +\"\\$PHP.\" *= *\"no\" *&amp;&amp; *PHP_.=yes *$@#&amp;@g' configure</span></span><br></pre></td></tr></table></figure>\n<h4 id=\"修改-etc-odbc-ini替换为如下-注意！！下文所有的配置文件的每行都一定要保持左对齐！\"><a href=\"#修改-etc-odbc-ini替换为如下-注意！！下文所有的配置文件的每行都一定要保持左对齐！\" class=\"headerlink\" title=\"修改/etc/odbc.ini替换为如下:(注意！！下文所有的配置文件的每行都一定要保持左对齐！)\"></a>修改/etc/odbc.ini替换为如下:(注意！！下文所有的配置文件的每行都一定要保持左对齐！)</h4><figure class=\"highlight vim\"><table><tr><td class=\"code\"><pre><span class=\"line\">[ODBC]</span><br><span class=\"line\"></span><br><span class=\"line\">Specify any <span class=\"keyword\">global</span> ODBC configuration here such <span class=\"keyword\">as</span> ODBC tracing.</span><br><span class=\"line\">[ODBC Data Sources]</span><br><span class=\"line\">#Cloudera Hive <span class=\"number\">32</span>-bit=Cloudera ODBC Driver <span class=\"keyword\">for</span> Apache Hive <span class=\"number\">32</span>-bit</span><br><span class=\"line\">impala=Cloudera ODBC Driver <span class=\"keyword\">for</span> Impala <span class=\"number\">64</span>-bit</span><br><span class=\"line\">[impala]</span><br><span class=\"line\"></span><br><span class=\"line\">Description: DSN Description.</span><br><span class=\"line\">This key <span class=\"keyword\">is</span> not necessary <span class=\"built_in\">and</span> <span class=\"keyword\">is</span> <span class=\"keyword\">only</span> <span class=\"keyword\">to</span> give <span class=\"keyword\">a</span> description of the data <span class=\"keyword\">source</span>.</span><br><span class=\"line\">Description=Cloudera ODBC Driver <span class=\"keyword\">for</span> Impala (<span class=\"number\">64</span>-bit) DSN</span><br><span class=\"line\"></span><br><span class=\"line\">Driver: The location where the ODBC driver <span class=\"keyword\">is</span> installed <span class=\"keyword\">to</span>.</span><br><span class=\"line\">Driver=/<span class=\"keyword\">opt</span>/cloudera/impalaodbc/lib/<span class=\"number\">64</span>/libclouderaimpalaodbc64.<span class=\"keyword\">so</span></span><br><span class=\"line\"></span><br><span class=\"line\">The DriverUnicodeEncoding setting <span class=\"keyword\">is</span> <span class=\"keyword\">only</span> used <span class=\"keyword\">for</span> SimbaDM</span><br><span class=\"line\">When <span class=\"keyword\">set</span> <span class=\"keyword\">to</span> <span class=\"number\">1</span>, SimbaDM runs in UTF-<span class=\"number\">16</span> <span class=\"keyword\">mode</span>.</span><br><span class=\"line\">When <span class=\"keyword\">set</span> <span class=\"keyword\">to</span> <span class=\"number\">2</span>, SimbaDM runs in UTF-<span class=\"number\">8</span> <span class=\"keyword\">mode</span>.</span><br><span class=\"line\">#DriverUnicodeEncoding=<span class=\"number\">2</span></span><br><span class=\"line\"></span><br><span class=\"line\">Values <span class=\"keyword\">for</span> HOST, PORT, KrbFQDN, <span class=\"built_in\">and</span> KrbServiceName should <span class=\"keyword\">be</span> <span class=\"keyword\">set</span> here.</span><br><span class=\"line\">They can also <span class=\"keyword\">be</span> specified <span class=\"keyword\">on</span> the connection <span class=\"built_in\">string</span>.</span><br><span class=\"line\">HOST=xxx</span><br><span class=\"line\">PORT=xxx</span><br><span class=\"line\">Database=default</span><br><span class=\"line\"></span><br><span class=\"line\">The authentication mechanism.</span><br><span class=\"line\"><span class=\"number\">0</span> - No authentication (NOSASL)</span><br><span class=\"line\"><span class=\"number\">1</span> - Kerberos authentication (SASL)</span><br><span class=\"line\"><span class=\"number\">2</span> - Username authentication (SASL)</span><br><span class=\"line\"><span class=\"number\">3</span> - Username/password authentication (NOSASL <span class=\"built_in\">or</span> SASL depending <span class=\"keyword\">on</span> UseSASL configuration)</span><br><span class=\"line\">AuthMech=<span class=\"number\">0</span></span><br><span class=\"line\"></span><br><span class=\"line\">Set <span class=\"keyword\">to</span> <span class=\"number\">1</span> <span class=\"keyword\">to</span> use SASL <span class=\"keyword\">for</span> authentication.</span><br><span class=\"line\">Set <span class=\"keyword\">to</span> <span class=\"number\">0</span> <span class=\"keyword\">to</span> not use SASL.</span><br><span class=\"line\">When using Kerberos authentication (SASL) <span class=\"built_in\">or</span> Username authentication (SASL) SASL <span class=\"keyword\">is</span> always used</span><br><span class=\"line\"><span class=\"built_in\">and</span> this configuration <span class=\"keyword\">is</span> ignored. SASL <span class=\"keyword\">is</span> always not used <span class=\"keyword\">for</span> No authentication (NOSASL).</span><br><span class=\"line\">UseSASL=<span class=\"number\">0</span></span><br><span class=\"line\"></span><br><span class=\"line\">Kerberos related settings.</span><br><span class=\"line\">KrbFQDN=</span><br><span class=\"line\">KrbRealm=</span><br><span class=\"line\">KrbServiceName=</span><br><span class=\"line\"></span><br><span class=\"line\">Username/password authentication with SASL settings.</span><br><span class=\"line\">UID=hdfs</span><br><span class=\"line\">PWD=</span><br><span class=\"line\"></span><br><span class=\"line\">Set <span class=\"keyword\">to</span> <span class=\"number\">0</span> <span class=\"keyword\">to</span> disable SSL.</span><br><span class=\"line\">Set <span class=\"keyword\">to</span> <span class=\"number\">1</span> <span class=\"keyword\">to</span> enable SSL.</span><br><span class=\"line\">SSL=<span class=\"number\">0</span></span><br><span class=\"line\">CAIssuedCertNamesMismatch=<span class=\"number\">1</span></span><br><span class=\"line\">TrustedCerts=/<span class=\"keyword\">opt</span>/cloudera/impalaodbc/lib/<span class=\"number\">64</span>/cacerts.pem</span><br><span class=\"line\"></span><br><span class=\"line\">General settings</span><br><span class=\"line\">TSaslTransportBufSize=<span class=\"number\">1000</span></span><br><span class=\"line\">RowsFetchedPerBlock=<span class=\"number\">10000</span></span><br><span class=\"line\">SocketTimeout=<span class=\"number\">0</span></span><br><span class=\"line\">StringColumnLength=<span class=\"number\">32767</span></span><br><span class=\"line\">UseNativeQuery=<span class=\"number\">0</span></span><br></pre></td></tr></table></figure>\n<h4 id=\"修改-etc-odbcins-ini替换为如下\"><a href=\"#修改-etc-odbcins-ini替换为如下\" class=\"headerlink\" title=\"修改/etc/odbcins.ini替换为如下:\"></a>修改/etc/odbcins.ini替换为如下:</h4><figure class=\"highlight vim\"><table><tr><td class=\"code\"><pre><span class=\"line\">[ODBC Drivers]</span><br><span class=\"line\">Cloudera ODBC Driver <span class=\"keyword\">for</span> Impala <span class=\"number\">64</span>-bit=Installed</span><br><span class=\"line\">#[Cloudera ODBC Driver <span class=\"keyword\">for</span> Apache Hive <span class=\"number\">32</span>-bit]</span><br><span class=\"line\">#Description=Cloudera ODBC Driver <span class=\"keyword\">for</span> Apache Hive (<span class=\"number\">32</span>-bit)</span><br><span class=\"line\">#Driver=/<span class=\"keyword\">opt</span>/cloudera/hiveodbc/lib/<span class=\"number\">32</span>/libclouderahiveodbc32.<span class=\"keyword\">so</span></span><br><span class=\"line\"></span><br><span class=\"line\">The option below <span class=\"keyword\">is</span> <span class=\"keyword\">for</span> using unixODBC when compiled with -DSQL_WCHART_CONVERT.</span><br><span class=\"line\">Execute <span class=\"string\">'odbc_config --cflags'</span> <span class=\"keyword\">to</span> determine <span class=\"keyword\">if</span> you need <span class=\"keyword\">to</span> uncomment it.</span><br><span class=\"line\">IconvEncoding=UCS-<span class=\"number\">4</span>LE</span><br><span class=\"line\">[Cloudera ODBC Driver <span class=\"keyword\">for</span> Impala <span class=\"number\">64</span>-bit]</span><br><span class=\"line\">Description=Cloudera ODBC Driver <span class=\"keyword\">for</span> Impala (<span class=\"number\">64</span>-bit)</span><br><span class=\"line\">Driver=/<span class=\"keyword\">opt</span>/cloudera/impalaodbc/lib/<span class=\"number\">64</span>/libclouderaimpalaodbc64.<span class=\"keyword\">so</span></span><br><span class=\"line\"></span><br><span class=\"line\">The option below <span class=\"keyword\">is</span> <span class=\"keyword\">for</span> using unixODBC when compiled with -DSQL_WCHART_CONVERT.</span><br><span class=\"line\">Execute <span class=\"string\">'odbc_config --cflags'</span> <span class=\"keyword\">to</span> determine <span class=\"keyword\">if</span> you need <span class=\"keyword\">to</span> uncomment it.</span><br><span class=\"line\">IconvEncoding=UCS-<span class=\"number\">4</span>LE</span><br></pre></td></tr></table></figure>\n<h4 id=\"修改-etc-cloudera-impalaodbc-ini\"><a href=\"#修改-etc-cloudera-impalaodbc-ini\" class=\"headerlink\" title=\"修改/etc/cloudera.impalaodbc.ini\"></a>修改/etc/cloudera.impalaodbc.ini</h4><figure class=\"highlight vim\"><table><tr><td class=\"code\"><pre><span class=\"line\">[Driver]</span><br><span class=\"line\"></span><br><span class=\"line\">- Note that this default DriverManagerEncoding of UTF-<span class=\"number\">32</span> <span class=\"keyword\">is</span> <span class=\"keyword\">for</span> iODBC.</span><br><span class=\"line\">- unixODBC uses UTF-<span class=\"number\">16</span> by default.</span><br><span class=\"line\">- If unixODBC was compiled with -DSQL_WCHART_CONVERT, then UTF-<span class=\"number\">32</span> <span class=\"keyword\">is</span> the correct value.</span><br><span class=\"line\">##   Execute <span class=\"string\">'odbc_config --cflags'</span> <span class=\"keyword\">to</span> determine <span class=\"keyword\">if</span> you need UTF-<span class=\"number\">32</span> <span class=\"built_in\">or</span> UTF-<span class=\"number\">16</span> <span class=\"keyword\">on</span> unixODBC</span><br><span class=\"line\"></span><br><span class=\"line\">- SimbaDM can <span class=\"keyword\">be</span> used with UTF-<span class=\"number\">8</span> <span class=\"built_in\">or</span> UTF-<span class=\"number\">16</span>.</span><br><span class=\"line\">##   The DriverUnicodeEncoding setting will cause SimbaDM <span class=\"keyword\">to</span> run in UTF-<span class=\"number\">8</span> when <span class=\"keyword\">set</span> <span class=\"keyword\">to</span> <span class=\"number\">2</span> <span class=\"built_in\">or</span> UTF-<span class=\"number\">16</span> when <span class=\"keyword\">set</span> <span class=\"keyword\">to</span> <span class=\"number\">1</span>.</span><br><span class=\"line\">DriverManagerEncoding=UTF-<span class=\"number\">32</span></span><br><span class=\"line\">ErrorMessagesPath=/<span class=\"keyword\">opt</span>/cloudera/impalaodbc/ErrorMessages</span><br><span class=\"line\">LogLevel=<span class=\"number\">0</span></span><br><span class=\"line\">LogPath=</span><br><span class=\"line\"></span><br><span class=\"line\">- Uncomment the ODBCInstLib corresponding <span class=\"keyword\">to</span> the Driver Manager being used.</span><br><span class=\"line\">- Note that the path <span class=\"keyword\">to</span> your ODBC Driver Manager must <span class=\"keyword\">be</span> specified in LD_LIBRARY_PATH (LIBPATH <span class=\"keyword\">for</span> AIX).</span><br><span class=\"line\">- Note that AIX <span class=\"built_in\">has</span> <span class=\"keyword\">a</span> different format <span class=\"keyword\">for</span> specifying its shared libraries.</span><br><span class=\"line\">Generic ODBCInstLib</span><br><span class=\"line\">#   iODBC</span><br><span class=\"line\">#ODBCInstLib=libiodbcinst.<span class=\"keyword\">so</span></span><br><span class=\"line\">#   SimbaDM / unixODBC</span><br><span class=\"line\">ODBCInstLib=libodbcinst.<span class=\"keyword\">so</span></span><br><span class=\"line\"></span><br><span class=\"line\">AIX specific ODBCInstLib</span><br><span class=\"line\">#   iODBC</span><br><span class=\"line\">#ODBCInstLib=libiodbcinst.<span class=\"keyword\">a</span>(libiodbcinst.<span class=\"keyword\">so</span>.<span class=\"number\">2</span>)</span><br><span class=\"line\">#   SimbaDM</span><br><span class=\"line\">#ODBCInstLib=libodbcinst.<span class=\"keyword\">a</span>(odbcinst.<span class=\"keyword\">so</span>)</span><br><span class=\"line\">#   unixODBC</span><br><span class=\"line\">#ODBCInstLib=libodbcinst.<span class=\"keyword\">a</span>(libodbcinst.<span class=\"keyword\">so</span>.<span class=\"number\">1</span>)</span><br></pre></td></tr></table></figure>\n<h4 id=\"测试连接impala\"><a href=\"#测试连接impala\" class=\"headerlink\" title=\"测试连接impala\"></a>测试连接impala</h4><p>因为在/etc/odbc.ini我们设定的DSN名称为impala, 所以执行如下语句:</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">[root@localhost ~]<span class=\"comment\"># isql -v 'impala'</span></span><br><span class=\"line\">        +---------------------------------------+</span><br><span class=\"line\">        | Connected!                            |</span><br><span class=\"line\">        |                                       |</span><br><span class=\"line\">        | sql-statement                         |</span><br><span class=\"line\">        | <span class=\"built_in\">help</span> [tablename]                      |</span><br><span class=\"line\">        | quit                                  |</span><br><span class=\"line\">        |                                       |</span><br><span class=\"line\">        +---------------------------------------+</span><br></pre></td></tr></table></figure>\n<h3 id=\"PHP通过ODBC连接Impala-方法2\"><a href=\"#PHP通过ODBC连接Impala-方法2\" class=\"headerlink\" title=\"PHP通过ODBC连接Impala(方法2)\"></a>PHP通过ODBC连接Impala(方法2)</h3><h4 id=\"安装ODBC相关软件包以及ImpalaODBC驱动-1\"><a href=\"#安装ODBC相关软件包以及ImpalaODBC驱动-1\" class=\"headerlink\" title=\"安装ODBC相关软件包以及ImpalaODBC驱动\"></a>安装ODBC相关软件包以及ImpalaODBC驱动</h4><figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># yum install -y unixODBC*</span></span><br><span class=\"line\"><span class=\"comment\"># rpm -ivh ClouderaImpalaODBC-2.5.15.1015-1.el6.x86_64.rpm</span></span><br></pre></td></tr></table></figure>\n<h4 id=\"新建存放配置的目录\"><a href=\"#新建存放配置的目录\" class=\"headerlink\" title=\"新建存放配置的目录\"></a>新建存放配置的目录</h4><figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">[root@localhost ~]<span class=\"comment\"># mkdir /home/xxx/config_odbc</span></span><br><span class=\"line\">[root@localhost ~]<span class=\"comment\"># cd /home/xxx/config_odbc</span></span><br><span class=\"line\">[root@localhost config_odbc]<span class=\"comment\"># mkdir odbc</span></span><br></pre></td></tr></table></figure>\n<h4 id=\"创建环境变量文件common-env\"><a href=\"#创建环境变量文件common-env\" class=\"headerlink\" title=\"创建环境变量文件common.env\"></a>创建环境变量文件common.env</h4><figure class=\"highlight vim\"><table><tr><td class=\"code\"><pre><span class=\"line\">[root@localhost config_odbc]# <span class=\"keyword\">vim</span> common.env</span><br><span class=\"line\"></span><br><span class=\"line\">CONFIG_DIR=$(readlink -<span class=\"keyword\">f</span> $(dirname $&#123;BASH_SOURCE[<span class=\"number\">0</span>]&#125;))</span><br><span class=\"line\">ODBC_CONFIG_DIR=$&#123;CONFIG_DIR&#125;/odbc</span><br><span class=\"line\">export ODBCINI=$&#123;ODBC_CONFIG_DIR&#125;/odbc.ini</span><br><span class=\"line\">export ODBCSYSINI=$&#123;ODBC_CONFIG_DIR&#125;</span><br><span class=\"line\">export CLOUDERAIMPALAINI=$&#123;ODBC_CONFIG_DIR&#125;/cloudera.impalaodbc.ini</span><br><span class=\"line\">export CLOUDERAHIVEINI=$&#123;ODBC_CONFIG_DIR&#125;/cloudera.hiveodbc.ini</span><br><span class=\"line\">export LD_LIBRARY_PATH=/usr/local/li<span class=\"variable\">b:</span>/<span class=\"keyword\">opt</span>/cloudera/impalaodbc/lib/<span class=\"number\">64</span></span><br></pre></td></tr></table></figure>\n<h4 id=\"创建配置odbc-odbc-ini\"><a href=\"#创建配置odbc-odbc-ini\" class=\"headerlink\" title=\"创建配置odbc/odbc.ini\"></a>创建配置odbc/odbc.ini</h4><figure class=\"highlight vim\"><table><tr><td class=\"code\"><pre><span class=\"line\">[root@localhost config_odbc]# <span class=\"keyword\">vim</span> odbc/odbc.ini    【注意里面包含了ODBC连接hive和impala的配置】</span><br><span class=\"line\"></span><br><span class=\"line\">[ODBC]</span><br><span class=\"line\"># Specify any <span class=\"keyword\">global</span> ODBC configuration here such <span class=\"keyword\">as</span> ODBC tracing.</span><br><span class=\"line\">[ODBC Data Sources]</span><br><span class=\"line\">#Cloudera Hive <span class=\"number\">32</span>-bit=Cloudera ODBC Driver <span class=\"keyword\">for</span> Apache Hive <span class=\"number\">32</span>-bit</span><br><span class=\"line\">hive=Cloudera ODBC Driver <span class=\"keyword\">for</span> Apache Hive <span class=\"number\">64</span>-bit</span><br><span class=\"line\">impala=Cloudera ODBC Driver <span class=\"keyword\">for</span> Impala <span class=\"number\">64</span>-bit</span><br><span class=\"line\">[hive]</span><br><span class=\"line\"># Description: DSN Description.</span><br><span class=\"line\"># This key <span class=\"keyword\">is</span> not necessary <span class=\"built_in\">and</span> <span class=\"keyword\">is</span> <span class=\"keyword\">only</span> <span class=\"keyword\">to</span> give <span class=\"keyword\">a</span> description of the data <span class=\"keyword\">source</span>.</span><br><span class=\"line\">Description=Cloudera ODBC Driver <span class=\"keyword\">for</span> Apache Hive (<span class=\"number\">64</span>-bit) DSN</span><br><span class=\"line\"># Driver: The location where the ODBC driver <span class=\"keyword\">is</span> installed <span class=\"keyword\">to</span>.</span><br><span class=\"line\">Driver=/<span class=\"keyword\">opt</span>/cloudera/hiveodbc/lib/<span class=\"number\">64</span>/libclouderahiveodbc64.<span class=\"keyword\">so</span></span><br><span class=\"line\"># When using No Service Discovery, specify the IP address <span class=\"built_in\">or</span> host name of the Hive server.</span><br><span class=\"line\"># When using ZooKeeper <span class=\"keyword\">as</span> the Service Discovery Mode, specify <span class=\"keyword\">a</span> comma-separated <span class=\"keyword\">list</span> of ZooKeeper</span><br><span class=\"line\"># servers in the following forma<span class=\"variable\">t:</span></span><br><span class=\"line\">#       &lt;zk_host1:zk_port1&gt;,&lt;zk_host2:zk_port2&gt;,...</span><br><span class=\"line\">HOST=<span class=\"number\">192.168</span>.<span class=\"number\">11.9</span></span><br><span class=\"line\"># The TCP port Hive server <span class=\"keyword\">is</span> listening. This <span class=\"keyword\">is</span> not required when using ZooKeeper <span class=\"keyword\">as</span> the service</span><br><span class=\"line\"># discovery <span class=\"keyword\">mode</span> <span class=\"keyword\">as</span> the port <span class=\"keyword\">is</span> specified in the HOST connection attribute.</span><br><span class=\"line\">PORT=<span class=\"number\">10000</span></span><br><span class=\"line\"># The name of the database schema <span class=\"keyword\">to</span> use when <span class=\"keyword\">a</span> schema <span class=\"keyword\">is</span> not explicitly specified in <span class=\"keyword\">a</span> query.</span><br><span class=\"line\">Schema=default</span><br><span class=\"line\"># Set <span class=\"keyword\">to</span> <span class=\"number\">0</span> <span class=\"keyword\">to</span> when connecting directory <span class=\"keyword\">to</span> Hive Server <span class=\"number\">2</span> (No Service Discovery).</span><br><span class=\"line\"># Set <span class=\"keyword\">to</span> <span class=\"number\">1</span> <span class=\"keyword\">to</span> <span class=\"keyword\">do</span> Hive Server <span class=\"number\">2</span> service discovery using ZooKeeper.</span><br><span class=\"line\"># Note service discovery <span class=\"keyword\">is</span> not support when using Hive Server <span class=\"number\">1</span>.</span><br><span class=\"line\">ServiceDiscoveryMode=<span class=\"number\">0</span></span><br><span class=\"line\"># The namespace <span class=\"keyword\">on</span> ZooKeeper under which Hive Server <span class=\"number\">2</span> znodes are added. Required <span class=\"keyword\">only</span> when doing</span><br><span class=\"line\"># HS2 service discovery with ZooKeeper (ServiceDiscoveryMode=<span class=\"number\">1</span>).</span><br><span class=\"line\">ZKNamespace=</span><br><span class=\"line\"># Set <span class=\"keyword\">to</span> <span class=\"number\">1</span> <span class=\"keyword\">if</span> you are connecting <span class=\"keyword\">to</span> Hive Server <span class=\"number\">1</span>. Set <span class=\"keyword\">to</span> <span class=\"number\">2</span> <span class=\"keyword\">if</span> you are connecting <span class=\"keyword\">to</span> Hive Server <span class=\"number\">2</span>.</span><br><span class=\"line\">HiveServerType=<span class=\"number\">2</span></span><br><span class=\"line\"># The authentication mechanism <span class=\"keyword\">to</span> use <span class=\"keyword\">for</span> the connection.</span><br><span class=\"line\">#   Set <span class=\"keyword\">to</span> <span class=\"number\">0</span> <span class=\"keyword\">for</span> No Authentication</span><br><span class=\"line\">#   Set <span class=\"keyword\">to</span> <span class=\"number\">1</span> <span class=\"keyword\">for</span> Kerberos</span><br><span class=\"line\">#   Set <span class=\"keyword\">to</span> <span class=\"number\">2</span> <span class=\"keyword\">for</span> User Name</span><br><span class=\"line\">#   Set <span class=\"keyword\">to</span> <span class=\"number\">3</span> <span class=\"keyword\">for</span> User Name <span class=\"built_in\">and</span> Password</span><br><span class=\"line\"># Note <span class=\"keyword\">only</span> No Authentication <span class=\"keyword\">is</span> supported when connecting <span class=\"keyword\">to</span> Hive Server <span class=\"number\">1</span>.</span><br><span class=\"line\">AuthMech=<span class=\"number\">2</span></span><br><span class=\"line\"># The Thrift transport <span class=\"keyword\">to</span> use <span class=\"keyword\">for</span> the connection.</span><br><span class=\"line\">#    Set <span class=\"keyword\">to</span> <span class=\"number\">0</span> <span class=\"keyword\">for</span> Binary</span><br><span class=\"line\">#    Set <span class=\"keyword\">to</span> <span class=\"number\">1</span> <span class=\"keyword\">for</span> SASL</span><br><span class=\"line\">#    Set <span class=\"keyword\">to</span> <span class=\"number\">2</span> <span class=\"keyword\">for</span> HTTP</span><br><span class=\"line\"># Note <span class=\"keyword\">for</span> Hive Server <span class=\"number\">1</span> <span class=\"keyword\">only</span> Binary can <span class=\"keyword\">be</span> used.</span><br><span class=\"line\">ThriftTransport=<span class=\"number\">1</span></span><br><span class=\"line\"># When this option <span class=\"keyword\">is</span> enabled (<span class=\"number\">1</span>), the driver does not transform the queries emitted by <span class=\"keyword\">an</span></span><br><span class=\"line\"># application, <span class=\"keyword\">so</span> the native query <span class=\"keyword\">is</span> used.</span><br><span class=\"line\"># When this option <span class=\"keyword\">is</span> disabled (<span class=\"number\">0</span>), the driver transforms the queries emitted by <span class=\"keyword\">an</span> application <span class=\"built_in\">and</span></span><br><span class=\"line\"># converts them into <span class=\"keyword\">an</span> equivalent from in HiveQL.</span><br><span class=\"line\">UseNativeQuery=<span class=\"number\">0</span></span><br><span class=\"line\"># Set the UID with the user name <span class=\"keyword\">to</span> use <span class=\"keyword\">to</span> access Hive when using AuthMech <span class=\"number\">2</span> <span class=\"keyword\">to</span> <span class=\"number\">8</span>.</span><br><span class=\"line\">UID=hdfs</span><br><span class=\"line\"># The following <span class=\"keyword\">is</span> settings used when using Kerberos authentication (AuthMech <span class=\"number\">1</span> <span class=\"built_in\">and</span> <span class=\"number\">10</span>)</span><br><span class=\"line\"># The fully qualified host name part of the of the Hive Server <span class=\"number\">2</span> Kerberos service principal.</span><br><span class=\"line\"># For example <span class=\"keyword\">if</span> the service principal name of you Hive Server <span class=\"number\">2</span> i<span class=\"variable\">s:</span></span><br><span class=\"line\">#   hive/myhs2.mydomain.com@EXAMPLE.COM</span><br><span class=\"line\"># Then <span class=\"keyword\">set</span> KrbHostFQDN <span class=\"keyword\">to</span> myhs2.mydomain.<span class=\"keyword\">com</span></span><br><span class=\"line\">KrbHostFQDN=_HOST</span><br><span class=\"line\"># The service name part of the of the Hive Server <span class=\"number\">2</span> Kerberos service principal.</span><br><span class=\"line\"># For example <span class=\"keyword\">if</span> the service principal name of you Hive Server <span class=\"number\">2</span> i<span class=\"variable\">s:</span></span><br><span class=\"line\">#   hive/myhs2.mydomain.com@EXAMPLE.COM</span><br><span class=\"line\"># Then <span class=\"keyword\">set</span> KrbServiceName <span class=\"keyword\">to</span> hive</span><br><span class=\"line\">KrbServiceName=hive</span><br><span class=\"line\"># The realm part of the of the Hive Server <span class=\"number\">2</span> Kerberos service principal.</span><br><span class=\"line\"># For example <span class=\"keyword\">if</span> the service principal name of you Hive Server <span class=\"number\">2</span> i<span class=\"variable\">s:</span></span><br><span class=\"line\">#   hive/myhs2.mydomain.com@EXAMPLE.COM</span><br><span class=\"line\"># Then <span class=\"keyword\">set</span> KrbRealm <span class=\"keyword\">to</span> EXAMPLE.COM</span><br><span class=\"line\">KrbRealm=</span><br><span class=\"line\"># Set <span class=\"keyword\">to</span> <span class=\"number\">1</span> <span class=\"keyword\">to</span> enable SSL. Set <span class=\"keyword\">to</span> <span class=\"number\">0</span> <span class=\"keyword\">to</span> disable.</span><br><span class=\"line\">SSL=<span class=\"number\">0</span></span><br><span class=\"line\"># Set <span class=\"keyword\">to</span> <span class=\"number\">1</span> <span class=\"keyword\">to</span> enable two-way SSL. Set <span class=\"keyword\">to</span> <span class=\"number\">0</span> <span class=\"keyword\">to</span> disable. You must enable SSL in order <span class=\"keyword\">to</span></span><br><span class=\"line\"># use two-way SSL.</span><br><span class=\"line\">TwoWaySSL=<span class=\"number\">0</span></span><br><span class=\"line\"># The <span class=\"keyword\">file</span> containing the client certificate in PEM format. This <span class=\"keyword\">is</span> required when using two-way SSL.</span><br><span class=\"line\">ClientCert=</span><br><span class=\"line\"># The client private key. This <span class=\"keyword\">is</span> used <span class=\"keyword\">for</span> two-way SSL authentication.</span><br><span class=\"line\">ClientPrivateKey=</span><br><span class=\"line\"># The password <span class=\"keyword\">for</span> the client private key. Password <span class=\"keyword\">is</span> <span class=\"keyword\">only</span> required <span class=\"keyword\">for</span> password protected</span><br><span class=\"line\"># client private key.</span><br><span class=\"line\">ClientPrivateKeyPassword=</span><br><span class=\"line\">[impala]</span><br><span class=\"line\"># Description: DSN Description.</span><br><span class=\"line\"># This key <span class=\"keyword\">is</span> not necessary <span class=\"built_in\">and</span> <span class=\"keyword\">is</span> <span class=\"keyword\">only</span> <span class=\"keyword\">to</span> give <span class=\"keyword\">a</span> description of the data <span class=\"keyword\">source</span>.</span><br><span class=\"line\">Description=Cloudera ODBC Driver <span class=\"keyword\">for</span> Impala (<span class=\"number\">64</span>-bit) DSN</span><br><span class=\"line\"># Driver: The location where the ODBC driver <span class=\"keyword\">is</span> installed <span class=\"keyword\">to</span>.</span><br><span class=\"line\">Driver=/<span class=\"keyword\">opt</span>/cloudera/impalaodbc/lib/<span class=\"number\">64</span>/libclouderaimpalaodbc64.<span class=\"keyword\">so</span></span><br><span class=\"line\"># The DriverUnicodeEncoding setting <span class=\"keyword\">is</span> <span class=\"keyword\">only</span> used <span class=\"keyword\">for</span> SimbaDM</span><br><span class=\"line\"># When <span class=\"keyword\">set</span> <span class=\"keyword\">to</span> <span class=\"number\">1</span>, SimbaDM runs in UTF-<span class=\"number\">16</span> <span class=\"keyword\">mode</span>.</span><br><span class=\"line\"># When <span class=\"keyword\">set</span> <span class=\"keyword\">to</span> <span class=\"number\">2</span>, SimbaDM runs in UTF-<span class=\"number\">8</span> <span class=\"keyword\">mode</span>.</span><br><span class=\"line\">#DriverUnicodeEncoding=<span class=\"number\">2</span></span><br><span class=\"line\"># Values <span class=\"keyword\">for</span> HOST, PORT, KrbFQDN, <span class=\"built_in\">and</span> KrbServiceName should <span class=\"keyword\">be</span> <span class=\"keyword\">set</span> here.</span><br><span class=\"line\"># They can also <span class=\"keyword\">be</span> specified <span class=\"keyword\">on</span> the connection <span class=\"built_in\">string</span>.</span><br><span class=\"line\">HOST=<span class=\"number\">192.168</span>.<span class=\"number\">11.10</span></span><br><span class=\"line\">PORT=<span class=\"number\">21050</span></span><br><span class=\"line\">Database=default</span><br><span class=\"line\"># The authentication mechanism.</span><br><span class=\"line\"># <span class=\"number\">0</span> - No authentication (NOSASL)</span><br><span class=\"line\"># <span class=\"number\">1</span> - Kerberos authentication (SASL)</span><br><span class=\"line\"># <span class=\"number\">2</span> - Username authentication (SASL)</span><br><span class=\"line\"># <span class=\"number\">3</span> - Username/password authentication (NOSASL <span class=\"built_in\">or</span> SASL depending <span class=\"keyword\">on</span> UseSASL configuration)</span><br><span class=\"line\">AuthMech=<span class=\"number\">3</span></span><br><span class=\"line\"># Set <span class=\"keyword\">to</span> <span class=\"number\">1</span> <span class=\"keyword\">to</span> use SASL <span class=\"keyword\">for</span> authentication.</span><br><span class=\"line\"># Set <span class=\"keyword\">to</span> <span class=\"number\">0</span> <span class=\"keyword\">to</span> not use SASL.</span><br><span class=\"line\"># When using Kerberos authentication (SASL) <span class=\"built_in\">or</span> Username authentication (SASL) SASL <span class=\"keyword\">is</span> always used</span><br><span class=\"line\"># <span class=\"built_in\">and</span> this configuration <span class=\"keyword\">is</span> ignored. SASL <span class=\"keyword\">is</span> always not used <span class=\"keyword\">for</span> No authentication (NOSASL).</span><br><span class=\"line\">UseSASL=<span class=\"number\">0</span></span><br><span class=\"line\"># Kerberos related settings.</span><br><span class=\"line\">KrbFQDN=</span><br><span class=\"line\">KrbRealm=</span><br><span class=\"line\">KrbServiceName=</span><br><span class=\"line\"># Username/password authentication with SASL settings.</span><br><span class=\"line\">UID=hdfs</span><br><span class=\"line\">PWD=</span><br><span class=\"line\"># Set <span class=\"keyword\">to</span> <span class=\"number\">0</span> <span class=\"keyword\">to</span> disable SSL.</span><br><span class=\"line\"># Set <span class=\"keyword\">to</span> <span class=\"number\">1</span> <span class=\"keyword\">to</span> enable SSL.</span><br><span class=\"line\">SSL=<span class=\"number\">0</span></span><br><span class=\"line\">CAIssuedCertNamesMismatch=<span class=\"number\">1</span></span><br><span class=\"line\">TrustedCerts=/<span class=\"keyword\">opt</span>/cloudera/impalaodbc/lib/<span class=\"number\">64</span>/cacerts.pem</span><br><span class=\"line\"># General settings</span><br><span class=\"line\">TSaslTransportBufSize=<span class=\"number\">1000</span></span><br><span class=\"line\">RowsFetchedPerBlock=<span class=\"number\">10000</span></span><br><span class=\"line\">SocketTimeout=<span class=\"number\">0</span></span><br><span class=\"line\">StringColumnLength=<span class=\"number\">32767</span></span><br><span class=\"line\">UseNativeQuery=<span class=\"number\">0</span></span><br></pre></td></tr></table></figure>\n<h4 id=\"创建配置odbc-odbcinst-ini\"><a href=\"#创建配置odbc-odbcinst-ini\" class=\"headerlink\" title=\"创建配置odbc/odbcinst.ini\"></a>创建配置odbc/odbcinst.ini</h4><figure class=\"highlight vim\"><table><tr><td class=\"code\"><pre><span class=\"line\">[root@localhost config_odbc]# <span class=\"keyword\">vim</span> odbc/odbcinst.ini    【注意里面包含了ODBC连接hive和impala的配置】</span><br><span class=\"line\"></span><br><span class=\"line\">[ODBC Drivers]</span><br><span class=\"line\">Cloudera ODBC Driver <span class=\"keyword\">for</span> Apache Hive <span class=\"number\">64</span>-bit=Installed</span><br><span class=\"line\">Cloudera ODBC Driver <span class=\"keyword\">for</span> Impala <span class=\"number\">64</span>-bit=Installed</span><br><span class=\"line\">#[Cloudera ODBC Driver <span class=\"keyword\">for</span> Apache Hive <span class=\"number\">32</span>-bit]</span><br><span class=\"line\">#Description=Cloudera ODBC Driver <span class=\"keyword\">for</span> Apache Hive (<span class=\"number\">32</span>-bit)</span><br><span class=\"line\">#Driver=/<span class=\"keyword\">opt</span>/cloudera/hiveodbc/lib/<span class=\"number\">32</span>/libclouderahiveodbc32.<span class=\"keyword\">so</span></span><br><span class=\"line\">[Cloudera ODBC Driver <span class=\"keyword\">for</span> Apache Hive <span class=\"number\">64</span>-bit]</span><br><span class=\"line\">Description=Cloudera ODBC Driver <span class=\"keyword\">for</span> Apache Hive (<span class=\"number\">64</span>-bit)</span><br><span class=\"line\">Driver=/<span class=\"keyword\">opt</span>/cloudera/hiveodbc/lib/<span class=\"number\">64</span>/libclouderahiveodbc64.<span class=\"keyword\">so</span></span><br><span class=\"line\">## The option below <span class=\"keyword\">is</span> <span class=\"keyword\">for</span> using unixODBC when compiled with -DSQL_WCHART_CONVERT.</span><br><span class=\"line\">## Execute <span class=\"string\">'odbc_config --cflags'</span> <span class=\"keyword\">to</span> determine <span class=\"keyword\">if</span> you need <span class=\"keyword\">to</span> uncomment it.</span><br><span class=\"line\"># IconvEncoding=UCS-<span class=\"number\">4</span>LE</span><br><span class=\"line\">[Cloudera ODBC Driver <span class=\"keyword\">for</span> Impala <span class=\"number\">64</span>-bit]</span><br><span class=\"line\">Description=Cloudera ODBC Driver <span class=\"keyword\">for</span> Impala (<span class=\"number\">64</span>-bit)</span><br><span class=\"line\">Driver=/<span class=\"keyword\">opt</span>/cloudera/impalaodbc/lib/<span class=\"number\">64</span>/libclouderaimpalaodbc64.<span class=\"keyword\">so</span></span><br><span class=\"line\">## The option below <span class=\"keyword\">is</span> <span class=\"keyword\">for</span> using unixODBC when compiled with -DSQL_WCHART_CONVERT.</span><br><span class=\"line\">## Execute <span class=\"string\">'odbc_config --cflags'</span> <span class=\"keyword\">to</span> determine <span class=\"keyword\">if</span> you need <span class=\"keyword\">to</span> uncomment it.</span><br><span class=\"line\"># IconvEncoding=UCS-<span class=\"number\">4</span>LE</span><br></pre></td></tr></table></figure>\n<h4 id=\"创建配置odbc-cloudera-impalaodbc-ini\"><a href=\"#创建配置odbc-cloudera-impalaodbc-ini\" class=\"headerlink\" title=\"创建配置odbc/cloudera.impalaodbc.ini\"></a>创建配置odbc/cloudera.impalaodbc.ini</h4><figure class=\"highlight vim\"><table><tr><td class=\"code\"><pre><span class=\"line\">[root@localhost config_odbc]# <span class=\"keyword\">vim</span> odbc/cloudera.impalaodbc.ini    【注意里面包含了ODBC连接hive和impala的配置】</span><br><span class=\"line\"></span><br><span class=\"line\">[Driver]</span><br><span class=\"line\">## - Note that this default DriverManagerEncoding of UTF-<span class=\"number\">32</span> <span class=\"keyword\">is</span> <span class=\"keyword\">for</span> iODBC.</span><br><span class=\"line\">## - unixODBC uses UTF-<span class=\"number\">16</span> by default.</span><br><span class=\"line\">## - If unixODBC was compiled with -DSQL_WCHART_CONVERT, then UTF-<span class=\"number\">32</span> <span class=\"keyword\">is</span> the correct value.</span><br><span class=\"line\">##   Execute <span class=\"string\">'odbc_config --cflags'</span> <span class=\"keyword\">to</span> determine <span class=\"keyword\">if</span> you need UTF-<span class=\"number\">32</span> <span class=\"built_in\">or</span> UTF-<span class=\"number\">16</span> <span class=\"keyword\">on</span> unixODBC</span><br><span class=\"line\">## - SimbaDM can <span class=\"keyword\">be</span> used with UTF-<span class=\"number\">8</span> <span class=\"built_in\">or</span> UTF-<span class=\"number\">16</span>.</span><br><span class=\"line\">##   The DriverUnicodeEncoding setting will cause SimbaDM <span class=\"keyword\">to</span> run in UTF-<span class=\"number\">8</span> when <span class=\"keyword\">set</span> <span class=\"keyword\">to</span> <span class=\"number\">2</span> <span class=\"built_in\">or</span> UTF-<span class=\"number\">16</span> when <span class=\"keyword\">set</span> <span class=\"keyword\">to</span> <span class=\"number\">1</span>.</span><br><span class=\"line\">DriverManagerEncoding=UTF-<span class=\"number\">32</span></span><br><span class=\"line\">ErrorMessagesPath=/<span class=\"keyword\">opt</span>/cloudera/impalaodbc/ErrorMessages</span><br><span class=\"line\">LogLevel=<span class=\"number\">0</span></span><br><span class=\"line\">LogPath=</span><br><span class=\"line\">## - Uncomment the ODBCInstLib corresponding <span class=\"keyword\">to</span> the Driver Manager being used.</span><br><span class=\"line\">## - Note that the path <span class=\"keyword\">to</span> your ODBC Driver Manager must <span class=\"keyword\">be</span> specified in LD_LIBRARY_PATH (LIBPATH <span class=\"keyword\">for</span> AIX).</span><br><span class=\"line\">## - Note that AIX <span class=\"built_in\">has</span> <span class=\"keyword\">a</span> different format <span class=\"keyword\">for</span> specifying its shared libraries.</span><br><span class=\"line\"># Generic ODBCInstLib</span><br><span class=\"line\">#   iODBC</span><br><span class=\"line\">#ODBCInstLib=libiodbcinst.<span class=\"keyword\">so</span></span><br><span class=\"line\">#   SimbaDM / unixODBC</span><br><span class=\"line\">ODBCInstLib=libodbcinst.<span class=\"keyword\">so</span></span><br><span class=\"line\"># AIX specific ODBCInstLib</span><br><span class=\"line\">#   iODBC</span><br><span class=\"line\">#ODBCInstLib=libiodbcinst.<span class=\"keyword\">a</span>(libiodbcinst.<span class=\"keyword\">so</span>.<span class=\"number\">2</span>)</span><br><span class=\"line\">#   SimbaDM</span><br><span class=\"line\">#ODBCInstLib=libodbcinst.<span class=\"keyword\">a</span>(odbcinst.<span class=\"keyword\">so</span>)</span><br><span class=\"line\">#   unixODBC</span><br><span class=\"line\">#ODBCInstLib=libodbcinst.<span class=\"keyword\">a</span>(libodbcinst.<span class=\"keyword\">so</span>.<span class=\"number\">1</span>)</span><br></pre></td></tr></table></figure>\n<h4 id=\"创建配置cloudera-hiveodbc-ini\"><a href=\"#创建配置cloudera-hiveodbc-ini\" class=\"headerlink\" title=\"创建配置cloudera.hiveodbc.ini\"></a>创建配置cloudera.hiveodbc.ini</h4><figure class=\"highlight vim\"><table><tr><td class=\"code\"><pre><span class=\"line\">[root@localhost config_odbc]# <span class=\"keyword\">vim</span> odbc/cloudera.hiveodbc.ini    【注意里面包含了ODBC连接hive和impala的配置】</span><br><span class=\"line\"></span><br><span class=\"line\">[Driver]</span><br><span class=\"line\">ErrorMessagesPath=/<span class=\"keyword\">opt</span>/cloudera/hiveodbc/ErrorMessages/</span><br><span class=\"line\">LogLevel=<span class=\"number\">0</span></span><br><span class=\"line\">LogPath=</span><br><span class=\"line\">SwapFilePath=/tmp</span><br></pre></td></tr></table></figure>\n<h4 id=\"进行测试\"><a href=\"#进行测试\" class=\"headerlink\" title=\"进行测试\"></a>进行测试</h4><figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">[root@localhost config_odbc]<span class=\"comment\"># source common.env</span></span><br><span class=\"line\">        [root@localhost config_odbc]<span class=\"comment\"># isql -v 'impala'</span></span><br><span class=\"line\">        +---------------------------------------+</span><br><span class=\"line\">        | Connected!                            |</span><br><span class=\"line\">        |                                       |</span><br><span class=\"line\">        | sql-statement                         |</span><br><span class=\"line\">        | <span class=\"built_in\">help</span> [tablename]                      |</span><br><span class=\"line\">        | quit                                  |</span><br><span class=\"line\">        |                                       |</span><br><span class=\"line\">        +---------------------------------------+</span><br></pre></td></tr></table></figure>\n<p>注意前提是, 连接的IP的端口已经开启了此机器的访问权限, 否则会出现如下错误:</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">[root@localhost config_odbc]<span class=\"comment\"># isql -v 'impala'</span></span><br><span class=\"line\">        [S1000][unixODBC][Cloudera][ImpalaODBC] (100) Error from the Impala Thrift API: connect() failed: Connection timed out</span><br><span class=\"line\">        [ISQL]ERROR: Could not SQLConnect</span><br></pre></td></tr></table></figure>\n<h4 id=\"运行php进行测试\"><a href=\"#运行php进行测试\" class=\"headerlink\" title=\"运行php进行测试\"></a>运行php进行测试</h4><p>1)如果是安装odbc扩展的, 如下:</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">./configure --prefix=<span class=\"variable\">$php_root</span> --with-config-file-path=/etc --with-mysql=<span class=\"variable\">$mysql_root</span> --with-pdo-mysql=<span class=\"variable\">$mysql_root</span>/bin/mysql_config --with-mysqli=<span class=\"variable\">$mysql_root</span>/bin/mysql_config --with-iconv-dir=/usr/<span class=\"built_in\">local</span> --with-freetype-dir --with-jpeg-dir --with-png-dir --<span class=\"built_in\">enable</span>-gd-native-ttf --<span class=\"built_in\">enable</span>-zip --with-zlib --with-gd --<span class=\"built_in\">disable</span>-rpath --<span class=\"built_in\">enable</span>-bcmath --<span class=\"built_in\">enable</span>-shmop --<span class=\"built_in\">enable</span>-sysvsem --with-curl --with-curlwrappers --<span class=\"built_in\">enable</span>-mbstring --with-mcrypt --<span class=\"built_in\">disable</span>-ipv6 --<span class=\"built_in\">enable</span>-static --<span class=\"built_in\">enable</span>-maintainer-zts --<span class=\"built_in\">enable</span>-sockets --<span class=\"built_in\">enable</span>-soap --with-openssl --without-pdo-sqlite --<span class=\"built_in\">enable</span>-fpm --with-unixODBC=/usr/</span><br></pre></td></tr></table></figure>\n<p>那么, 就用面向过程的写法:</p>\n<figure class=\"highlight php\"><table><tr><td class=\"code\"><pre><span class=\"line\">[root@localhost ~]<span class=\"comment\"># vim test-php-odbc-impala.php</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">&lt;?php</span></span><br><span class=\"line\">$conn = odbc_connect(<span class=\"string\">\"impala\"</span>, <span class=\"string\">\"\"</span>, <span class=\"string\">\"\"</span>);</span><br><span class=\"line\"><span class=\"keyword\">echo</span> <span class=\"string\">\"开始时间:\"</span> . time() . <span class=\"string\">\"\\r\\n\"</span>;</span><br><span class=\"line\">$sql = <span class=\"string\">\"select * from db_mcfx_log.t_log_sdk_log_pay\"</span>;</span><br><span class=\"line\"><span class=\"keyword\">echo</span> <span class=\"string\">\"准备执行sql语句: $sql\\r\\n\"</span>;</span><br><span class=\"line\">$rs = odbc_exec($conn, $sql);</span><br><span class=\"line\"><span class=\"keyword\">echo</span> <span class=\"string\">\"语句执行完成, 准备开始获取结果集\\r\\n\"</span>;</span><br><span class=\"line\">$result = [];</span><br><span class=\"line\"><span class=\"keyword\">while</span> ($row=odbc_fetch_array($rs)) &#123;</span><br><span class=\"line\">    $result[] = $row;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">echo</span> <span class=\"string\">\"结果获取完毕\\r\\n\"</span>;</span><br><span class=\"line\"><span class=\"keyword\">echo</span> <span class=\"string\">\"总记录数量: \"</span> . sizeof($result) . <span class=\"string\">\"\\r\\n\"</span>;</span><br><span class=\"line\">odbc_close($conn);</span><br><span class=\"line\">var_dump($conn);</span><br><span class=\"line\"><span class=\"keyword\">echo</span> <span class=\"string\">\"结束时间: \"</span> . time() . <span class=\"string\">\"\\r\\n\"</span>;</span><br></pre></td></tr></table></figure>\n<p>2)如果是安装pdo_odbc扩展的, 那么就用面向过程的方法如下测试:</p>\n<figure class=\"highlight php\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&lt;?php</span></span><br><span class=\"line\">$dbh= <span class=\"keyword\">new</span> PDO(<span class=\"string\">'odbc:impala'</span>, <span class=\"string\">''</span>, <span class=\"string\">''</span>);</span><br><span class=\"line\">$sql = <span class=\"string\">\"select count(*) from db_mcfx_log.t_log_sdk_log_pay\"</span>;</span><br><span class=\"line\">$stmt = $dbh-&gt;prepare(<span class=\"string\">\"$sql\"</span>);</span><br><span class=\"line\">$stmt-&gt;execute();</span><br><span class=\"line\"><span class=\"keyword\">while</span> ($row = $stmt-&gt;fetch()) &#123;</span><br><span class=\"line\">    print_r($row);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">unset</span>($dbh); <span class=\"keyword\">unset</span>($stmt);</span><br></pre></td></tr></table></figure>\n<p>3)注意:</p>\n<p>如果PHP开启了开机自启动, 那么可能会出现连接odbc报错说库文件找不到.<br>这时候, 可以重启PHP那么就可以解决了, 原因暂时未明.</p>\n<h3 id=\"php常用ODBC函数集\"><a href=\"#php常用ODBC函数集\" class=\"headerlink\" title=\"php常用ODBC函数集\"></a>php常用ODBC函数集</h3><ol>\n<li>ODBC连接类函数<br> odbc_connect函数: 打开一个ODBC连接<br> odbc_close函数: 关闭一个已经打开的ODBC连接<br> odbc_close_all函数: 关闭所有已经打开的ODBC连接<br> odbc_pconnect函数: 打开一个持续有效的ODBC连接</li>\n<li>ODBC操作类函数<br> odbc_commit函数: 更新所有处于未决状态的操作<br> odbc_do函数: 在打开的ODBC连接上执行SQL语句<br> odbc_exec函数: 执行SQL语句<br> odbc_execute函数: 执行一个预置的SQL语句<br> odbc_free_result函数: 释放传回资料所占用的内存<br> odbc_prepare函数: 预置SQL语句的执行<br> odbc_rollback函数: 撤销所有处于未决状态的操作</li>\n<li>ODBC信息获取类函数<br> odbc_columnprivileges函数: 列出给定表的列和相关的权限<br> odbc_columns函数: 列出指定表的列的名称<br> odbc_cursor函数: 获取光标的名称<br> odbc_data_source函数: 返回连接数据库的信息<br> odbc_error函数: 获取最后的错误代码<br> odbc_errormsg函数: 获取最后的错误信息<br> odbc_fetch_array函数: 获取结果集数组<br> odbc_fetch_into函数: 获取传回的指定列<br> odbc_fetch_object函数: 返回结果集到对象<br> odbc_fetch_row函数: 获取传回的一列<br> odbc_field_len函数: 获取字段的长度<br> odbc_field_name函数: 获取字段的名称<br> odbc_field_num函数: 获取字段的序号<br> odbc_field_precision函数: 获取字段的长度<br> odbc_field_scale函数: 获取字段的浮点数<br> odbc_field_type函数: 获取字段的资料类型<br> odbc_foreignkeys函数: 返回特定表的外来键<br> odbc_gettypeinfo函数: 返回数据库的类型信息<br> odbc_longreadlen函数: 设定传回栏的最大值<br> odbc_num_fields函数: 获取字段数目<br> odbc_num_rows函数: 获取传回的列数目<br> odbc_primarykeys函数: 返回列的名字作为表的主键<br> odbc_procedurecolumns函数: 返回检索过程的参数信息<br> odbc_procedures函数: 获取存在于特定数据源中的进程信息<br> odbc_result_all函数: 传回HTML表格信息<br> odbc_result函数: 获取结果数据<br> odbc_specialcolumns函数: 返回一个表中在传送更新时可以自动更新的列<br> odbc_statistics函数: 获取表的状态及其索引<br> odbc_tableprivileges函数: 列出表格和每个表格关联的权限<br> odbc_tables函数: 获取特定数据库上的表的名称<br> odbc_autocommit函数: 开启或关闭自动更新<br> odbc_binmode函数: 设定二进制的数据处理方式<br> odbc_next_result函数: 检查下一个结果集是否可用<br> odbc_setoption函数: 调整ODBC设定</li>\n</ol>\n","categories":["技术"],"tags":["PHP","impala"]},{"title":"ImpalaODBC StringColumnLength导致的乱码问题","url":"/2018/07/02/%E6%8E%A2%E7%B4%A2ImpalaODBC%E5%AD%97%E7%AC%A6%E4%B8%B2%E5%AD%97%E6%AE%B5%E6%9C%80%E5%A4%A7%E5%AD%97%E7%AC%A6%E6%95%B0%E9%99%90%E5%88%B6%E5%AF%BC%E8%87%B4%E7%9A%84%E6%95%B0%E6%8D%AE%E8%A2%AB%E6%88%AA%E6%96%AD%E9%97%AE%E9%A2%98/","content":"<h3 id=\"说明\"><a href=\"#说明\" class=\"headerlink\" title=\"说明\"></a>说明</h3><ul>\n<li>mhue:自研的类似hue的hadoop查询系统</li>\n</ul>\n<h3 id=\"这个字段有点大\"><a href=\"#这个字段有点大\" class=\"headerlink\" title=\"这个字段有点大\"></a>这个字段有点大</h3><p>有一个新表，记录游戏前端发来的appdata数据，这个appdata就是本次问题的主角，存储的是玩家手机里所有应用的安装信息（应用名称、安装时间等等）。在这里，刚开始我很惊讶，为什么这些数据如此容易就能获得，直觉告诉我，这些信息非常敏感。后来才知道，原来也是需要授权的，高版本的安卓系统更难获得，而苹果手机就不用想了。了解后才知道，原来这些数据是用来做机器学习的，或许能够通过这些数据，推测出玩家的兴趣、性格等等？看起来似乎有一定的研究价值。不过，这里有一个问题，就是这个app_data实在是太“大”了，一个字段就占了几K到几十K不止（目前的实际数据，最大约47K），而且，随着玩家手机里面的应用增加而增加，也就是说，有可能会更多。这些信息都使用json格式发送到数据库中。</p>\n<h3 id=\"乱码排查开始\"><a href=\"#乱码排查开始\" class=\"headerlink\" title=\"乱码排查开始\"></a>乱码排查开始</h3><p>前面说的乱码问题，正是这个表的appdata数据导致的，其他数据表不会出现这个问题。一开始报错的提示非常奇怪，第一，在mhue中直接查询并展示数据，appdata字段呈现“抖动”情况（整个页面都不太正常），后来才知道，这个数据太大了，页面要正常显示出来非常难，Element官方估计也会表示无奈= =。其次，直接点击页面上的“下载”按钮下载数据后，数据是乱码的。以前我有探讨过乱码产生的原因，无非是字符集对不上了，于是我把impala odbc取到的数据拿出来，看看是不是UTF8编码。果然不是！打印出来的结果是CP936，这是GBK的编码吧，于是我很高兴的说，这是编码的问题，看看是不是建表有误。但是，得到的回答并非如此，建库建表有非常完善的流程，基本不会出现编码的问题，都是统一的。</p>\n<h3 id=\"PHP缓冲区满导致的字段被截断\"><a href=\"#PHP缓冲区满导致的字段被截断\" class=\"headerlink\" title=\"PHP缓冲区满导致的字段被截断\"></a>PHP缓冲区满导致的字段被截断</h3><p>既然不是编码问题，也就是说，拿到数据后，这个字符串就是不完整的，而我是在PHP层检测编码的，那是不是说，PHP拿到impala odbc的数据时，并没有拿到完整的数据呢？为了印证我的想法，我把缓冲区变为无限制，默认的output buffer是4096个字符，再看看发现并没有用。其实细想之下，缓冲区只是一个“缓冲带”，解决不同设备的读写速度差异问题，只要及时把缓冲区写到内存，根本不会出现这种问题。而稳定重现乱码问题，说明操作系统调度没有问题，没有阻塞写内存的操作。接着看</p>\n<h3 id=\"odbc-longreadlen太短，导致字符串被截断\"><a href=\"#odbc-longreadlen太短，导致字符串被截断\" class=\"headerlink\" title=\"odbc longreadlen太短，导致字符串被截断\"></a>odbc longreadlen太短，导致字符串被截断</h3><p>翻查php odbc的文档可以发现一个配置，longreadlen，这个配置决定了每一行数据中字段的最大长度，咋一看应该是它了，而且文档说明，设置为0的时候，长字段限制将会去掉。设为0试试看，发现还是没有用。</p>\n<h3 id=\"impala-odbc-StringColumnLength太短，导致字符串被截断\"><a href=\"#impala-odbc-StringColumnLength太短，导致字符串被截断\" class=\"headerlink\" title=\"impala odbc StringColumnLength太短，导致字符串被截断\"></a>impala odbc StringColumnLength太短，导致字符串被截断</h3><p>既然PHP层的配置没有起效，那么还可能是别的模块出现了错误，由于mhue的查询使用的是impala odbc连接hadoop进行查询的，所以有可能是这里的问题。查一下odbc.ini，发现确实有一个这样的字段，StringColumnLength，这个字段和longreadlen的意思相近，不过没有0这种无限制的选项。按理说，字符串限制最大应该可以去到2G，我尝试改大一点，就1M吧，1024x1024，删掉原来的32767。再试试看，发现还是没有用，下载的长度只有40k左右，而实际大小为47k。</p>\n<h3 id=\"impala-odbc-StringColumnLength最大限制为32k，导致字符串被截断\"><a href=\"#impala-odbc-StringColumnLength最大限制为32k，导致字符串被截断\" class=\"headerlink\" title=\"impala odbc StringColumnLength最大限制为32k，导致字符串被截断\"></a>impala odbc StringColumnLength最大限制为32k，导致字符串被截断</h3><p>查阅了国外的一些帖子，看到有个开发者似乎很有权威，难道是官方开发者？先不管了，看看说了什么，他说，这个StringColumnLength是一个max limit，最大就是32k，当然根据操作系统位数、内存等因素决定，可能会大一点，但是呢，这个32k在性能考虑下，是一个最佳配置…..怪不得我改了没有用，估计代码里面写死了。给出的建议是，更改数据类型为varchar，并配置字符数长度。这样的建议并不适合于我们的需求，好吧，既然如此，那就不改了。</p>\n<h3 id=\"小结\"><a href=\"#小结\" class=\"headerlink\" title=\"小结\"></a>小结</h3><p>既然这个库有限制，可以联想到，其他库也会做相应的限制，而app_data字段是无限制的，这样搞肯定是不合理。那么如何优化呢？针对这个需求，可以有三个方案：</p>\n<ol>\n<li>给与权限，让客户端直接连接hadoop取数据。</li>\n<li>另外建库，订阅数据，给与权限。</li>\n<li>分库，把appdata数据分包发，不要一次性发一个很大的数据包，通过roleid等字段映射数据包</li>\n</ol>\n<p>方案一权限可能会很大，毕竟一不小心来个drop database and rm -rf /咋办？这个东西需要斟酌一下。</p>\n<p>方案二建个库给你订阅一份数据问题也不大，看成本。再者，机器学习那边如何能够更有效率的拿到数据做分析也需要考量在内，这一点，第三个方案可能略显粗鲁，毕竟，机器学习如果以excel做数据集，未免有点奇葩..</p>\n<p>方案三，联表查数据，做归并，导出excel，也就是mhue现在这套机制。</p>\n","categories":["技术"],"tags":["PHP","ODBC"]}]